
Demo LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005838  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fa0  080059c0  080059c0  000069c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008960  08008960  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  08008960  08008960  00009960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008968  08008968  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008968  08008968  00009968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800896c  0800896c  0000996c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008970  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a010  2**0
                  CONTENTS
 10 .bss          000000d4  20000010  20000010  0000a010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  0000a010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006e61  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018d9  00000000  00000000  00010ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  00012780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000527  00000000  00000000  00012e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020af8  00000000  00000000  000133a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000092ba  00000000  00000000  00033e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3822  00000000  00000000  0003d159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010097b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b60  00000000  00000000  001009c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  00102520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080059a8 	.word	0x080059a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080059a8 	.word	0x080059a8

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b96a 	b.w	8000ac0 <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	460c      	mov	r4, r1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d14e      	bne.n	80008ae <__udivmoddi4+0xaa>
 8000810:	4694      	mov	ip, r2
 8000812:	458c      	cmp	ip, r1
 8000814:	4686      	mov	lr, r0
 8000816:	fab2 f282 	clz	r2, r2
 800081a:	d962      	bls.n	80008e2 <__udivmoddi4+0xde>
 800081c:	b14a      	cbz	r2, 8000832 <__udivmoddi4+0x2e>
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	4091      	lsls	r1, r2
 8000824:	fa20 f303 	lsr.w	r3, r0, r3
 8000828:	fa0c fc02 	lsl.w	ip, ip, r2
 800082c:	4319      	orrs	r1, r3
 800082e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000832:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000836:	fa1f f68c 	uxth.w	r6, ip
 800083a:	fbb1 f4f7 	udiv	r4, r1, r7
 800083e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000842:	fb07 1114 	mls	r1, r7, r4, r1
 8000846:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084a:	fb04 f106 	mul.w	r1, r4, r6
 800084e:	4299      	cmp	r1, r3
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x64>
 8000852:	eb1c 0303 	adds.w	r3, ip, r3
 8000856:	f104 30ff 	add.w	r0, r4, #4294967295
 800085a:	f080 8112 	bcs.w	8000a82 <__udivmoddi4+0x27e>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 810f 	bls.w	8000a82 <__udivmoddi4+0x27e>
 8000864:	3c02      	subs	r4, #2
 8000866:	4463      	add	r3, ip
 8000868:	1a59      	subs	r1, r3, r1
 800086a:	fa1f f38e 	uxth.w	r3, lr
 800086e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000872:	fb07 1110 	mls	r1, r7, r0, r1
 8000876:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800087a:	fb00 f606 	mul.w	r6, r0, r6
 800087e:	429e      	cmp	r6, r3
 8000880:	d90a      	bls.n	8000898 <__udivmoddi4+0x94>
 8000882:	eb1c 0303 	adds.w	r3, ip, r3
 8000886:	f100 31ff 	add.w	r1, r0, #4294967295
 800088a:	f080 80fc 	bcs.w	8000a86 <__udivmoddi4+0x282>
 800088e:	429e      	cmp	r6, r3
 8000890:	f240 80f9 	bls.w	8000a86 <__udivmoddi4+0x282>
 8000894:	4463      	add	r3, ip
 8000896:	3802      	subs	r0, #2
 8000898:	1b9b      	subs	r3, r3, r6
 800089a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800089e:	2100      	movs	r1, #0
 80008a0:	b11d      	cbz	r5, 80008aa <__udivmoddi4+0xa6>
 80008a2:	40d3      	lsrs	r3, r2
 80008a4:	2200      	movs	r2, #0
 80008a6:	e9c5 3200 	strd	r3, r2, [r5]
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d905      	bls.n	80008be <__udivmoddi4+0xba>
 80008b2:	b10d      	cbz	r5, 80008b8 <__udivmoddi4+0xb4>
 80008b4:	e9c5 0100 	strd	r0, r1, [r5]
 80008b8:	2100      	movs	r1, #0
 80008ba:	4608      	mov	r0, r1
 80008bc:	e7f5      	b.n	80008aa <__udivmoddi4+0xa6>
 80008be:	fab3 f183 	clz	r1, r3
 80008c2:	2900      	cmp	r1, #0
 80008c4:	d146      	bne.n	8000954 <__udivmoddi4+0x150>
 80008c6:	42a3      	cmp	r3, r4
 80008c8:	d302      	bcc.n	80008d0 <__udivmoddi4+0xcc>
 80008ca:	4290      	cmp	r0, r2
 80008cc:	f0c0 80f0 	bcc.w	8000ab0 <__udivmoddi4+0x2ac>
 80008d0:	1a86      	subs	r6, r0, r2
 80008d2:	eb64 0303 	sbc.w	r3, r4, r3
 80008d6:	2001      	movs	r0, #1
 80008d8:	2d00      	cmp	r5, #0
 80008da:	d0e6      	beq.n	80008aa <__udivmoddi4+0xa6>
 80008dc:	e9c5 6300 	strd	r6, r3, [r5]
 80008e0:	e7e3      	b.n	80008aa <__udivmoddi4+0xa6>
 80008e2:	2a00      	cmp	r2, #0
 80008e4:	f040 8090 	bne.w	8000a08 <__udivmoddi4+0x204>
 80008e8:	eba1 040c 	sub.w	r4, r1, ip
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	fa1f f78c 	uxth.w	r7, ip
 80008f4:	2101      	movs	r1, #1
 80008f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80008fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb07 f006 	mul.w	r0, r7, r6
 800090a:	4298      	cmp	r0, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x11c>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f106 34ff 	add.w	r4, r6, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x11a>
 8000918:	4298      	cmp	r0, r3
 800091a:	f200 80cd 	bhi.w	8000ab8 <__udivmoddi4+0x2b4>
 800091e:	4626      	mov	r6, r4
 8000920:	1a1c      	subs	r4, r3, r0
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb4 f0f8 	udiv	r0, r4, r8
 800092a:	fb08 4410 	mls	r4, r8, r0, r4
 800092e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000932:	fb00 f707 	mul.w	r7, r0, r7
 8000936:	429f      	cmp	r7, r3
 8000938:	d908      	bls.n	800094c <__udivmoddi4+0x148>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000942:	d202      	bcs.n	800094a <__udivmoddi4+0x146>
 8000944:	429f      	cmp	r7, r3
 8000946:	f200 80b0 	bhi.w	8000aaa <__udivmoddi4+0x2a6>
 800094a:	4620      	mov	r0, r4
 800094c:	1bdb      	subs	r3, r3, r7
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	e7a5      	b.n	80008a0 <__udivmoddi4+0x9c>
 8000954:	f1c1 0620 	rsb	r6, r1, #32
 8000958:	408b      	lsls	r3, r1
 800095a:	fa22 f706 	lsr.w	r7, r2, r6
 800095e:	431f      	orrs	r7, r3
 8000960:	fa20 fc06 	lsr.w	ip, r0, r6
 8000964:	fa04 f301 	lsl.w	r3, r4, r1
 8000968:	ea43 030c 	orr.w	r3, r3, ip
 800096c:	40f4      	lsrs	r4, r6
 800096e:	fa00 f801 	lsl.w	r8, r0, r1
 8000972:	0c38      	lsrs	r0, r7, #16
 8000974:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000978:	fbb4 fef0 	udiv	lr, r4, r0
 800097c:	fa1f fc87 	uxth.w	ip, r7
 8000980:	fb00 441e 	mls	r4, r0, lr, r4
 8000984:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000988:	fb0e f90c 	mul.w	r9, lr, ip
 800098c:	45a1      	cmp	r9, r4
 800098e:	fa02 f201 	lsl.w	r2, r2, r1
 8000992:	d90a      	bls.n	80009aa <__udivmoddi4+0x1a6>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f10e 3aff 	add.w	sl, lr, #4294967295
 800099a:	f080 8084 	bcs.w	8000aa6 <__udivmoddi4+0x2a2>
 800099e:	45a1      	cmp	r9, r4
 80009a0:	f240 8081 	bls.w	8000aa6 <__udivmoddi4+0x2a2>
 80009a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	eba4 0409 	sub.w	r4, r4, r9
 80009ae:	fa1f f983 	uxth.w	r9, r3
 80009b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80009b6:	fb00 4413 	mls	r4, r0, r3, r4
 80009ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009be:	fb03 fc0c 	mul.w	ip, r3, ip
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d907      	bls.n	80009d6 <__udivmoddi4+0x1d2>
 80009c6:	193c      	adds	r4, r7, r4
 80009c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80009cc:	d267      	bcs.n	8000a9e <__udivmoddi4+0x29a>
 80009ce:	45a4      	cmp	ip, r4
 80009d0:	d965      	bls.n	8000a9e <__udivmoddi4+0x29a>
 80009d2:	3b02      	subs	r3, #2
 80009d4:	443c      	add	r4, r7
 80009d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009da:	fba0 9302 	umull	r9, r3, r0, r2
 80009de:	eba4 040c 	sub.w	r4, r4, ip
 80009e2:	429c      	cmp	r4, r3
 80009e4:	46ce      	mov	lr, r9
 80009e6:	469c      	mov	ip, r3
 80009e8:	d351      	bcc.n	8000a8e <__udivmoddi4+0x28a>
 80009ea:	d04e      	beq.n	8000a8a <__udivmoddi4+0x286>
 80009ec:	b155      	cbz	r5, 8000a04 <__udivmoddi4+0x200>
 80009ee:	ebb8 030e 	subs.w	r3, r8, lr
 80009f2:	eb64 040c 	sbc.w	r4, r4, ip
 80009f6:	fa04 f606 	lsl.w	r6, r4, r6
 80009fa:	40cb      	lsrs	r3, r1
 80009fc:	431e      	orrs	r6, r3
 80009fe:	40cc      	lsrs	r4, r1
 8000a00:	e9c5 6400 	strd	r6, r4, [r5]
 8000a04:	2100      	movs	r1, #0
 8000a06:	e750      	b.n	80008aa <__udivmoddi4+0xa6>
 8000a08:	f1c2 0320 	rsb	r3, r2, #32
 8000a0c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a14:	fa24 f303 	lsr.w	r3, r4, r3
 8000a18:	4094      	lsls	r4, r2
 8000a1a:	430c      	orrs	r4, r1
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a24:	fa1f f78c 	uxth.w	r7, ip
 8000a28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a2c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a30:	0c23      	lsrs	r3, r4, #16
 8000a32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a36:	fb00 f107 	mul.w	r1, r0, r7
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x24c>
 8000a3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a42:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a46:	d22c      	bcs.n	8000aa2 <__udivmoddi4+0x29e>
 8000a48:	4299      	cmp	r1, r3
 8000a4a:	d92a      	bls.n	8000aa2 <__udivmoddi4+0x29e>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a58:	fb08 3311 	mls	r3, r8, r1, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb01 f307 	mul.w	r3, r1, r7
 8000a64:	42a3      	cmp	r3, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x276>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a70:	d213      	bcs.n	8000a9a <__udivmoddi4+0x296>
 8000a72:	42a3      	cmp	r3, r4
 8000a74:	d911      	bls.n	8000a9a <__udivmoddi4+0x296>
 8000a76:	3902      	subs	r1, #2
 8000a78:	4464      	add	r4, ip
 8000a7a:	1ae4      	subs	r4, r4, r3
 8000a7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a80:	e739      	b.n	80008f6 <__udivmoddi4+0xf2>
 8000a82:	4604      	mov	r4, r0
 8000a84:	e6f0      	b.n	8000868 <__udivmoddi4+0x64>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e706      	b.n	8000898 <__udivmoddi4+0x94>
 8000a8a:	45c8      	cmp	r8, r9
 8000a8c:	d2ae      	bcs.n	80009ec <__udivmoddi4+0x1e8>
 8000a8e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a92:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a96:	3801      	subs	r0, #1
 8000a98:	e7a8      	b.n	80009ec <__udivmoddi4+0x1e8>
 8000a9a:	4631      	mov	r1, r6
 8000a9c:	e7ed      	b.n	8000a7a <__udivmoddi4+0x276>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	e799      	b.n	80009d6 <__udivmoddi4+0x1d2>
 8000aa2:	4630      	mov	r0, r6
 8000aa4:	e7d4      	b.n	8000a50 <__udivmoddi4+0x24c>
 8000aa6:	46d6      	mov	lr, sl
 8000aa8:	e77f      	b.n	80009aa <__udivmoddi4+0x1a6>
 8000aaa:	4463      	add	r3, ip
 8000aac:	3802      	subs	r0, #2
 8000aae:	e74d      	b.n	800094c <__udivmoddi4+0x148>
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	4623      	mov	r3, r4
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	e70f      	b.n	80008d8 <__udivmoddi4+0xd4>
 8000ab8:	3e02      	subs	r6, #2
 8000aba:	4463      	add	r3, ip
 8000abc:	e730      	b.n	8000920 <__udivmoddi4+0x11c>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	@ 0x38
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
 8000aec:	615a      	str	r2, [r3, #20]
 8000aee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000af0:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000af2:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000af6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000af8:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000afa:	4a2e      	ldr	r2, [pc, #184]	@ (8000bb4 <MX_FSMC_Init+0xf0>)
 8000afc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000afe:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000b04:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000b0a:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000b10:	4b27      	ldr	r3, [pc, #156]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b12:	2210      	movs	r2, #16
 8000b14:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000b16:	4b26      	ldr	r3, [pc, #152]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000b1c:	4b24      	ldr	r3, [pc, #144]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000b22:	4b23      	ldr	r3, [pc, #140]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000b28:	4b21      	ldr	r3, [pc, #132]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b34:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000b36:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000b50:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 16;
 8000b5e:	2310      	movs	r3, #16
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000b66:	2310      	movs	r3, #16
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000b6a:	2311      	movs	r3, #17
 8000b6c:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 4;
 8000b72:	2304      	movs	r3, #4
 8000b74:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000b76:	230f      	movs	r3, #15
 8000b78:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000b7a:	2309      	movs	r3, #9
 8000b7c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000b82:	2310      	movs	r3, #16
 8000b84:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000b86:	2311      	movs	r3, #17
 8000b88:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000b8e:	463a      	mov	r2, r7
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4806      	ldr	r0, [pc, #24]	@ (8000bb0 <MX_FSMC_Init+0xec>)
 8000b98:	f004 fdba 	bl	8005710 <HAL_SRAM_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000ba2:	f000 f9a5 	bl	8000ef0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3738      	adds	r7, #56	@ 0x38
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000002c 	.word	0x2000002c
 8000bb4:	a0000104 	.word	0xa0000104

08000bb8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <HAL_FSMC_MspInit+0x88>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d131      	bne.n	8000c38 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <HAL_FSMC_MspInit+0x88>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <HAL_FSMC_MspInit+0x8c>)
 8000be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000be2:	4a18      	ldr	r2, [pc, #96]	@ (8000c44 <HAL_FSMC_MspInit+0x8c>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bea:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <HAL_FSMC_MspInit+0x8c>)
 8000bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000bf6:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000bfa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000c08:	230c      	movs	r3, #12
 8000c0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <HAL_FSMC_MspInit+0x90>)
 8000c12:	f003 ff3f 	bl	8004a94 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8000c16:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 8000c1a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000c28:	230c      	movs	r3, #12
 8000c2a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4806      	ldr	r0, [pc, #24]	@ (8000c4c <HAL_FSMC_MspInit+0x94>)
 8000c32:	f003 ff2f 	bl	8004a94 <HAL_GPIO_Init>
 8000c36:	e000      	b.n	8000c3a <HAL_FSMC_MspInit+0x82>
    return;
 8000c38:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000007c 	.word	0x2000007c
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40020c00 	.word	0x40020c00

08000c50 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000c58:	f7ff ffae 	bl	8000bb8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	@ 0x30
 8000c68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
 8000c7e:	4b54      	ldr	r3, [pc, #336]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a53      	ldr	r2, [pc, #332]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000c84:	f043 0310 	orr.w	r3, r3, #16
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b51      	ldr	r3, [pc, #324]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0310 	and.w	r3, r3, #16
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	4b4d      	ldr	r3, [pc, #308]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a4c      	ldr	r2, [pc, #304]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b46      	ldr	r3, [pc, #280]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a45      	ldr	r2, [pc, #276]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b43      	ldr	r3, [pc, #268]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a3e      	ldr	r2, [pc, #248]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b3c      	ldr	r3, [pc, #240]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b38      	ldr	r3, [pc, #224]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a37      	ldr	r2, [pc, #220]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b35      	ldr	r3, [pc, #212]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b31      	ldr	r3, [pc, #196]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a30      	ldr	r2, [pc, #192]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <MX_GPIO_Init+0x16c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2160      	movs	r1, #96	@ 0x60
 8000d26:	482b      	ldr	r0, [pc, #172]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000d28:	f004 f850 	bl	8004dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2102      	movs	r1, #2
 8000d30:	4829      	ldr	r0, [pc, #164]	@ (8000dd8 <MX_GPIO_Init+0x174>)
 8000d32:	f004 f84b 	bl	8004dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000d36:	2360      	movs	r3, #96	@ 0x60
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4821      	ldr	r0, [pc, #132]	@ (8000dd4 <MX_GPIO_Init+0x170>)
 8000d4e:	f003 fea1 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Key1_Pin|Key2_Pin|Key3_Pin|Key4_Pin;
 8000d52:	230f      	movs	r3, #15
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d56:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	481d      	ldr	r0, [pc, #116]	@ (8000ddc <MX_GPIO_Init+0x178>)
 8000d68:	f003 fe94 	bl	8004a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d74:	2302      	movs	r3, #2
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	4815      	ldr	r0, [pc, #84]	@ (8000dd8 <MX_GPIO_Init+0x174>)
 8000d84:	f003 fe86 	bl	8004a94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 1);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	2006      	movs	r0, #6
 8000d8e:	f003 fe4a 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d92:	2006      	movs	r0, #6
 8000d94:	f003 fe63 	bl	8004a5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	2007      	movs	r0, #7
 8000d9e:	f003 fe42 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000da2:	2007      	movs	r0, #7
 8000da4:	f003 fe5b 	bl	8004a5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2101      	movs	r1, #1
 8000dac:	2008      	movs	r0, #8
 8000dae:	f003 fe3a 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000db2:	2008      	movs	r0, #8
 8000db4:	f003 fe53 	bl	8004a5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 2);
 8000db8:	2202      	movs	r2, #2
 8000dba:	2101      	movs	r1, #1
 8000dbc:	2009      	movs	r0, #9
 8000dbe:	f003 fe32 	bl	8004a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000dc2:	2009      	movs	r0, #9
 8000dc4:	f003 fe4b 	bl	8004a5e <HAL_NVIC_EnableIRQ>

}
 8000dc8:	bf00      	nop
 8000dca:	3730      	adds	r7, #48	@ 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40020400 	.word	0x40020400
 8000ddc:	40020800 	.word	0x40020800

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f003 fcad 	bl	8004744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dea:	f000 f817 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dee:	f7ff ff39 	bl	8000c64 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000df2:	f7ff fe67 	bl	8000ac4 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000df6:	f003 f94b 	bl	8004090 <lcd_init>
  lcd_show_string(10, 110, 240, 16, 16, "ATOM@ALIENTEK", RED);
 8000dfa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000dfe:	9302      	str	r3, [sp, #8]
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <main+0x38>)
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	2310      	movs	r3, #16
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2310      	movs	r3, #16
 8000e0a:	22f0      	movs	r2, #240	@ 0xf0
 8000e0c:	216e      	movs	r1, #110	@ 0x6e
 8000e0e:	200a      	movs	r0, #10
 8000e10:	f003 fc48 	bl	80046a4 <lcd_show_string>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <main+0x34>
 8000e18:	080059c0 	.word	0x080059c0

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b094      	sub	sp, #80	@ 0x50
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0320 	add.w	r3, r7, #32
 8000e26:	2230      	movs	r2, #48	@ 0x30
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f004 fd90 	bl	8005950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	4b28      	ldr	r3, [pc, #160]	@ (8000ee8 <SystemClock_Config+0xcc>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e48:	4a27      	ldr	r2, [pc, #156]	@ (8000ee8 <SystemClock_Config+0xcc>)
 8000e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e50:	4b25      	ldr	r3, [pc, #148]	@ (8000ee8 <SystemClock_Config+0xcc>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <SystemClock_Config+0xd0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a21      	ldr	r2, [pc, #132]	@ (8000eec <SystemClock_Config+0xd0>)
 8000e66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <SystemClock_Config+0xd0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e82:	2302      	movs	r3, #2
 8000e84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e90:	23a8      	movs	r3, #168	@ 0xa8
 8000e92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e94:	2302      	movs	r3, #2
 8000e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 ffd1 	bl	8004e48 <HAL_RCC_OscConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000eac:	f000 f820 	bl	8000ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ebc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ec0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2105      	movs	r1, #5
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f004 fa32 	bl	8005338 <HAL_RCC_ClockConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eda:	f000 f809 	bl	8000ef0 <Error_Handler>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3750      	adds	r7, #80	@ 0x50
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40007000 	.word	0x40007000

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <Error_Handler+0x8>

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f48 <HAL_MspInit+0x4c>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	4a08      	ldr	r2, [pc, #32]	@ (8000f48 <HAL_MspInit+0x4c>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000f3a:	2005      	movs	r0, #5
 8000f3c:	f003 fd68 	bl	8004a10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <NMI_Handler+0x4>

08000f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <MemManage_Handler+0x4>

08000f64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa2:	f003 fc21 	bl	80047e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key1_Pin);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f003 ff26 	bl	8004e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key2_Pin);
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f003 ff1f 	bl	8004e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key3_Pin);
 8000fca:	2004      	movs	r0, #4
 8000fcc:	f003 ff18 	bl	8004e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key4_Pin);
 8000fd8:	2008      	movs	r0, #8
 8000fda:	f003 ff11 	bl	8004e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800100c:	480d      	ldr	r0, [pc, #52]	@ (8001044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800100e:	490e      	ldr	r1, [pc, #56]	@ (8001048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001010:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0b      	ldr	r2, [pc, #44]	@ (8001050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001024:	4c0b      	ldr	r4, [pc, #44]	@ (8001054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001032:	f7ff ffd7 	bl	8000fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001036:	f004 fc93 	bl	8005960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff fed1 	bl	8000de0 <main>
  bx  lr    
 800103e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800104c:	08008970 	.word	0x08008970
  ldr r2, =_sbss
 8001050:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001054:	200000e4 	.word	0x200000e4

08001058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC_IRQHandler>

0800105a <lcd_ex_st7789_reginit>:
 * @brief       ST7789 寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_st7789_reginit(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 800105e:	2011      	movs	r0, #17
 8001060:	f002 fc38 	bl	80038d4 <lcd_wr_regno>

    HAL_Delay(120);
 8001064:	2078      	movs	r0, #120	@ 0x78
 8001066:	f003 fbdf 	bl	8004828 <HAL_Delay>

    lcd_wr_regno(0x36);
 800106a:	2036      	movs	r0, #54	@ 0x36
 800106c:	f002 fc32 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001070:	2000      	movs	r0, #0
 8001072:	f002 fc1b 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8001076:	203a      	movs	r0, #58	@ 0x3a
 8001078:	f002 fc2c 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x05);
 800107c:	2005      	movs	r0, #5
 800107e:	f002 fc15 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8001082:	20b2      	movs	r0, #178	@ 0xb2
 8001084:	f002 fc26 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8001088:	200c      	movs	r0, #12
 800108a:	f002 fc0f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0C);
 800108e:	200c      	movs	r0, #12
 8001090:	f002 fc0c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001094:	2000      	movs	r0, #0
 8001096:	f002 fc09 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x33);
 800109a:	2033      	movs	r0, #51	@ 0x33
 800109c:	f002 fc06 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x33);
 80010a0:	2033      	movs	r0, #51	@ 0x33
 80010a2:	f002 fc03 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB7);
 80010a6:	20b7      	movs	r0, #183	@ 0xb7
 80010a8:	f002 fc14 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x35);
 80010ac:	2035      	movs	r0, #53	@ 0x35
 80010ae:	f002 fbfd 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xBB); /* vcom */
 80010b2:	20bb      	movs	r0, #187	@ 0xbb
 80010b4:	f002 fc0e 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x32);  /* 30 */
 80010b8:	2032      	movs	r0, #50	@ 0x32
 80010ba:	f002 fbf7 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC0);
 80010be:	20c0      	movs	r0, #192	@ 0xc0
 80010c0:	f002 fc08 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 80010c4:	200c      	movs	r0, #12
 80010c6:	f002 fbf1 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC2);
 80010ca:	20c2      	movs	r0, #194	@ 0xc2
 80010cc:	f002 fc02 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x01);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f002 fbeb 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC3); /* vrh */
 80010d6:	20c3      	movs	r0, #195	@ 0xc3
 80010d8:	f002 fbfc 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x10);  /* 17 0D */
 80010dc:	2010      	movs	r0, #16
 80010de:	f002 fbe5 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC4); /* vdv */
 80010e2:	20c4      	movs	r0, #196	@ 0xc4
 80010e4:	f002 fbf6 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 20 */
 80010e8:	2020      	movs	r0, #32
 80010ea:	f002 fbdf 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC6);
 80010ee:	20c6      	movs	r0, #198	@ 0xc6
 80010f0:	f002 fbf0 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x0f);
 80010f4:	200f      	movs	r0, #15
 80010f6:	f002 fbd9 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xD0);
 80010fa:	20d0      	movs	r0, #208	@ 0xd0
 80010fc:	f002 fbea 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xA4); 
 8001100:	20a4      	movs	r0, #164	@ 0xa4
 8001102:	f002 fbd3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xA1); 
 8001106:	20a1      	movs	r0, #161	@ 0xa1
 8001108:	f002 fbd0 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Set Gamma  */
 800110c:	20e0      	movs	r0, #224	@ 0xe0
 800110e:	f002 fbe1 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8001112:	20d0      	movs	r0, #208	@ 0xd0
 8001114:	f002 fbca 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001118:	2000      	movs	r0, #0
 800111a:	f002 fbc7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x02);
 800111e:	2002      	movs	r0, #2
 8001120:	f002 fbc4 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x07);
 8001124:	2007      	movs	r0, #7
 8001126:	f002 fbc1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0a);
 800112a:	200a      	movs	r0, #10
 800112c:	f002 fbbe 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x28);
 8001130:	2028      	movs	r0, #40	@ 0x28
 8001132:	f002 fbbb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x32);
 8001136:	2032      	movs	r0, #50	@ 0x32
 8001138:	f002 fbb8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x44);
 800113c:	2044      	movs	r0, #68	@ 0x44
 800113e:	f002 fbb5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x42);
 8001142:	2042      	movs	r0, #66	@ 0x42
 8001144:	f002 fbb2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x06);
 8001148:	2006      	movs	r0, #6
 800114a:	f002 fbaf 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0e);
 800114e:	200e      	movs	r0, #14
 8001150:	f002 fbac 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x12);
 8001154:	2012      	movs	r0, #18
 8001156:	f002 fba9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x14);
 800115a:	2014      	movs	r0, #20
 800115c:	f002 fba6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x17);
 8001160:	2017      	movs	r0, #23
 8001162:	f002 fba3 	bl	80038ac <lcd_wr_data>


    lcd_wr_regno(0xE1);  /* Set Gamma */
 8001166:	20e1      	movs	r0, #225	@ 0xe1
 8001168:	f002 fbb4 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 800116c:	20d0      	movs	r0, #208	@ 0xd0
 800116e:	f002 fb9d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001172:	2000      	movs	r0, #0
 8001174:	f002 fb9a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x02);
 8001178:	2002      	movs	r0, #2
 800117a:	f002 fb97 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x07);
 800117e:	2007      	movs	r0, #7
 8001180:	f002 fb94 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0a);
 8001184:	200a      	movs	r0, #10
 8001186:	f002 fb91 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x28);
 800118a:	2028      	movs	r0, #40	@ 0x28
 800118c:	f002 fb8e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x31);
 8001190:	2031      	movs	r0, #49	@ 0x31
 8001192:	f002 fb8b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x54);
 8001196:	2054      	movs	r0, #84	@ 0x54
 8001198:	f002 fb88 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x47);
 800119c:	2047      	movs	r0, #71	@ 0x47
 800119e:	f002 fb85 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0e);
 80011a2:	200e      	movs	r0, #14
 80011a4:	f002 fb82 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x1c);
 80011a8:	201c      	movs	r0, #28
 80011aa:	f002 fb7f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x17);
 80011ae:	2017      	movs	r0, #23
 80011b0:	f002 fb7c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x1b); 
 80011b4:	201b      	movs	r0, #27
 80011b6:	f002 fb79 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x1e);
 80011ba:	201e      	movs	r0, #30
 80011bc:	f002 fb76 	bl	80038ac <lcd_wr_data>


    lcd_wr_regno(0x2A);
 80011c0:	202a      	movs	r0, #42	@ 0x2a
 80011c2:	f002 fb87 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f002 fb70 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f002 fb6d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f002 fb6a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xef);
 80011d8:	20ef      	movs	r0, #239	@ 0xef
 80011da:	f002 fb67 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0x2B);
 80011de:	202b      	movs	r0, #43	@ 0x2b
 80011e0:	f002 fb78 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f002 fb61 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f002 fb5e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f002 fb5b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x3f);
 80011f6:	203f      	movs	r0, #63	@ 0x3f
 80011f8:	f002 fb58 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0x29); /* display on */
 80011fc:	2029      	movs	r0, #41	@ 0x29
 80011fe:	f002 fb69 	bl	80038d4 <lcd_wr_regno>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}

08001206 <lcd_ex_ili9341_reginit>:
 * @brief       ILI9341寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_ili9341_reginit(void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xCF);
 800120a:	20cf      	movs	r0, #207	@ 0xcf
 800120c:	f002 fb62 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001210:	2000      	movs	r0, #0
 8001212:	f002 fb4b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xC1);
 8001216:	20c1      	movs	r0, #193	@ 0xc1
 8001218:	f002 fb48 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x30);
 800121c:	2030      	movs	r0, #48	@ 0x30
 800121e:	f002 fb45 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xED);
 8001222:	20ed      	movs	r0, #237	@ 0xed
 8001224:	f002 fb56 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x64);
 8001228:	2064      	movs	r0, #100	@ 0x64
 800122a:	f002 fb3f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x03);
 800122e:	2003      	movs	r0, #3
 8001230:	f002 fb3c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x12);
 8001234:	2012      	movs	r0, #18
 8001236:	f002 fb39 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x81);
 800123a:	2081      	movs	r0, #129	@ 0x81
 800123c:	f002 fb36 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xE8);
 8001240:	20e8      	movs	r0, #232	@ 0xe8
 8001242:	f002 fb47 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x85);
 8001246:	2085      	movs	r0, #133	@ 0x85
 8001248:	f002 fb30 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x10);
 800124c:	2010      	movs	r0, #16
 800124e:	f002 fb2d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x7A);
 8001252:	207a      	movs	r0, #122	@ 0x7a
 8001254:	f002 fb2a 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xCB);
 8001258:	20cb      	movs	r0, #203	@ 0xcb
 800125a:	f002 fb3b 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x39);
 800125e:	2039      	movs	r0, #57	@ 0x39
 8001260:	f002 fb24 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x2C);
 8001264:	202c      	movs	r0, #44	@ 0x2c
 8001266:	f002 fb21 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800126a:	2000      	movs	r0, #0
 800126c:	f002 fb1e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x34);
 8001270:	2034      	movs	r0, #52	@ 0x34
 8001272:	f002 fb1b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x02);
 8001276:	2002      	movs	r0, #2
 8001278:	f002 fb18 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xF7);
 800127c:	20f7      	movs	r0, #247	@ 0xf7
 800127e:	f002 fb29 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8001282:	2020      	movs	r0, #32
 8001284:	f002 fb12 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xEA);
 8001288:	20ea      	movs	r0, #234	@ 0xea
 800128a:	f002 fb23 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800128e:	2000      	movs	r0, #0
 8001290:	f002 fb0c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001294:	2000      	movs	r0, #0
 8001296:	f002 fb09 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xC0); /* Power control */
 800129a:	20c0      	movs	r0, #192	@ 0xc0
 800129c:	f002 fb1a 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x1B);  /* VRH[5:0] */
 80012a0:	201b      	movs	r0, #27
 80012a2:	f002 fb03 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xC1); /* Power control */
 80012a6:	20c1      	movs	r0, #193	@ 0xc1
 80012a8:	f002 fb14 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x01);  /* SAP[2:0];BT[3:0] */
 80012ac:	2001      	movs	r0, #1
 80012ae:	f002 fafd 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xC5); /* VCM control */
 80012b2:	20c5      	movs	r0, #197	@ 0xc5
 80012b4:	f002 fb0e 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x30);  /* 3F */
 80012b8:	2030      	movs	r0, #48	@ 0x30
 80012ba:	f002 faf7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x30);  /* 3C */
 80012be:	2030      	movs	r0, #48	@ 0x30
 80012c0:	f002 faf4 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xC7); /* VCM control2 */
 80012c4:	20c7      	movs	r0, #199	@ 0xc7
 80012c6:	f002 fb05 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xB7);
 80012ca:	20b7      	movs	r0, #183	@ 0xb7
 80012cc:	f002 faee 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0x36); /* Memory Access Control */
 80012d0:	2036      	movs	r0, #54	@ 0x36
 80012d2:	f002 faff 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x48);
 80012d6:	2048      	movs	r0, #72	@ 0x48
 80012d8:	f002 fae8 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0x3A);
 80012dc:	203a      	movs	r0, #58	@ 0x3a
 80012de:	f002 faf9 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x55);
 80012e2:	2055      	movs	r0, #85	@ 0x55
 80012e4:	f002 fae2 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xB1);
 80012e8:	20b1      	movs	r0, #177	@ 0xb1
 80012ea:	f002 faf3 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f002 fadc 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x1A);
 80012f4:	201a      	movs	r0, #26
 80012f6:	f002 fad9 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xB6); /* Display Function Control */
 80012fa:	20b6      	movs	r0, #182	@ 0xb6
 80012fc:	f002 faea 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8001300:	200a      	movs	r0, #10
 8001302:	f002 fad3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xA2);
 8001306:	20a2      	movs	r0, #162	@ 0xa2
 8001308:	f002 fad0 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xF2); /* 3Gamma Function Disable */
 800130c:	20f2      	movs	r0, #242	@ 0xf2
 800130e:	f002 fae1 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001312:	2000      	movs	r0, #0
 8001314:	f002 faca 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0x26); /* Gamma curve selected */
 8001318:	2026      	movs	r0, #38	@ 0x26
 800131a:	f002 fadb 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x01);
 800131e:	2001      	movs	r0, #1
 8001320:	f002 fac4 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xE0); /* Set Gamma */
 8001324:	20e0      	movs	r0, #224	@ 0xe0
 8001326:	f002 fad5 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 800132a:	200f      	movs	r0, #15
 800132c:	f002 fabe 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x2A);
 8001330:	202a      	movs	r0, #42	@ 0x2a
 8001332:	f002 fabb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x28);
 8001336:	2028      	movs	r0, #40	@ 0x28
 8001338:	f002 fab8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x08);
 800133c:	2008      	movs	r0, #8
 800133e:	f002 fab5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0E);
 8001342:	200e      	movs	r0, #14
 8001344:	f002 fab2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x08);
 8001348:	2008      	movs	r0, #8
 800134a:	f002 faaf 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x54);
 800134e:	2054      	movs	r0, #84	@ 0x54
 8001350:	f002 faac 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xA9);
 8001354:	20a9      	movs	r0, #169	@ 0xa9
 8001356:	f002 faa9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x43);
 800135a:	2043      	movs	r0, #67	@ 0x43
 800135c:	f002 faa6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0A);
 8001360:	200a      	movs	r0, #10
 8001362:	f002 faa3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0F);
 8001366:	200f      	movs	r0, #15
 8001368:	f002 faa0 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800136c:	2000      	movs	r0, #0
 800136e:	f002 fa9d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001372:	2000      	movs	r0, #0
 8001374:	f002 fa9a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001378:	2000      	movs	r0, #0
 800137a:	f002 fa97 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800137e:	2000      	movs	r0, #0
 8001380:	f002 fa94 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xE1); /* Set Gamma */
 8001384:	20e1      	movs	r0, #225	@ 0xe1
 8001386:	f002 faa5 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800138a:	2000      	movs	r0, #0
 800138c:	f002 fa8e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x15);
 8001390:	2015      	movs	r0, #21
 8001392:	f002 fa8b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x17);
 8001396:	2017      	movs	r0, #23
 8001398:	f002 fa88 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x07);
 800139c:	2007      	movs	r0, #7
 800139e:	f002 fa85 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x11);
 80013a2:	2011      	movs	r0, #17
 80013a4:	f002 fa82 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x06);
 80013a8:	2006      	movs	r0, #6
 80013aa:	f002 fa7f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x2B);
 80013ae:	202b      	movs	r0, #43	@ 0x2b
 80013b0:	f002 fa7c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x56);
 80013b4:	2056      	movs	r0, #86	@ 0x56
 80013b6:	f002 fa79 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x3C);
 80013ba:	203c      	movs	r0, #60	@ 0x3c
 80013bc:	f002 fa76 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x05);
 80013c0:	2005      	movs	r0, #5
 80013c2:	f002 fa73 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x10);
 80013c6:	2010      	movs	r0, #16
 80013c8:	f002 fa70 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0F);
 80013cc:	200f      	movs	r0, #15
 80013ce:	f002 fa6d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x3F);
 80013d2:	203f      	movs	r0, #63	@ 0x3f
 80013d4:	f002 fa6a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x3F);
 80013d8:	203f      	movs	r0, #63	@ 0x3f
 80013da:	f002 fa67 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0F);
 80013de:	200f      	movs	r0, #15
 80013e0:	f002 fa64 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0x2B);
 80013e4:	202b      	movs	r0, #43	@ 0x2b
 80013e6:	f002 fa75 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f002 fa5e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f002 fa5b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f002 fa58 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x3f);
 80013fc:	203f      	movs	r0, #63	@ 0x3f
 80013fe:	f002 fa55 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0x2A);
 8001402:	202a      	movs	r0, #42	@ 0x2a
 8001404:	f002 fa66 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001408:	2000      	movs	r0, #0
 800140a:	f002 fa4f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800140e:	2000      	movs	r0, #0
 8001410:	f002 fa4c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001414:	2000      	movs	r0, #0
 8001416:	f002 fa49 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xef);
 800141a:	20ef      	movs	r0, #239	@ 0xef
 800141c:	f002 fa46 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0x11); /* Exit Sleep */
 8001420:	2011      	movs	r0, #17
 8001422:	f002 fa57 	bl	80038d4 <lcd_wr_regno>
    HAL_Delay(120);
 8001426:	2078      	movs	r0, #120	@ 0x78
 8001428:	f003 f9fe 	bl	8004828 <HAL_Delay>
    lcd_wr_regno(0x29); /* display on */
 800142c:	2029      	movs	r0, #41	@ 0x29
 800142e:	f002 fa51 	bl	80038d4 <lcd_wr_regno>
 }
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}

08001436 <lcd_ex_nt35310_reginit>:
 * @brief       NT35310寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_nt35310_reginit(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xED);
 800143a:	20ed      	movs	r0, #237	@ 0xed
 800143c:	f002 fa4a 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001440:	2001      	movs	r0, #1
 8001442:	f002 fa33 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xFE);
 8001446:	20fe      	movs	r0, #254	@ 0xfe
 8001448:	f002 fa30 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xEE);
 800144c:	20ee      	movs	r0, #238	@ 0xee
 800144e:	f002 fa41 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xDE);
 8001452:	20de      	movs	r0, #222	@ 0xde
 8001454:	f002 fa2a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x21);
 8001458:	2021      	movs	r0, #33	@ 0x21
 800145a:	f002 fa27 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xF1);
 800145e:	20f1      	movs	r0, #241	@ 0xf1
 8001460:	f002 fa38 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001464:	2001      	movs	r0, #1
 8001466:	f002 fa21 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xDF);
 800146a:	20df      	movs	r0, #223	@ 0xdf
 800146c:	f002 fa32 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x10);
 8001470:	2010      	movs	r0, #16
 8001472:	f002 fa1b 	bl	80038ac <lcd_wr_data>

    /* VCOMvoltage */
    lcd_wr_regno(0xC4);
 8001476:	20c4      	movs	r0, #196	@ 0xc4
 8001478:	f002 fa2c 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x8F);  /* 5f */
 800147c:	208f      	movs	r0, #143	@ 0x8f
 800147e:	f002 fa15 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8001482:	20c6      	movs	r0, #198	@ 0xc6
 8001484:	f002 fa26 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001488:	2000      	movs	r0, #0
 800148a:	f002 fa0f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xE2);
 800148e:	20e2      	movs	r0, #226	@ 0xe2
 8001490:	f002 fa0c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xE2);
 8001494:	20e2      	movs	r0, #226	@ 0xe2
 8001496:	f002 fa09 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xE2);
 800149a:	20e2      	movs	r0, #226	@ 0xe2
 800149c:	f002 fa06 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xBF);
 80014a0:	20bf      	movs	r0, #191	@ 0xbf
 80014a2:	f002 fa17 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 80014a6:	20aa      	movs	r0, #170	@ 0xaa
 80014a8:	f002 fa00 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB0);
 80014ac:	20b0      	movs	r0, #176	@ 0xb0
 80014ae:	f002 fa11 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x0D);
 80014b2:	200d      	movs	r0, #13
 80014b4:	f002 f9fa 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f002 f9f7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0D);
 80014be:	200d      	movs	r0, #13
 80014c0:	f002 f9f4 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f002 f9f1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x11);
 80014ca:	2011      	movs	r0, #17
 80014cc:	f002 f9ee 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f002 f9eb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x19);
 80014d6:	2019      	movs	r0, #25
 80014d8:	f002 f9e8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80014dc:	2000      	movs	r0, #0
 80014de:	f002 f9e5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x21);
 80014e2:	2021      	movs	r0, #33	@ 0x21
 80014e4:	f002 f9e2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f002 f9df 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x2D);
 80014ee:	202d      	movs	r0, #45	@ 0x2d
 80014f0:	f002 f9dc 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f002 f9d9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x3D);
 80014fa:	203d      	movs	r0, #61	@ 0x3d
 80014fc:	f002 f9d6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001500:	2000      	movs	r0, #0
 8001502:	f002 f9d3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x5D);
 8001506:	205d      	movs	r0, #93	@ 0x5d
 8001508:	f002 f9d0 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800150c:	2000      	movs	r0, #0
 800150e:	f002 f9cd 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x5D);
 8001512:	205d      	movs	r0, #93	@ 0x5d
 8001514:	f002 f9ca 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001518:	2000      	movs	r0, #0
 800151a:	f002 f9c7 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB1);
 800151e:	20b1      	movs	r0, #177	@ 0xb1
 8001520:	f002 f9d8 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8001524:	2080      	movs	r0, #128	@ 0x80
 8001526:	f002 f9c1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800152a:	2000      	movs	r0, #0
 800152c:	f002 f9be 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x8B);
 8001530:	208b      	movs	r0, #139	@ 0x8b
 8001532:	f002 f9bb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001536:	2000      	movs	r0, #0
 8001538:	f002 f9b8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x96);
 800153c:	2096      	movs	r0, #150	@ 0x96
 800153e:	f002 f9b5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001542:	2000      	movs	r0, #0
 8001544:	f002 f9b2 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8001548:	20b2      	movs	r0, #178	@ 0xb2
 800154a:	f002 f9c3 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800154e:	2000      	movs	r0, #0
 8001550:	f002 f9ac 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001554:	2000      	movs	r0, #0
 8001556:	f002 f9a9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x02);
 800155a:	2002      	movs	r0, #2
 800155c:	f002 f9a6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001560:	2000      	movs	r0, #0
 8001562:	f002 f9a3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x03);
 8001566:	2003      	movs	r0, #3
 8001568:	f002 f9a0 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800156c:	2000      	movs	r0, #0
 800156e:	f002 f99d 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB3);
 8001572:	20b3      	movs	r0, #179	@ 0xb3
 8001574:	f002 f9ae 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001578:	2000      	movs	r0, #0
 800157a:	f002 f997 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800157e:	2000      	movs	r0, #0
 8001580:	f002 f994 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001584:	2000      	movs	r0, #0
 8001586:	f002 f991 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800158a:	2000      	movs	r0, #0
 800158c:	f002 f98e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001590:	2000      	movs	r0, #0
 8001592:	f002 f98b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001596:	2000      	movs	r0, #0
 8001598:	f002 f988 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800159c:	2000      	movs	r0, #0
 800159e:	f002 f985 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f002 f982 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f002 f97f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f002 f97c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015b4:	2000      	movs	r0, #0
 80015b6:	f002 f979 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f002 f976 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f002 f973 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f002 f970 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f002 f96d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f002 f96a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015d8:	2000      	movs	r0, #0
 80015da:	f002 f967 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015de:	2000      	movs	r0, #0
 80015e0:	f002 f964 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015e4:	2000      	movs	r0, #0
 80015e6:	f002 f961 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f002 f95e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f002 f95b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f002 f958 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f002 f955 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001602:	2000      	movs	r0, #0
 8001604:	f002 f952 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB4);
 8001608:	20b4      	movs	r0, #180	@ 0xb4
 800160a:	f002 f963 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x8B);
 800160e:	208b      	movs	r0, #139	@ 0x8b
 8001610:	f002 f94c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001614:	2000      	movs	r0, #0
 8001616:	f002 f949 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x96);
 800161a:	2096      	movs	r0, #150	@ 0x96
 800161c:	f002 f946 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001620:	2000      	movs	r0, #0
 8001622:	f002 f943 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xA1);
 8001626:	20a1      	movs	r0, #161	@ 0xa1
 8001628:	f002 f940 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800162c:	2000      	movs	r0, #0
 800162e:	f002 f93d 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB5);
 8001632:	20b5      	movs	r0, #181	@ 0xb5
 8001634:	f002 f94e 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x02);
 8001638:	2002      	movs	r0, #2
 800163a:	f002 f937 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800163e:	2000      	movs	r0, #0
 8001640:	f002 f934 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x03);
 8001644:	2003      	movs	r0, #3
 8001646:	f002 f931 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800164a:	2000      	movs	r0, #0
 800164c:	f002 f92e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x04);
 8001650:	2004      	movs	r0, #4
 8001652:	f002 f92b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001656:	2000      	movs	r0, #0
 8001658:	f002 f928 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB6);
 800165c:	20b6      	movs	r0, #182	@ 0xb6
 800165e:	f002 f939 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001662:	2000      	movs	r0, #0
 8001664:	f002 f922 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001668:	2000      	movs	r0, #0
 800166a:	f002 f91f 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB7);
 800166e:	20b7      	movs	r0, #183	@ 0xb7
 8001670:	f002 f930 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001674:	2000      	movs	r0, #0
 8001676:	f002 f919 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800167a:	2000      	movs	r0, #0
 800167c:	f002 f916 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x3F);
 8001680:	203f      	movs	r0, #63	@ 0x3f
 8001682:	f002 f913 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001686:	2000      	movs	r0, #0
 8001688:	f002 f910 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x5E);
 800168c:	205e      	movs	r0, #94	@ 0x5e
 800168e:	f002 f90d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001692:	2000      	movs	r0, #0
 8001694:	f002 f90a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x64);
 8001698:	2064      	movs	r0, #100	@ 0x64
 800169a:	f002 f907 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800169e:	2000      	movs	r0, #0
 80016a0:	f002 f904 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x8C);
 80016a4:	208c      	movs	r0, #140	@ 0x8c
 80016a6:	f002 f901 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f002 f8fe 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xAC);
 80016b0:	20ac      	movs	r0, #172	@ 0xac
 80016b2:	f002 f8fb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f002 f8f8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xDC);
 80016bc:	20dc      	movs	r0, #220	@ 0xdc
 80016be:	f002 f8f5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f002 f8f2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x70);
 80016c8:	2070      	movs	r0, #112	@ 0x70
 80016ca:	f002 f8ef 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f002 f8ec 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x90);
 80016d4:	2090      	movs	r0, #144	@ 0x90
 80016d6:	f002 f8e9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80016da:	2000      	movs	r0, #0
 80016dc:	f002 f8e6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xEB);
 80016e0:	20eb      	movs	r0, #235	@ 0xeb
 80016e2:	f002 f8e3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f002 f8e0 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xDC);
 80016ec:	20dc      	movs	r0, #220	@ 0xdc
 80016ee:	f002 f8dd 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f002 f8da 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB8);
 80016f8:	20b8      	movs	r0, #184	@ 0xb8
 80016fa:	f002 f8eb 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80016fe:	2000      	movs	r0, #0
 8001700:	f002 f8d4 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001704:	2000      	movs	r0, #0
 8001706:	f002 f8d1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800170a:	2000      	movs	r0, #0
 800170c:	f002 f8ce 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001710:	2000      	movs	r0, #0
 8001712:	f002 f8cb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001716:	2000      	movs	r0, #0
 8001718:	f002 f8c8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800171c:	2000      	movs	r0, #0
 800171e:	f002 f8c5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001722:	2000      	movs	r0, #0
 8001724:	f002 f8c2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001728:	2000      	movs	r0, #0
 800172a:	f002 f8bf 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xBA);
 800172e:	20ba      	movs	r0, #186	@ 0xba
 8001730:	f002 f8d0 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x24);
 8001734:	2024      	movs	r0, #36	@ 0x24
 8001736:	f002 f8b9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800173a:	2000      	movs	r0, #0
 800173c:	f002 f8b6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001740:	2000      	movs	r0, #0
 8001742:	f002 f8b3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001746:	2000      	movs	r0, #0
 8001748:	f002 f8b0 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC1);
 800174c:	20c1      	movs	r0, #193	@ 0xc1
 800174e:	f002 f8c1 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8001752:	2020      	movs	r0, #32
 8001754:	f002 f8aa 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001758:	2000      	movs	r0, #0
 800175a:	f002 f8a7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x54);
 800175e:	2054      	movs	r0, #84	@ 0x54
 8001760:	f002 f8a4 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001764:	2000      	movs	r0, #0
 8001766:	f002 f8a1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xFF);
 800176a:	20ff      	movs	r0, #255	@ 0xff
 800176c:	f002 f89e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001770:	2000      	movs	r0, #0
 8001772:	f002 f89b 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8001776:	20c2      	movs	r0, #194	@ 0xc2
 8001778:	f002 f8ac 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 800177c:	200a      	movs	r0, #10
 800177e:	f002 f895 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001782:	2000      	movs	r0, #0
 8001784:	f002 f892 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x04);
 8001788:	2004      	movs	r0, #4
 800178a:	f002 f88f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800178e:	2000      	movs	r0, #0
 8001790:	f002 f88c 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC3);
 8001794:	20c3      	movs	r0, #195	@ 0xc3
 8001796:	f002 f89d 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 800179a:	203c      	movs	r0, #60	@ 0x3c
 800179c:	f002 f886 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f002 f883 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x3A);
 80017a6:	203a      	movs	r0, #58	@ 0x3a
 80017a8:	f002 f880 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f002 f87d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x39);
 80017b2:	2039      	movs	r0, #57	@ 0x39
 80017b4:	f002 f87a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80017b8:	2000      	movs	r0, #0
 80017ba:	f002 f877 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x37);
 80017be:	2037      	movs	r0, #55	@ 0x37
 80017c0:	f002 f874 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80017c4:	2000      	movs	r0, #0
 80017c6:	f002 f871 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x3C);
 80017ca:	203c      	movs	r0, #60	@ 0x3c
 80017cc:	f002 f86e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f002 f86b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x36);
 80017d6:	2036      	movs	r0, #54	@ 0x36
 80017d8:	f002 f868 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80017dc:	2000      	movs	r0, #0
 80017de:	f002 f865 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x32);
 80017e2:	2032      	movs	r0, #50	@ 0x32
 80017e4:	f002 f862 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f002 f85f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x2F);
 80017ee:	202f      	movs	r0, #47	@ 0x2f
 80017f0:	f002 f85c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f002 f859 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x2C);
 80017fa:	202c      	movs	r0, #44	@ 0x2c
 80017fc:	f002 f856 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001800:	2000      	movs	r0, #0
 8001802:	f002 f853 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x29);
 8001806:	2029      	movs	r0, #41	@ 0x29
 8001808:	f002 f850 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800180c:	2000      	movs	r0, #0
 800180e:	f002 f84d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x26);
 8001812:	2026      	movs	r0, #38	@ 0x26
 8001814:	f002 f84a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001818:	2000      	movs	r0, #0
 800181a:	f002 f847 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x24);
 800181e:	2024      	movs	r0, #36	@ 0x24
 8001820:	f002 f844 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001824:	2000      	movs	r0, #0
 8001826:	f002 f841 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x24);
 800182a:	2024      	movs	r0, #36	@ 0x24
 800182c:	f002 f83e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001830:	2000      	movs	r0, #0
 8001832:	f002 f83b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x23);
 8001836:	2023      	movs	r0, #35	@ 0x23
 8001838:	f002 f838 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800183c:	2000      	movs	r0, #0
 800183e:	f002 f835 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x3C);
 8001842:	203c      	movs	r0, #60	@ 0x3c
 8001844:	f002 f832 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001848:	2000      	movs	r0, #0
 800184a:	f002 f82f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x36);
 800184e:	2036      	movs	r0, #54	@ 0x36
 8001850:	f002 f82c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001854:	2000      	movs	r0, #0
 8001856:	f002 f829 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x32);
 800185a:	2032      	movs	r0, #50	@ 0x32
 800185c:	f002 f826 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001860:	2000      	movs	r0, #0
 8001862:	f002 f823 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x2F);
 8001866:	202f      	movs	r0, #47	@ 0x2f
 8001868:	f002 f820 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800186c:	2000      	movs	r0, #0
 800186e:	f002 f81d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x2C);
 8001872:	202c      	movs	r0, #44	@ 0x2c
 8001874:	f002 f81a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001878:	2000      	movs	r0, #0
 800187a:	f002 f817 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x29);
 800187e:	2029      	movs	r0, #41	@ 0x29
 8001880:	f002 f814 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001884:	2000      	movs	r0, #0
 8001886:	f002 f811 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x26);
 800188a:	2026      	movs	r0, #38	@ 0x26
 800188c:	f002 f80e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001890:	2000      	movs	r0, #0
 8001892:	f002 f80b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x24);
 8001896:	2024      	movs	r0, #36	@ 0x24
 8001898:	f002 f808 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800189c:	2000      	movs	r0, #0
 800189e:	f002 f805 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x24);
 80018a2:	2024      	movs	r0, #36	@ 0x24
 80018a4:	f002 f802 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f001 ffff 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x23);
 80018ae:	2023      	movs	r0, #35	@ 0x23
 80018b0:	f001 fffc 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80018b4:	2000      	movs	r0, #0
 80018b6:	f001 fff9 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC4);
 80018ba:	20c4      	movs	r0, #196	@ 0xc4
 80018bc:	f002 f80a 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x62);
 80018c0:	2062      	movs	r0, #98	@ 0x62
 80018c2:	f001 fff3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f001 fff0 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x05);
 80018cc:	2005      	movs	r0, #5
 80018ce:	f001 ffed 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f001 ffea 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x84);
 80018d8:	2084      	movs	r0, #132	@ 0x84
 80018da:	f001 ffe7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80018de:	2000      	movs	r0, #0
 80018e0:	f001 ffe4 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xF0);
 80018e4:	20f0      	movs	r0, #240	@ 0xf0
 80018e6:	f001 ffe1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f001 ffde 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x18);
 80018f0:	2018      	movs	r0, #24
 80018f2:	f001 ffdb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f001 ffd8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xA4);
 80018fc:	20a4      	movs	r0, #164	@ 0xa4
 80018fe:	f001 ffd5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001902:	2000      	movs	r0, #0
 8001904:	f001 ffd2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x18);
 8001908:	2018      	movs	r0, #24
 800190a:	f001 ffcf 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800190e:	2000      	movs	r0, #0
 8001910:	f001 ffcc 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x50);
 8001914:	2050      	movs	r0, #80	@ 0x50
 8001916:	f001 ffc9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800191a:	2000      	movs	r0, #0
 800191c:	f001 ffc6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0C);
 8001920:	200c      	movs	r0, #12
 8001922:	f001 ffc3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001926:	2000      	movs	r0, #0
 8001928:	f001 ffc0 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x17);
 800192c:	2017      	movs	r0, #23
 800192e:	f001 ffbd 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001932:	2000      	movs	r0, #0
 8001934:	f001 ffba 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x95);
 8001938:	2095      	movs	r0, #149	@ 0x95
 800193a:	f001 ffb7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800193e:	2000      	movs	r0, #0
 8001940:	f001 ffb4 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001944:	20f3      	movs	r0, #243	@ 0xf3
 8001946:	f001 ffb1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800194a:	2000      	movs	r0, #0
 800194c:	f001 ffae 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xE6);
 8001950:	20e6      	movs	r0, #230	@ 0xe6
 8001952:	f001 ffab 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001956:	2000      	movs	r0, #0
 8001958:	f001 ffa8 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC5);
 800195c:	20c5      	movs	r0, #197	@ 0xc5
 800195e:	f001 ffb9 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x32);
 8001962:	2032      	movs	r0, #50	@ 0x32
 8001964:	f001 ffa2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001968:	2000      	movs	r0, #0
 800196a:	f001 ff9f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x44);
 800196e:	2044      	movs	r0, #68	@ 0x44
 8001970:	f001 ff9c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001974:	2000      	movs	r0, #0
 8001976:	f001 ff99 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x65);
 800197a:	2065      	movs	r0, #101	@ 0x65
 800197c:	f001 ff96 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001980:	2000      	movs	r0, #0
 8001982:	f001 ff93 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x76);
 8001986:	2076      	movs	r0, #118	@ 0x76
 8001988:	f001 ff90 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800198c:	2000      	movs	r0, #0
 800198e:	f001 ff8d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x88);
 8001992:	2088      	movs	r0, #136	@ 0x88
 8001994:	f001 ff8a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001998:	2000      	movs	r0, #0
 800199a:	f001 ff87 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC6);
 800199e:	20c6      	movs	r0, #198	@ 0xc6
 80019a0:	f001 ff98 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x20);
 80019a4:	2020      	movs	r0, #32
 80019a6:	f001 ff81 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f001 ff7e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x17);
 80019b0:	2017      	movs	r0, #23
 80019b2:	f001 ff7b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f001 ff78 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);
 80019bc:	2001      	movs	r0, #1
 80019be:	f001 ff75 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f001 ff72 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC7);
 80019c8:	20c7      	movs	r0, #199	@ 0xc7
 80019ca:	f001 ff83 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f001 ff6c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80019d4:	2000      	movs	r0, #0
 80019d6:	f001 ff69 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80019da:	2000      	movs	r0, #0
 80019dc:	f001 ff66 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80019e0:	2000      	movs	r0, #0
 80019e2:	f001 ff63 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC8);
 80019e6:	20c8      	movs	r0, #200	@ 0xc8
 80019e8:	f001 ff74 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f001 ff5d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80019f2:	2000      	movs	r0, #0
 80019f4:	f001 ff5a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80019f8:	2000      	movs	r0, #0
 80019fa:	f001 ff57 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f001 ff54 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC9);
 8001a04:	20c9      	movs	r0, #201	@ 0xc9
 8001a06:	f001 ff65 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f001 ff4e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f001 ff4b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f001 ff48 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f001 ff45 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f001 ff42 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f001 ff3f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f001 ff3c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f001 ff39 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f001 ff36 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f001 ff33 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f001 ff30 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f001 ff2d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f001 ff2a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f001 ff27 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f001 ff24 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f001 ff21 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xE0);
 8001a6a:	20e0      	movs	r0, #224	@ 0xe0
 8001a6c:	f001 ff32 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x16);
 8001a70:	2016      	movs	r0, #22
 8001a72:	f001 ff1b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a76:	2000      	movs	r0, #0
 8001a78:	f001 ff18 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x1C);
 8001a7c:	201c      	movs	r0, #28
 8001a7e:	f001 ff15 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f001 ff12 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x21);
 8001a88:	2021      	movs	r0, #33	@ 0x21
 8001a8a:	f001 ff0f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f001 ff0c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x36);
 8001a94:	2036      	movs	r0, #54	@ 0x36
 8001a96:	f001 ff09 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f001 ff06 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x46);
 8001aa0:	2046      	movs	r0, #70	@ 0x46
 8001aa2:	f001 ff03 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f001 ff00 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x52);
 8001aac:	2052      	movs	r0, #82	@ 0x52
 8001aae:	f001 fefd 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f001 fefa 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x64);
 8001ab8:	2064      	movs	r0, #100	@ 0x64
 8001aba:	f001 fef7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f001 fef4 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x7A);
 8001ac4:	207a      	movs	r0, #122	@ 0x7a
 8001ac6:	f001 fef1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f001 feee 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x8B);
 8001ad0:	208b      	movs	r0, #139	@ 0x8b
 8001ad2:	f001 feeb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f001 fee8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x99);
 8001adc:	2099      	movs	r0, #153	@ 0x99
 8001ade:	f001 fee5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f001 fee2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xA8);
 8001ae8:	20a8      	movs	r0, #168	@ 0xa8
 8001aea:	f001 fedf 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f001 fedc 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xB9);
 8001af4:	20b9      	movs	r0, #185	@ 0xb9
 8001af6:	f001 fed9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f001 fed6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xC4);
 8001b00:	20c4      	movs	r0, #196	@ 0xc4
 8001b02:	f001 fed3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f001 fed0 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xCA);
 8001b0c:	20ca      	movs	r0, #202	@ 0xca
 8001b0e:	f001 fecd 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b12:	2000      	movs	r0, #0
 8001b14:	f001 feca 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xD2);
 8001b18:	20d2      	movs	r0, #210	@ 0xd2
 8001b1a:	f001 fec7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f001 fec4 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xD9);
 8001b24:	20d9      	movs	r0, #217	@ 0xd9
 8001b26:	f001 fec1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f001 febe 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xE0);
 8001b30:	20e0      	movs	r0, #224	@ 0xe0
 8001b32:	f001 febb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b36:	2000      	movs	r0, #0
 8001b38:	f001 feb8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001b3c:	20f3      	movs	r0, #243	@ 0xf3
 8001b3e:	f001 feb5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f001 feb2 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xE1);
 8001b48:	20e1      	movs	r0, #225	@ 0xe1
 8001b4a:	f001 fec3 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x16);
 8001b4e:	2016      	movs	r0, #22
 8001b50:	f001 feac 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b54:	2000      	movs	r0, #0
 8001b56:	f001 fea9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x1C);
 8001b5a:	201c      	movs	r0, #28
 8001b5c:	f001 fea6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f001 fea3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x22);
 8001b66:	2022      	movs	r0, #34	@ 0x22
 8001b68:	f001 fea0 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f001 fe9d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x36);
 8001b72:	2036      	movs	r0, #54	@ 0x36
 8001b74:	f001 fe9a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f001 fe97 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x45);
 8001b7e:	2045      	movs	r0, #69	@ 0x45
 8001b80:	f001 fe94 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f001 fe91 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x52);
 8001b8a:	2052      	movs	r0, #82	@ 0x52
 8001b8c:	f001 fe8e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b90:	2000      	movs	r0, #0
 8001b92:	f001 fe8b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x64);
 8001b96:	2064      	movs	r0, #100	@ 0x64
 8001b98:	f001 fe88 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f001 fe85 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x7A);
 8001ba2:	207a      	movs	r0, #122	@ 0x7a
 8001ba4:	f001 fe82 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f001 fe7f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x8B);
 8001bae:	208b      	movs	r0, #139	@ 0x8b
 8001bb0:	f001 fe7c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f001 fe79 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x99);
 8001bba:	2099      	movs	r0, #153	@ 0x99
 8001bbc:	f001 fe76 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f001 fe73 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xA8);
 8001bc6:	20a8      	movs	r0, #168	@ 0xa8
 8001bc8:	f001 fe70 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f001 fe6d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xB9);
 8001bd2:	20b9      	movs	r0, #185	@ 0xb9
 8001bd4:	f001 fe6a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f001 fe67 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xC4);
 8001bde:	20c4      	movs	r0, #196	@ 0xc4
 8001be0:	f001 fe64 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001be4:	2000      	movs	r0, #0
 8001be6:	f001 fe61 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xCA);
 8001bea:	20ca      	movs	r0, #202	@ 0xca
 8001bec:	f001 fe5e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f001 fe5b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xD2);
 8001bf6:	20d2      	movs	r0, #210	@ 0xd2
 8001bf8:	f001 fe58 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f001 fe55 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xD8);
 8001c02:	20d8      	movs	r0, #216	@ 0xd8
 8001c04:	f001 fe52 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f001 fe4f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xE0);
 8001c0e:	20e0      	movs	r0, #224	@ 0xe0
 8001c10:	f001 fe4c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f001 fe49 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001c1a:	20f3      	movs	r0, #243	@ 0xf3
 8001c1c:	f001 fe46 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f001 fe43 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xE2);
 8001c26:	20e2      	movs	r0, #226	@ 0xe2
 8001c28:	f001 fe54 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x05);
 8001c2c:	2005      	movs	r0, #5
 8001c2e:	f001 fe3d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f001 fe3a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0B);
 8001c38:	200b      	movs	r0, #11
 8001c3a:	f001 fe37 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f001 fe34 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x1B);
 8001c44:	201b      	movs	r0, #27
 8001c46:	f001 fe31 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f001 fe2e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x34);
 8001c50:	2034      	movs	r0, #52	@ 0x34
 8001c52:	f001 fe2b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c56:	2000      	movs	r0, #0
 8001c58:	f001 fe28 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x44);
 8001c5c:	2044      	movs	r0, #68	@ 0x44
 8001c5e:	f001 fe25 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c62:	2000      	movs	r0, #0
 8001c64:	f001 fe22 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x4F);
 8001c68:	204f      	movs	r0, #79	@ 0x4f
 8001c6a:	f001 fe1f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f001 fe1c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x61);
 8001c74:	2061      	movs	r0, #97	@ 0x61
 8001c76:	f001 fe19 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f001 fe16 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x79);
 8001c80:	2079      	movs	r0, #121	@ 0x79
 8001c82:	f001 fe13 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f001 fe10 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x88);
 8001c8c:	2088      	movs	r0, #136	@ 0x88
 8001c8e:	f001 fe0d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f001 fe0a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x97);
 8001c98:	2097      	movs	r0, #151	@ 0x97
 8001c9a:	f001 fe07 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f001 fe04 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xA6);
 8001ca4:	20a6      	movs	r0, #166	@ 0xa6
 8001ca6:	f001 fe01 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f001 fdfe 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xB7);
 8001cb0:	20b7      	movs	r0, #183	@ 0xb7
 8001cb2:	f001 fdfb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f001 fdf8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xC2);
 8001cbc:	20c2      	movs	r0, #194	@ 0xc2
 8001cbe:	f001 fdf5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f001 fdf2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xC7);
 8001cc8:	20c7      	movs	r0, #199	@ 0xc7
 8001cca:	f001 fdef 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f001 fdec 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xD1);
 8001cd4:	20d1      	movs	r0, #209	@ 0xd1
 8001cd6:	f001 fde9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f001 fde6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xD6);
 8001ce0:	20d6      	movs	r0, #214	@ 0xd6
 8001ce2:	f001 fde3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f001 fde0 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xDD);
 8001cec:	20dd      	movs	r0, #221	@ 0xdd
 8001cee:	f001 fddd 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f001 fdda 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001cf8:	20f3      	movs	r0, #243	@ 0xf3
 8001cfa:	f001 fdd7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f001 fdd4 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xE3);
 8001d04:	20e3      	movs	r0, #227	@ 0xe3
 8001d06:	f001 fde5 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x05);
 8001d0a:	2005      	movs	r0, #5
 8001d0c:	f001 fdce 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d10:	2000      	movs	r0, #0
 8001d12:	f001 fdcb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xA);
 8001d16:	200a      	movs	r0, #10
 8001d18:	f001 fdc8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f001 fdc5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x1C);
 8001d22:	201c      	movs	r0, #28
 8001d24:	f001 fdc2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f001 fdbf 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x33);
 8001d2e:	2033      	movs	r0, #51	@ 0x33
 8001d30:	f001 fdbc 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f001 fdb9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x44);
 8001d3a:	2044      	movs	r0, #68	@ 0x44
 8001d3c:	f001 fdb6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d40:	2000      	movs	r0, #0
 8001d42:	f001 fdb3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x50);
 8001d46:	2050      	movs	r0, #80	@ 0x50
 8001d48:	f001 fdb0 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f001 fdad 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x62);
 8001d52:	2062      	movs	r0, #98	@ 0x62
 8001d54:	f001 fdaa 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f001 fda7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x78);
 8001d5e:	2078      	movs	r0, #120	@ 0x78
 8001d60:	f001 fda4 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f001 fda1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x88);
 8001d6a:	2088      	movs	r0, #136	@ 0x88
 8001d6c:	f001 fd9e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d70:	2000      	movs	r0, #0
 8001d72:	f001 fd9b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x97);
 8001d76:	2097      	movs	r0, #151	@ 0x97
 8001d78:	f001 fd98 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f001 fd95 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xA6);
 8001d82:	20a6      	movs	r0, #166	@ 0xa6
 8001d84:	f001 fd92 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f001 fd8f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xB7);
 8001d8e:	20b7      	movs	r0, #183	@ 0xb7
 8001d90:	f001 fd8c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f001 fd89 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xC2);
 8001d9a:	20c2      	movs	r0, #194	@ 0xc2
 8001d9c:	f001 fd86 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001da0:	2000      	movs	r0, #0
 8001da2:	f001 fd83 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xC7);
 8001da6:	20c7      	movs	r0, #199	@ 0xc7
 8001da8:	f001 fd80 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dac:	2000      	movs	r0, #0
 8001dae:	f001 fd7d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xD1);
 8001db2:	20d1      	movs	r0, #209	@ 0xd1
 8001db4:	f001 fd7a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001db8:	2000      	movs	r0, #0
 8001dba:	f001 fd77 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xD5);
 8001dbe:	20d5      	movs	r0, #213	@ 0xd5
 8001dc0:	f001 fd74 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f001 fd71 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xDD);
 8001dca:	20dd      	movs	r0, #221	@ 0xdd
 8001dcc:	f001 fd6e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f001 fd6b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001dd6:	20f3      	movs	r0, #243	@ 0xf3
 8001dd8:	f001 fd68 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f001 fd65 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xE4);
 8001de2:	20e4      	movs	r0, #228	@ 0xe4
 8001de4:	f001 fd76 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f001 fd5f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f001 fd5c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);
 8001df4:	2001      	movs	r0, #1
 8001df6:	f001 fd59 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f001 fd56 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x02);
 8001e00:	2002      	movs	r0, #2
 8001e02:	f001 fd53 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f001 fd50 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x2A);
 8001e0c:	202a      	movs	r0, #42	@ 0x2a
 8001e0e:	f001 fd4d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f001 fd4a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x3C);
 8001e18:	203c      	movs	r0, #60	@ 0x3c
 8001e1a:	f001 fd47 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f001 fd44 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x4B);
 8001e24:	204b      	movs	r0, #75	@ 0x4b
 8001e26:	f001 fd41 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f001 fd3e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x5D);
 8001e30:	205d      	movs	r0, #93	@ 0x5d
 8001e32:	f001 fd3b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e36:	2000      	movs	r0, #0
 8001e38:	f001 fd38 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x74);
 8001e3c:	2074      	movs	r0, #116	@ 0x74
 8001e3e:	f001 fd35 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f001 fd32 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x84);
 8001e48:	2084      	movs	r0, #132	@ 0x84
 8001e4a:	f001 fd2f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f001 fd2c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x93);
 8001e54:	2093      	movs	r0, #147	@ 0x93
 8001e56:	f001 fd29 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f001 fd26 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xA2);
 8001e60:	20a2      	movs	r0, #162	@ 0xa2
 8001e62:	f001 fd23 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f001 fd20 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xB3);
 8001e6c:	20b3      	movs	r0, #179	@ 0xb3
 8001e6e:	f001 fd1d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e72:	2000      	movs	r0, #0
 8001e74:	f001 fd1a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xBE);
 8001e78:	20be      	movs	r0, #190	@ 0xbe
 8001e7a:	f001 fd17 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f001 fd14 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xC4);
 8001e84:	20c4      	movs	r0, #196	@ 0xc4
 8001e86:	f001 fd11 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f001 fd0e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xCD);
 8001e90:	20cd      	movs	r0, #205	@ 0xcd
 8001e92:	f001 fd0b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f001 fd08 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xD3);
 8001e9c:	20d3      	movs	r0, #211	@ 0xd3
 8001e9e:	f001 fd05 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f001 fd02 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xDD);
 8001ea8:	20dd      	movs	r0, #221	@ 0xdd
 8001eaa:	f001 fcff 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f001 fcfc 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001eb4:	20f3      	movs	r0, #243	@ 0xf3
 8001eb6:	f001 fcf9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f001 fcf6 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xE5);
 8001ec0:	20e5      	movs	r0, #229	@ 0xe5
 8001ec2:	f001 fd07 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f001 fcf0 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f001 fced 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f001 fcea 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f001 fce7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x02);
 8001ede:	2002      	movs	r0, #2
 8001ee0:	f001 fce4 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f001 fce1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x29);
 8001eea:	2029      	movs	r0, #41	@ 0x29
 8001eec:	f001 fcde 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f001 fcdb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x3C);
 8001ef6:	203c      	movs	r0, #60	@ 0x3c
 8001ef8:	f001 fcd8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f001 fcd5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x4B);
 8001f02:	204b      	movs	r0, #75	@ 0x4b
 8001f04:	f001 fcd2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f001 fccf 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x5D);
 8001f0e:	205d      	movs	r0, #93	@ 0x5d
 8001f10:	f001 fccc 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f001 fcc9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x74);
 8001f1a:	2074      	movs	r0, #116	@ 0x74
 8001f1c:	f001 fcc6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f20:	2000      	movs	r0, #0
 8001f22:	f001 fcc3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x84);
 8001f26:	2084      	movs	r0, #132	@ 0x84
 8001f28:	f001 fcc0 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f001 fcbd 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x93);
 8001f32:	2093      	movs	r0, #147	@ 0x93
 8001f34:	f001 fcba 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f001 fcb7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xA2);
 8001f3e:	20a2      	movs	r0, #162	@ 0xa2
 8001f40:	f001 fcb4 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f001 fcb1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xB3);
 8001f4a:	20b3      	movs	r0, #179	@ 0xb3
 8001f4c:	f001 fcae 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f50:	2000      	movs	r0, #0
 8001f52:	f001 fcab 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xBE);
 8001f56:	20be      	movs	r0, #190	@ 0xbe
 8001f58:	f001 fca8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f001 fca5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xC4);
 8001f62:	20c4      	movs	r0, #196	@ 0xc4
 8001f64:	f001 fca2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f001 fc9f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xCD);
 8001f6e:	20cd      	movs	r0, #205	@ 0xcd
 8001f70:	f001 fc9c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f74:	2000      	movs	r0, #0
 8001f76:	f001 fc99 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xD3);
 8001f7a:	20d3      	movs	r0, #211	@ 0xd3
 8001f7c:	f001 fc96 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f001 fc93 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xDC);
 8001f86:	20dc      	movs	r0, #220	@ 0xdc
 8001f88:	f001 fc90 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f001 fc8d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001f92:	20f3      	movs	r0, #243	@ 0xf3
 8001f94:	f001 fc8a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f001 fc87 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xE6);
 8001f9e:	20e6      	movs	r0, #230	@ 0xe6
 8001fa0:	f001 fc98 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x11);
 8001fa4:	2011      	movs	r0, #17
 8001fa6:	f001 fc81 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f001 fc7e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x34);
 8001fb0:	2034      	movs	r0, #52	@ 0x34
 8001fb2:	f001 fc7b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f001 fc78 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x56);
 8001fbc:	2056      	movs	r0, #86	@ 0x56
 8001fbe:	f001 fc75 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f001 fc72 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x76);
 8001fc8:	2076      	movs	r0, #118	@ 0x76
 8001fca:	f001 fc6f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f001 fc6c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x77);
 8001fd4:	2077      	movs	r0, #119	@ 0x77
 8001fd6:	f001 fc69 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f001 fc66 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x66);
 8001fe0:	2066      	movs	r0, #102	@ 0x66
 8001fe2:	f001 fc63 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f001 fc60 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x88);
 8001fec:	2088      	movs	r0, #136	@ 0x88
 8001fee:	f001 fc5d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f001 fc5a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x99);
 8001ff8:	2099      	movs	r0, #153	@ 0x99
 8001ffa:	f001 fc57 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f001 fc54 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xBB);
 8002004:	20bb      	movs	r0, #187	@ 0xbb
 8002006:	f001 fc51 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800200a:	2000      	movs	r0, #0
 800200c:	f001 fc4e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x99);
 8002010:	2099      	movs	r0, #153	@ 0x99
 8002012:	f001 fc4b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002016:	2000      	movs	r0, #0
 8002018:	f001 fc48 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x66);
 800201c:	2066      	movs	r0, #102	@ 0x66
 800201e:	f001 fc45 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002022:	2000      	movs	r0, #0
 8002024:	f001 fc42 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x55);
 8002028:	2055      	movs	r0, #85	@ 0x55
 800202a:	f001 fc3f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800202e:	2000      	movs	r0, #0
 8002030:	f001 fc3c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x55);
 8002034:	2055      	movs	r0, #85	@ 0x55
 8002036:	f001 fc39 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800203a:	2000      	movs	r0, #0
 800203c:	f001 fc36 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x45);
 8002040:	2045      	movs	r0, #69	@ 0x45
 8002042:	f001 fc33 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002046:	2000      	movs	r0, #0
 8002048:	f001 fc30 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x43);
 800204c:	2043      	movs	r0, #67	@ 0x43
 800204e:	f001 fc2d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002052:	2000      	movs	r0, #0
 8002054:	f001 fc2a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x44);
 8002058:	2044      	movs	r0, #68	@ 0x44
 800205a:	f001 fc27 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800205e:	2000      	movs	r0, #0
 8002060:	f001 fc24 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xE7);
 8002064:	20e7      	movs	r0, #231	@ 0xe7
 8002066:	f001 fc35 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x32);
 800206a:	2032      	movs	r0, #50	@ 0x32
 800206c:	f001 fc1e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002070:	2000      	movs	r0, #0
 8002072:	f001 fc1b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x55);
 8002076:	2055      	movs	r0, #85	@ 0x55
 8002078:	f001 fc18 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800207c:	2000      	movs	r0, #0
 800207e:	f001 fc15 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x76);
 8002082:	2076      	movs	r0, #118	@ 0x76
 8002084:	f001 fc12 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002088:	2000      	movs	r0, #0
 800208a:	f001 fc0f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x66);
 800208e:	2066      	movs	r0, #102	@ 0x66
 8002090:	f001 fc0c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002094:	2000      	movs	r0, #0
 8002096:	f001 fc09 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x67);
 800209a:	2067      	movs	r0, #103	@ 0x67
 800209c:	f001 fc06 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80020a0:	2000      	movs	r0, #0
 80020a2:	f001 fc03 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x67);
 80020a6:	2067      	movs	r0, #103	@ 0x67
 80020a8:	f001 fc00 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f001 fbfd 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x87);
 80020b2:	2087      	movs	r0, #135	@ 0x87
 80020b4:	f001 fbfa 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80020b8:	2000      	movs	r0, #0
 80020ba:	f001 fbf7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x99);
 80020be:	2099      	movs	r0, #153	@ 0x99
 80020c0:	f001 fbf4 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f001 fbf1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xBB);
 80020ca:	20bb      	movs	r0, #187	@ 0xbb
 80020cc:	f001 fbee 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80020d0:	2000      	movs	r0, #0
 80020d2:	f001 fbeb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x99);
 80020d6:	2099      	movs	r0, #153	@ 0x99
 80020d8:	f001 fbe8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80020dc:	2000      	movs	r0, #0
 80020de:	f001 fbe5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x77);
 80020e2:	2077      	movs	r0, #119	@ 0x77
 80020e4:	f001 fbe2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f001 fbdf 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x44);
 80020ee:	2044      	movs	r0, #68	@ 0x44
 80020f0:	f001 fbdc 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80020f4:	2000      	movs	r0, #0
 80020f6:	f001 fbd9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x56);
 80020fa:	2056      	movs	r0, #86	@ 0x56
 80020fc:	f001 fbd6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002100:	2000      	movs	r0, #0
 8002102:	f001 fbd3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x23);
 8002106:	2023      	movs	r0, #35	@ 0x23
 8002108:	f001 fbd0 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800210c:	2000      	movs	r0, #0
 800210e:	f001 fbcd 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x33);
 8002112:	2033      	movs	r0, #51	@ 0x33
 8002114:	f001 fbca 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002118:	2000      	movs	r0, #0
 800211a:	f001 fbc7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x45);
 800211e:	2045      	movs	r0, #69	@ 0x45
 8002120:	f001 fbc4 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002124:	2000      	movs	r0, #0
 8002126:	f001 fbc1 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xE8);
 800212a:	20e8      	movs	r0, #232	@ 0xe8
 800212c:	f001 fbd2 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002130:	2000      	movs	r0, #0
 8002132:	f001 fbbb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002136:	2000      	movs	r0, #0
 8002138:	f001 fbb8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x99);
 800213c:	2099      	movs	r0, #153	@ 0x99
 800213e:	f001 fbb5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002142:	2000      	movs	r0, #0
 8002144:	f001 fbb2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x87);
 8002148:	2087      	movs	r0, #135	@ 0x87
 800214a:	f001 fbaf 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800214e:	2000      	movs	r0, #0
 8002150:	f001 fbac 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x88);
 8002154:	2088      	movs	r0, #136	@ 0x88
 8002156:	f001 fba9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800215a:	2000      	movs	r0, #0
 800215c:	f001 fba6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x77);
 8002160:	2077      	movs	r0, #119	@ 0x77
 8002162:	f001 fba3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002166:	2000      	movs	r0, #0
 8002168:	f001 fba0 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x66);
 800216c:	2066      	movs	r0, #102	@ 0x66
 800216e:	f001 fb9d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002172:	2000      	movs	r0, #0
 8002174:	f001 fb9a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x88);
 8002178:	2088      	movs	r0, #136	@ 0x88
 800217a:	f001 fb97 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800217e:	2000      	movs	r0, #0
 8002180:	f001 fb94 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xAA);
 8002184:	20aa      	movs	r0, #170	@ 0xaa
 8002186:	f001 fb91 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800218a:	2000      	movs	r0, #0
 800218c:	f001 fb8e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xBB);
 8002190:	20bb      	movs	r0, #187	@ 0xbb
 8002192:	f001 fb8b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002196:	2000      	movs	r0, #0
 8002198:	f001 fb88 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x99);
 800219c:	2099      	movs	r0, #153	@ 0x99
 800219e:	f001 fb85 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f001 fb82 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x66);
 80021a8:	2066      	movs	r0, #102	@ 0x66
 80021aa:	f001 fb7f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f001 fb7c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x55);
 80021b4:	2055      	movs	r0, #85	@ 0x55
 80021b6:	f001 fb79 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80021ba:	2000      	movs	r0, #0
 80021bc:	f001 fb76 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x55);
 80021c0:	2055      	movs	r0, #85	@ 0x55
 80021c2:	f001 fb73 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f001 fb70 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x44);
 80021cc:	2044      	movs	r0, #68	@ 0x44
 80021ce:	f001 fb6d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f001 fb6a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x44);
 80021d8:	2044      	movs	r0, #68	@ 0x44
 80021da:	f001 fb67 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80021de:	2000      	movs	r0, #0
 80021e0:	f001 fb64 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x55);
 80021e4:	2055      	movs	r0, #85	@ 0x55
 80021e6:	f001 fb61 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f001 fb5e 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xE9);
 80021f0:	20e9      	movs	r0, #233	@ 0xe9
 80021f2:	f001 fb6f 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 80021f6:	20aa      	movs	r0, #170	@ 0xaa
 80021f8:	f001 fb58 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f001 fb55 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002202:	2000      	movs	r0, #0
 8002204:	f001 fb52 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002208:	2000      	movs	r0, #0
 800220a:	f001 fb4f 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0x00);
 800220e:	2000      	movs	r0, #0
 8002210:	f001 fb60 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8002214:	20aa      	movs	r0, #170	@ 0xaa
 8002216:	f001 fb49 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xCF);
 800221a:	20cf      	movs	r0, #207	@ 0xcf
 800221c:	f001 fb5a 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002220:	2000      	movs	r0, #0
 8002222:	f001 fb43 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002226:	2000      	movs	r0, #0
 8002228:	f001 fb40 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800222c:	2000      	movs	r0, #0
 800222e:	f001 fb3d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002232:	2000      	movs	r0, #0
 8002234:	f001 fb3a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002238:	2000      	movs	r0, #0
 800223a:	f001 fb37 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800223e:	2000      	movs	r0, #0
 8002240:	f001 fb34 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002244:	2000      	movs	r0, #0
 8002246:	f001 fb31 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800224a:	2000      	movs	r0, #0
 800224c:	f001 fb2e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002250:	2000      	movs	r0, #0
 8002252:	f001 fb2b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002256:	2000      	movs	r0, #0
 8002258:	f001 fb28 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800225c:	2000      	movs	r0, #0
 800225e:	f001 fb25 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002262:	2000      	movs	r0, #0
 8002264:	f001 fb22 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002268:	2000      	movs	r0, #0
 800226a:	f001 fb1f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800226e:	2000      	movs	r0, #0
 8002270:	f001 fb1c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002274:	2000      	movs	r0, #0
 8002276:	f001 fb19 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800227a:	2000      	movs	r0, #0
 800227c:	f001 fb16 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002280:	2000      	movs	r0, #0
 8002282:	f001 fb13 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8002286:	20f0      	movs	r0, #240	@ 0xf0
 8002288:	f001 fb24 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800228c:	2000      	movs	r0, #0
 800228e:	f001 fb0d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x50);
 8002292:	2050      	movs	r0, #80	@ 0x50
 8002294:	f001 fb0a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8002298:	2000      	movs	r0, #0
 800229a:	f001 fb07 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800229e:	2000      	movs	r0, #0
 80022a0:	f001 fb04 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f001 fb01 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xF3);
 80022aa:	20f3      	movs	r0, #243	@ 0xf3
 80022ac:	f001 fb12 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80022b0:	2000      	movs	r0, #0
 80022b2:	f001 fafb 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xF9);
 80022b6:	20f9      	movs	r0, #249	@ 0xf9
 80022b8:	f001 fb0c 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x06);
 80022bc:	2006      	movs	r0, #6
 80022be:	f001 faf5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x10);
 80022c2:	2010      	movs	r0, #16
 80022c4:	f001 faf2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x29);
 80022c8:	2029      	movs	r0, #41	@ 0x29
 80022ca:	f001 faef 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f001 faec 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0x3A);
 80022d4:	203a      	movs	r0, #58	@ 0x3a
 80022d6:	f001 fafd 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x55);  /* 66 */
 80022da:	2055      	movs	r0, #85	@ 0x55
 80022dc:	f001 fae6 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0x11);
 80022e0:	2011      	movs	r0, #17
 80022e2:	f001 faf7 	bl	80038d4 <lcd_wr_regno>
    HAL_Delay(100);
 80022e6:	2064      	movs	r0, #100	@ 0x64
 80022e8:	f002 fa9e 	bl	8004828 <HAL_Delay>
    lcd_wr_regno(0x29);
 80022ec:	2029      	movs	r0, #41	@ 0x29
 80022ee:	f001 faf1 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_regno(0x35);
 80022f2:	2035      	movs	r0, #53	@ 0x35
 80022f4:	f001 faee 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80022f8:	2000      	movs	r0, #0
 80022fa:	f001 fad7 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0x51);
 80022fe:	2051      	movs	r0, #81	@ 0x51
 8002300:	f001 fae8 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8002304:	20ff      	movs	r0, #255	@ 0xff
 8002306:	f001 fad1 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0x53);
 800230a:	2053      	movs	r0, #83	@ 0x53
 800230c:	f001 fae2 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x2C);
 8002310:	202c      	movs	r0, #44	@ 0x2c
 8002312:	f001 facb 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0x55);
 8002316:	2055      	movs	r0, #85	@ 0x55
 8002318:	f001 fadc 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x82);
 800231c:	2082      	movs	r0, #130	@ 0x82
 800231e:	f001 fac5 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0x2c);
 8002322:	202c      	movs	r0, #44	@ 0x2c
 8002324:	f001 fad6 	bl	80038d4 <lcd_wr_regno>
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <lcd_ex_st7796_reginit>:
 * @brief       ST7796寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_st7796_reginit(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8002330:	2011      	movs	r0, #17
 8002332:	f001 facf 	bl	80038d4 <lcd_wr_regno>

    HAL_Delay(120);
 8002336:	2078      	movs	r0, #120	@ 0x78
 8002338:	f002 fa76 	bl	8004828 <HAL_Delay>

    lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
 800233c:	2036      	movs	r0, #54	@ 0x36
 800233e:	f001 fac9 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x48);
 8002342:	2048      	movs	r0, #72	@ 0x48
 8002344:	f001 fab2 	bl	80038ac <lcd_wr_data>
    
    lcd_wr_regno(0x3A);
 8002348:	203a      	movs	r0, #58	@ 0x3a
 800234a:	f001 fac3 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x55);
 800234e:	2055      	movs	r0, #85	@ 0x55
 8002350:	f001 faac 	bl	80038ac <lcd_wr_data>
    
    lcd_wr_regno(0xF0);
 8002354:	20f0      	movs	r0, #240	@ 0xf0
 8002356:	f001 fabd 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xC3);
 800235a:	20c3      	movs	r0, #195	@ 0xc3
 800235c:	f001 faa6 	bl	80038ac <lcd_wr_data>
    
    lcd_wr_regno(0xF0);
 8002360:	20f0      	movs	r0, #240	@ 0xf0
 8002362:	f001 fab7 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x96);
 8002366:	2096      	movs	r0, #150	@ 0x96
 8002368:	f001 faa0 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB4);
 800236c:	20b4      	movs	r0, #180	@ 0xb4
 800236e:	f001 fab1 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8002372:	2001      	movs	r0, #1
 8002374:	f001 fa9a 	bl	80038ac <lcd_wr_data>
    
    lcd_wr_regno(0xB6); /* Display Function Control */
 8002378:	20b6      	movs	r0, #182	@ 0xb6
 800237a:	f001 faab 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 800237e:	200a      	movs	r0, #10
 8002380:	f001 fa94 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xA2);
 8002384:	20a2      	movs	r0, #162	@ 0xa2
 8002386:	f001 fa91 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB7);
 800238a:	20b7      	movs	r0, #183	@ 0xb7
 800238c:	f001 faa2 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xC6);
 8002390:	20c6      	movs	r0, #198	@ 0xc6
 8002392:	f001 fa8b 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB9);
 8002396:	20b9      	movs	r0, #185	@ 0xb9
 8002398:	f001 fa9c 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x02);
 800239c:	2002      	movs	r0, #2
 800239e:	f001 fa85 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xE0);
 80023a2:	20e0      	movs	r0, #224	@ 0xe0
 80023a4:	f001 fa82 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC0);
 80023a8:	20c0      	movs	r0, #192	@ 0xc0
 80023aa:	f001 fa93 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x80);
 80023ae:	2080      	movs	r0, #128	@ 0x80
 80023b0:	f001 fa7c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x16);
 80023b4:	2016      	movs	r0, #22
 80023b6:	f001 fa79 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC1);
 80023ba:	20c1      	movs	r0, #193	@ 0xc1
 80023bc:	f001 fa8a 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x19);
 80023c0:	2019      	movs	r0, #25
 80023c2:	f001 fa73 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC2);
 80023c6:	20c2      	movs	r0, #194	@ 0xc2
 80023c8:	f001 fa84 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xA7);
 80023cc:	20a7      	movs	r0, #167	@ 0xa7
 80023ce:	f001 fa6d 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC5);
 80023d2:	20c5      	movs	r0, #197	@ 0xc5
 80023d4:	f001 fa7e 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x16);   
 80023d8:	2016      	movs	r0, #22
 80023da:	f001 fa67 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xE8);
 80023de:	20e8      	movs	r0, #232	@ 0xe8
 80023e0:	f001 fa78 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x40);
 80023e4:	2040      	movs	r0, #64	@ 0x40
 80023e6:	f001 fa61 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x8A);
 80023ea:	208a      	movs	r0, #138	@ 0x8a
 80023ec:	f001 fa5e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f001 fa5b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80023f6:	2000      	movs	r0, #0
 80023f8:	f001 fa58 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x29);
 80023fc:	2029      	movs	r0, #41	@ 0x29
 80023fe:	f001 fa55 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x19);
 8002402:	2019      	movs	r0, #25
 8002404:	f001 fa52 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xA5);
 8002408:	20a5      	movs	r0, #165	@ 0xa5
 800240a:	f001 fa4f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x33);
 800240e:	2033      	movs	r0, #51	@ 0x33
 8002410:	f001 fa4c 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xE0);
 8002414:	20e0      	movs	r0, #224	@ 0xe0
 8002416:	f001 fa5d 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xF0);
 800241a:	20f0      	movs	r0, #240	@ 0xf0
 800241c:	f001 fa46 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x07);
 8002420:	2007      	movs	r0, #7
 8002422:	f001 fa43 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0D);
 8002426:	200d      	movs	r0, #13
 8002428:	f001 fa40 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x04);
 800242c:	2004      	movs	r0, #4
 800242e:	f001 fa3d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x05);
 8002432:	2005      	movs	r0, #5
 8002434:	f001 fa3a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x14);
 8002438:	2014      	movs	r0, #20
 800243a:	f001 fa37 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x36);
 800243e:	2036      	movs	r0, #54	@ 0x36
 8002440:	f001 fa34 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x54);
 8002444:	2054      	movs	r0, #84	@ 0x54
 8002446:	f001 fa31 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x4C);
 800244a:	204c      	movs	r0, #76	@ 0x4c
 800244c:	f001 fa2e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x38);
 8002450:	2038      	movs	r0, #56	@ 0x38
 8002452:	f001 fa2b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x13);
 8002456:	2013      	movs	r0, #19
 8002458:	f001 fa28 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x14);
 800245c:	2014      	movs	r0, #20
 800245e:	f001 fa25 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x2E);
 8002462:	202e      	movs	r0, #46	@ 0x2e
 8002464:	f001 fa22 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x34);
 8002468:	2034      	movs	r0, #52	@ 0x34
 800246a:	f001 fa1f 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xE1);
 800246e:	20e1      	movs	r0, #225	@ 0xe1
 8002470:	f001 fa30 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xF0);
 8002474:	20f0      	movs	r0, #240	@ 0xf0
 8002476:	f001 fa19 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x10);
 800247a:	2010      	movs	r0, #16
 800247c:	f001 fa16 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x14);
 8002480:	2014      	movs	r0, #20
 8002482:	f001 fa13 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0E);
 8002486:	200e      	movs	r0, #14
 8002488:	f001 fa10 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0C);
 800248c:	200c      	movs	r0, #12
 800248e:	f001 fa0d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x08);
 8002492:	2008      	movs	r0, #8
 8002494:	f001 fa0a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x35);
 8002498:	2035      	movs	r0, #53	@ 0x35
 800249a:	f001 fa07 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x44);
 800249e:	2044      	movs	r0, #68	@ 0x44
 80024a0:	f001 fa04 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x4C);
 80024a4:	204c      	movs	r0, #76	@ 0x4c
 80024a6:	f001 fa01 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x26);
 80024aa:	2026      	movs	r0, #38	@ 0x26
 80024ac:	f001 f9fe 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x10);
 80024b0:	2010      	movs	r0, #16
 80024b2:	f001 f9fb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x12);
 80024b6:	2012      	movs	r0, #18
 80024b8:	f001 f9f8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x2C);
 80024bc:	202c      	movs	r0, #44	@ 0x2c
 80024be:	f001 f9f5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x32);
 80024c2:	2032      	movs	r0, #50	@ 0x32
 80024c4:	f001 f9f2 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xF0);
 80024c8:	20f0      	movs	r0, #240	@ 0xf0
 80024ca:	f001 fa03 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 80024ce:	203c      	movs	r0, #60	@ 0x3c
 80024d0:	f001 f9ec 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xF0);
 80024d4:	20f0      	movs	r0, #240	@ 0xf0
 80024d6:	f001 f9fd 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x69);
 80024da:	2069      	movs	r0, #105	@ 0x69
 80024dc:	f001 f9e6 	bl	80038ac <lcd_wr_data>

    HAL_Delay(120);
 80024e0:	2078      	movs	r0, #120	@ 0x78
 80024e2:	f002 f9a1 	bl	8004828 <HAL_Delay>

    lcd_wr_regno(0x21);
 80024e6:	2021      	movs	r0, #33	@ 0x21
 80024e8:	f001 f9f4 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_regno(0x29);
 80024ec:	2029      	movs	r0, #41	@ 0x29
 80024ee:	f001 f9f1 	bl	80038d4 <lcd_wr_regno>
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <lcd_ex_nt35510_reginit>:
 * @brief       NT35510寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_nt35510_reginit(void)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	af00      	add	r7, sp, #0
    lcd_write_reg(0xF000, 0x55);
 80024fa:	2155      	movs	r1, #85	@ 0x55
 80024fc:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8002500:	f001 f9fc 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8002504:	21aa      	movs	r1, #170	@ 0xaa
 8002506:	f24f 0001 	movw	r0, #61441	@ 0xf001
 800250a:	f001 f9f7 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 800250e:	2152      	movs	r1, #82	@ 0x52
 8002510:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8002514:	f001 f9f2 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 8002518:	2108      	movs	r1, #8
 800251a:	f24f 0003 	movw	r0, #61443	@ 0xf003
 800251e:	f001 f9ed 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xF004, 0x01);
 8002522:	2101      	movs	r1, #1
 8002524:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8002528:	f001 f9e8 	bl	80038fc <lcd_write_reg>
    /* AVDD Set AVDD 5.2V */
    lcd_write_reg(0xB000, 0x0D);
 800252c:	210d      	movs	r1, #13
 800252e:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8002532:	f001 f9e3 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB001, 0x0D);
 8002536:	210d      	movs	r1, #13
 8002538:	f24b 0001 	movw	r0, #45057	@ 0xb001
 800253c:	f001 f9de 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB002, 0x0D);
 8002540:	210d      	movs	r1, #13
 8002542:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8002546:	f001 f9d9 	bl	80038fc <lcd_write_reg>
    /* AVDD ratio */
    lcd_write_reg(0xB600, 0x34);
 800254a:	2134      	movs	r1, #52	@ 0x34
 800254c:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8002550:	f001 f9d4 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB601, 0x34);
 8002554:	2134      	movs	r1, #52	@ 0x34
 8002556:	f24b 6001 	movw	r0, #46593	@ 0xb601
 800255a:	f001 f9cf 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB602, 0x34);
 800255e:	2134      	movs	r1, #52	@ 0x34
 8002560:	f24b 6002 	movw	r0, #46594	@ 0xb602
 8002564:	f001 f9ca 	bl	80038fc <lcd_write_reg>
    /* AVEE -5.2V */
    lcd_write_reg(0xB100, 0x0D);
 8002568:	210d      	movs	r1, #13
 800256a:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 800256e:	f001 f9c5 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB101, 0x0D);
 8002572:	210d      	movs	r1, #13
 8002574:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8002578:	f001 f9c0 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB102, 0x0D);
 800257c:	210d      	movs	r1, #13
 800257e:	f24b 1002 	movw	r0, #45314	@ 0xb102
 8002582:	f001 f9bb 	bl	80038fc <lcd_write_reg>
    /* AVEE ratio */
    lcd_write_reg(0xB700, 0x34);
 8002586:	2134      	movs	r1, #52	@ 0x34
 8002588:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 800258c:	f001 f9b6 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB701, 0x34);
 8002590:	2134      	movs	r1, #52	@ 0x34
 8002592:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8002596:	f001 f9b1 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB702, 0x34);
 800259a:	2134      	movs	r1, #52	@ 0x34
 800259c:	f24b 7002 	movw	r0, #46850	@ 0xb702
 80025a0:	f001 f9ac 	bl	80038fc <lcd_write_reg>
    /* VCL -2.5V */
    lcd_write_reg(0xB200, 0x00);
 80025a4:	2100      	movs	r1, #0
 80025a6:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 80025aa:	f001 f9a7 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB201, 0x00);
 80025ae:	2100      	movs	r1, #0
 80025b0:	f24b 2001 	movw	r0, #45569	@ 0xb201
 80025b4:	f001 f9a2 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB202, 0x00);
 80025b8:	2100      	movs	r1, #0
 80025ba:	f24b 2002 	movw	r0, #45570	@ 0xb202
 80025be:	f001 f99d 	bl	80038fc <lcd_write_reg>
    /* VCL ratio */
    lcd_write_reg(0xB800, 0x24);
 80025c2:	2124      	movs	r1, #36	@ 0x24
 80025c4:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 80025c8:	f001 f998 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB801, 0x24);
 80025cc:	2124      	movs	r1, #36	@ 0x24
 80025ce:	f64b 0001 	movw	r0, #47105	@ 0xb801
 80025d2:	f001 f993 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB802, 0x24);
 80025d6:	2124      	movs	r1, #36	@ 0x24
 80025d8:	f64b 0002 	movw	r0, #47106	@ 0xb802
 80025dc:	f001 f98e 	bl	80038fc <lcd_write_reg>
    /* VGH 15V (Free pump) */
    lcd_write_reg(0xBF00, 0x01);
 80025e0:	2101      	movs	r1, #1
 80025e2:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 80025e6:	f001 f989 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB300, 0x0F);
 80025ea:	210f      	movs	r1, #15
 80025ec:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 80025f0:	f001 f984 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB301, 0x0F);
 80025f4:	210f      	movs	r1, #15
 80025f6:	f24b 3001 	movw	r0, #45825	@ 0xb301
 80025fa:	f001 f97f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB302, 0x0F);
 80025fe:	210f      	movs	r1, #15
 8002600:	f24b 3002 	movw	r0, #45826	@ 0xb302
 8002604:	f001 f97a 	bl	80038fc <lcd_write_reg>
    /* VGH ratio */
    lcd_write_reg(0xB900, 0x34);
 8002608:	2134      	movs	r1, #52	@ 0x34
 800260a:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 800260e:	f001 f975 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB901, 0x34);
 8002612:	2134      	movs	r1, #52	@ 0x34
 8002614:	f64b 1001 	movw	r0, #47361	@ 0xb901
 8002618:	f001 f970 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB902, 0x34);
 800261c:	2134      	movs	r1, #52	@ 0x34
 800261e:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8002622:	f001 f96b 	bl	80038fc <lcd_write_reg>
    /* VGL_REG -10V */
    lcd_write_reg(0xB500, 0x08);
 8002626:	2108      	movs	r1, #8
 8002628:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 800262c:	f001 f966 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB501, 0x08);
 8002630:	2108      	movs	r1, #8
 8002632:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8002636:	f001 f961 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB502, 0x08);
 800263a:	2108      	movs	r1, #8
 800263c:	f24b 5002 	movw	r0, #46338	@ 0xb502
 8002640:	f001 f95c 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xC200, 0x03);
 8002644:	2103      	movs	r1, #3
 8002646:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 800264a:	f001 f957 	bl	80038fc <lcd_write_reg>
    /* VGLX ratio */
    lcd_write_reg(0xBA00, 0x24);
 800264e:	2124      	movs	r1, #36	@ 0x24
 8002650:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 8002654:	f001 f952 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xBA01, 0x24);
 8002658:	2124      	movs	r1, #36	@ 0x24
 800265a:	f64b 2001 	movw	r0, #47617	@ 0xba01
 800265e:	f001 f94d 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xBA02, 0x24);
 8002662:	2124      	movs	r1, #36	@ 0x24
 8002664:	f64b 2002 	movw	r0, #47618	@ 0xba02
 8002668:	f001 f948 	bl	80038fc <lcd_write_reg>
    /* VGMP/VGSP 4.5V/0V */
    lcd_write_reg(0xBC00, 0x00);
 800266c:	2100      	movs	r1, #0
 800266e:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8002672:	f001 f943 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x78);
 8002676:	2178      	movs	r1, #120	@ 0x78
 8002678:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 800267c:	f001 f93e 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 8002680:	2100      	movs	r1, #0
 8002682:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8002686:	f001 f939 	bl	80038fc <lcd_write_reg>
    /* VGMN/VGSN -4.5V/0V */
    lcd_write_reg(0xBD00, 0x00);
 800268a:	2100      	movs	r1, #0
 800268c:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8002690:	f001 f934 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xBD01, 0x78);
 8002694:	2178      	movs	r1, #120	@ 0x78
 8002696:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 800269a:	f001 f92f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xBD02, 0x00);
 800269e:	2100      	movs	r1, #0
 80026a0:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 80026a4:	f001 f92a 	bl	80038fc <lcd_write_reg>
    /* VCOM */
    lcd_write_reg(0xBE00, 0x00);
 80026a8:	2100      	movs	r1, #0
 80026aa:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 80026ae:	f001 f925 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xBE01, 0x64);
 80026b2:	2164      	movs	r1, #100	@ 0x64
 80026b4:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 80026b8:	f001 f920 	bl	80038fc <lcd_write_reg>
    /* Gamma Setting */
    lcd_write_reg(0xD100, 0x00);
 80026bc:	2100      	movs	r1, #0
 80026be:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 80026c2:	f001 f91b 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD101, 0x33);
 80026c6:	2133      	movs	r1, #51	@ 0x33
 80026c8:	f24d 1001 	movw	r0, #53505	@ 0xd101
 80026cc:	f001 f916 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD102, 0x00);
 80026d0:	2100      	movs	r1, #0
 80026d2:	f24d 1002 	movw	r0, #53506	@ 0xd102
 80026d6:	f001 f911 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD103, 0x34);
 80026da:	2134      	movs	r1, #52	@ 0x34
 80026dc:	f24d 1003 	movw	r0, #53507	@ 0xd103
 80026e0:	f001 f90c 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD104, 0x00);
 80026e4:	2100      	movs	r1, #0
 80026e6:	f24d 1004 	movw	r0, #53508	@ 0xd104
 80026ea:	f001 f907 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD105, 0x3A);
 80026ee:	213a      	movs	r1, #58	@ 0x3a
 80026f0:	f24d 1005 	movw	r0, #53509	@ 0xd105
 80026f4:	f001 f902 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD106, 0x00);
 80026f8:	2100      	movs	r1, #0
 80026fa:	f24d 1006 	movw	r0, #53510	@ 0xd106
 80026fe:	f001 f8fd 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD107, 0x4A);
 8002702:	214a      	movs	r1, #74	@ 0x4a
 8002704:	f24d 1007 	movw	r0, #53511	@ 0xd107
 8002708:	f001 f8f8 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD108, 0x00);
 800270c:	2100      	movs	r1, #0
 800270e:	f24d 1008 	movw	r0, #53512	@ 0xd108
 8002712:	f001 f8f3 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD109, 0x5C);
 8002716:	215c      	movs	r1, #92	@ 0x5c
 8002718:	f24d 1009 	movw	r0, #53513	@ 0xd109
 800271c:	f001 f8ee 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD10A, 0x00);
 8002720:	2100      	movs	r1, #0
 8002722:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 8002726:	f001 f8e9 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD10B, 0x81);
 800272a:	2181      	movs	r1, #129	@ 0x81
 800272c:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8002730:	f001 f8e4 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD10C, 0x00);
 8002734:	2100      	movs	r1, #0
 8002736:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 800273a:	f001 f8df 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD10D, 0xA6);
 800273e:	21a6      	movs	r1, #166	@ 0xa6
 8002740:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 8002744:	f001 f8da 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD10E, 0x00);
 8002748:	2100      	movs	r1, #0
 800274a:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 800274e:	f001 f8d5 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD10F, 0xE5);
 8002752:	21e5      	movs	r1, #229	@ 0xe5
 8002754:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 8002758:	f001 f8d0 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD110, 0x01);
 800275c:	2101      	movs	r1, #1
 800275e:	f24d 1010 	movw	r0, #53520	@ 0xd110
 8002762:	f001 f8cb 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD111, 0x13);
 8002766:	2113      	movs	r1, #19
 8002768:	f24d 1011 	movw	r0, #53521	@ 0xd111
 800276c:	f001 f8c6 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD112, 0x01);
 8002770:	2101      	movs	r1, #1
 8002772:	f24d 1012 	movw	r0, #53522	@ 0xd112
 8002776:	f001 f8c1 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD113, 0x54);
 800277a:	2154      	movs	r1, #84	@ 0x54
 800277c:	f24d 1013 	movw	r0, #53523	@ 0xd113
 8002780:	f001 f8bc 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD114, 0x01);
 8002784:	2101      	movs	r1, #1
 8002786:	f24d 1014 	movw	r0, #53524	@ 0xd114
 800278a:	f001 f8b7 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD115, 0x82);
 800278e:	2182      	movs	r1, #130	@ 0x82
 8002790:	f24d 1015 	movw	r0, #53525	@ 0xd115
 8002794:	f001 f8b2 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD116, 0x01);
 8002798:	2101      	movs	r1, #1
 800279a:	f24d 1016 	movw	r0, #53526	@ 0xd116
 800279e:	f001 f8ad 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD117, 0xCA);
 80027a2:	21ca      	movs	r1, #202	@ 0xca
 80027a4:	f24d 1017 	movw	r0, #53527	@ 0xd117
 80027a8:	f001 f8a8 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD118, 0x02);
 80027ac:	2102      	movs	r1, #2
 80027ae:	f24d 1018 	movw	r0, #53528	@ 0xd118
 80027b2:	f001 f8a3 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD119, 0x00);
 80027b6:	2100      	movs	r1, #0
 80027b8:	f24d 1019 	movw	r0, #53529	@ 0xd119
 80027bc:	f001 f89e 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD11A, 0x02);
 80027c0:	2102      	movs	r1, #2
 80027c2:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 80027c6:	f001 f899 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD11B, 0x01);
 80027ca:	2101      	movs	r1, #1
 80027cc:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 80027d0:	f001 f894 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD11C, 0x02);
 80027d4:	2102      	movs	r1, #2
 80027d6:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 80027da:	f001 f88f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD11D, 0x34);
 80027de:	2134      	movs	r1, #52	@ 0x34
 80027e0:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 80027e4:	f001 f88a 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD11E, 0x02);
 80027e8:	2102      	movs	r1, #2
 80027ea:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 80027ee:	f001 f885 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD11F, 0x67);
 80027f2:	2167      	movs	r1, #103	@ 0x67
 80027f4:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 80027f8:	f001 f880 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD120, 0x02);
 80027fc:	2102      	movs	r1, #2
 80027fe:	f24d 1020 	movw	r0, #53536	@ 0xd120
 8002802:	f001 f87b 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD121, 0x84);
 8002806:	2184      	movs	r1, #132	@ 0x84
 8002808:	f24d 1021 	movw	r0, #53537	@ 0xd121
 800280c:	f001 f876 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD122, 0x02);
 8002810:	2102      	movs	r1, #2
 8002812:	f24d 1022 	movw	r0, #53538	@ 0xd122
 8002816:	f001 f871 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD123, 0xA4);
 800281a:	21a4      	movs	r1, #164	@ 0xa4
 800281c:	f24d 1023 	movw	r0, #53539	@ 0xd123
 8002820:	f001 f86c 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD124, 0x02);
 8002824:	2102      	movs	r1, #2
 8002826:	f24d 1024 	movw	r0, #53540	@ 0xd124
 800282a:	f001 f867 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD125, 0xB7);
 800282e:	21b7      	movs	r1, #183	@ 0xb7
 8002830:	f24d 1025 	movw	r0, #53541	@ 0xd125
 8002834:	f001 f862 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD126, 0x02);
 8002838:	2102      	movs	r1, #2
 800283a:	f24d 1026 	movw	r0, #53542	@ 0xd126
 800283e:	f001 f85d 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD127, 0xCF);
 8002842:	21cf      	movs	r1, #207	@ 0xcf
 8002844:	f24d 1027 	movw	r0, #53543	@ 0xd127
 8002848:	f001 f858 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD128, 0x02);
 800284c:	2102      	movs	r1, #2
 800284e:	f24d 1028 	movw	r0, #53544	@ 0xd128
 8002852:	f001 f853 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD129, 0xDE);
 8002856:	21de      	movs	r1, #222	@ 0xde
 8002858:	f24d 1029 	movw	r0, #53545	@ 0xd129
 800285c:	f001 f84e 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD12A, 0x02);
 8002860:	2102      	movs	r1, #2
 8002862:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 8002866:	f001 f849 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD12B, 0xF2);
 800286a:	21f2      	movs	r1, #242	@ 0xf2
 800286c:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 8002870:	f001 f844 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD12C, 0x02);
 8002874:	2102      	movs	r1, #2
 8002876:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 800287a:	f001 f83f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD12D, 0xFE);
 800287e:	21fe      	movs	r1, #254	@ 0xfe
 8002880:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 8002884:	f001 f83a 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD12E, 0x03);
 8002888:	2103      	movs	r1, #3
 800288a:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 800288e:	f001 f835 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD12F, 0x10);
 8002892:	2110      	movs	r1, #16
 8002894:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 8002898:	f001 f830 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD130, 0x03);
 800289c:	2103      	movs	r1, #3
 800289e:	f24d 1030 	movw	r0, #53552	@ 0xd130
 80028a2:	f001 f82b 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD131, 0x33);
 80028a6:	2133      	movs	r1, #51	@ 0x33
 80028a8:	f24d 1031 	movw	r0, #53553	@ 0xd131
 80028ac:	f001 f826 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD132, 0x03);
 80028b0:	2103      	movs	r1, #3
 80028b2:	f24d 1032 	movw	r0, #53554	@ 0xd132
 80028b6:	f001 f821 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD133, 0x6D);
 80028ba:	216d      	movs	r1, #109	@ 0x6d
 80028bc:	f24d 1033 	movw	r0, #53555	@ 0xd133
 80028c0:	f001 f81c 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD200, 0x00);
 80028c4:	2100      	movs	r1, #0
 80028c6:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 80028ca:	f001 f817 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD201, 0x33);
 80028ce:	2133      	movs	r1, #51	@ 0x33
 80028d0:	f24d 2001 	movw	r0, #53761	@ 0xd201
 80028d4:	f001 f812 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD202, 0x00);
 80028d8:	2100      	movs	r1, #0
 80028da:	f24d 2002 	movw	r0, #53762	@ 0xd202
 80028de:	f001 f80d 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD203, 0x34);
 80028e2:	2134      	movs	r1, #52	@ 0x34
 80028e4:	f24d 2003 	movw	r0, #53763	@ 0xd203
 80028e8:	f001 f808 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD204, 0x00);
 80028ec:	2100      	movs	r1, #0
 80028ee:	f24d 2004 	movw	r0, #53764	@ 0xd204
 80028f2:	f001 f803 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD205, 0x3A);
 80028f6:	213a      	movs	r1, #58	@ 0x3a
 80028f8:	f24d 2005 	movw	r0, #53765	@ 0xd205
 80028fc:	f000 fffe 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD206, 0x00);
 8002900:	2100      	movs	r1, #0
 8002902:	f24d 2006 	movw	r0, #53766	@ 0xd206
 8002906:	f000 fff9 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD207, 0x4A);
 800290a:	214a      	movs	r1, #74	@ 0x4a
 800290c:	f24d 2007 	movw	r0, #53767	@ 0xd207
 8002910:	f000 fff4 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD208, 0x00);
 8002914:	2100      	movs	r1, #0
 8002916:	f24d 2008 	movw	r0, #53768	@ 0xd208
 800291a:	f000 ffef 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD209, 0x5C);
 800291e:	215c      	movs	r1, #92	@ 0x5c
 8002920:	f24d 2009 	movw	r0, #53769	@ 0xd209
 8002924:	f000 ffea 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD20A, 0x00);
 8002928:	2100      	movs	r1, #0
 800292a:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 800292e:	f000 ffe5 	bl	80038fc <lcd_write_reg>

    lcd_write_reg(0xD20B, 0x81);
 8002932:	2181      	movs	r1, #129	@ 0x81
 8002934:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 8002938:	f000 ffe0 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD20C, 0x00);
 800293c:	2100      	movs	r1, #0
 800293e:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 8002942:	f000 ffdb 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD20D, 0xA6);
 8002946:	21a6      	movs	r1, #166	@ 0xa6
 8002948:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 800294c:	f000 ffd6 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD20E, 0x00);
 8002950:	2100      	movs	r1, #0
 8002952:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 8002956:	f000 ffd1 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD20F, 0xE5);
 800295a:	21e5      	movs	r1, #229	@ 0xe5
 800295c:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 8002960:	f000 ffcc 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD210, 0x01);
 8002964:	2101      	movs	r1, #1
 8002966:	f24d 2010 	movw	r0, #53776	@ 0xd210
 800296a:	f000 ffc7 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD211, 0x13);
 800296e:	2113      	movs	r1, #19
 8002970:	f24d 2011 	movw	r0, #53777	@ 0xd211
 8002974:	f000 ffc2 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD212, 0x01);
 8002978:	2101      	movs	r1, #1
 800297a:	f24d 2012 	movw	r0, #53778	@ 0xd212
 800297e:	f000 ffbd 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD213, 0x54);
 8002982:	2154      	movs	r1, #84	@ 0x54
 8002984:	f24d 2013 	movw	r0, #53779	@ 0xd213
 8002988:	f000 ffb8 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD214, 0x01);
 800298c:	2101      	movs	r1, #1
 800298e:	f24d 2014 	movw	r0, #53780	@ 0xd214
 8002992:	f000 ffb3 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD215, 0x82);
 8002996:	2182      	movs	r1, #130	@ 0x82
 8002998:	f24d 2015 	movw	r0, #53781	@ 0xd215
 800299c:	f000 ffae 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD216, 0x01);
 80029a0:	2101      	movs	r1, #1
 80029a2:	f24d 2016 	movw	r0, #53782	@ 0xd216
 80029a6:	f000 ffa9 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD217, 0xCA);
 80029aa:	21ca      	movs	r1, #202	@ 0xca
 80029ac:	f24d 2017 	movw	r0, #53783	@ 0xd217
 80029b0:	f000 ffa4 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD218, 0x02);
 80029b4:	2102      	movs	r1, #2
 80029b6:	f24d 2018 	movw	r0, #53784	@ 0xd218
 80029ba:	f000 ff9f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD219, 0x00);
 80029be:	2100      	movs	r1, #0
 80029c0:	f24d 2019 	movw	r0, #53785	@ 0xd219
 80029c4:	f000 ff9a 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD21A, 0x02);
 80029c8:	2102      	movs	r1, #2
 80029ca:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 80029ce:	f000 ff95 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD21B, 0x01);
 80029d2:	2101      	movs	r1, #1
 80029d4:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 80029d8:	f000 ff90 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD21C, 0x02);
 80029dc:	2102      	movs	r1, #2
 80029de:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 80029e2:	f000 ff8b 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD21D, 0x34);
 80029e6:	2134      	movs	r1, #52	@ 0x34
 80029e8:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 80029ec:	f000 ff86 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD21E, 0x02);
 80029f0:	2102      	movs	r1, #2
 80029f2:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 80029f6:	f000 ff81 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD21F, 0x67);
 80029fa:	2167      	movs	r1, #103	@ 0x67
 80029fc:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 8002a00:	f000 ff7c 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD220, 0x02);
 8002a04:	2102      	movs	r1, #2
 8002a06:	f24d 2020 	movw	r0, #53792	@ 0xd220
 8002a0a:	f000 ff77 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD221, 0x84);
 8002a0e:	2184      	movs	r1, #132	@ 0x84
 8002a10:	f24d 2021 	movw	r0, #53793	@ 0xd221
 8002a14:	f000 ff72 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD222, 0x02);
 8002a18:	2102      	movs	r1, #2
 8002a1a:	f24d 2022 	movw	r0, #53794	@ 0xd222
 8002a1e:	f000 ff6d 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD223, 0xA4);
 8002a22:	21a4      	movs	r1, #164	@ 0xa4
 8002a24:	f24d 2023 	movw	r0, #53795	@ 0xd223
 8002a28:	f000 ff68 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD224, 0x02);
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	f24d 2024 	movw	r0, #53796	@ 0xd224
 8002a32:	f000 ff63 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD225, 0xB7);
 8002a36:	21b7      	movs	r1, #183	@ 0xb7
 8002a38:	f24d 2025 	movw	r0, #53797	@ 0xd225
 8002a3c:	f000 ff5e 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD226, 0x02);
 8002a40:	2102      	movs	r1, #2
 8002a42:	f24d 2026 	movw	r0, #53798	@ 0xd226
 8002a46:	f000 ff59 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD227, 0xCF);
 8002a4a:	21cf      	movs	r1, #207	@ 0xcf
 8002a4c:	f24d 2027 	movw	r0, #53799	@ 0xd227
 8002a50:	f000 ff54 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD228, 0x02);
 8002a54:	2102      	movs	r1, #2
 8002a56:	f24d 2028 	movw	r0, #53800	@ 0xd228
 8002a5a:	f000 ff4f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD229, 0xDE);
 8002a5e:	21de      	movs	r1, #222	@ 0xde
 8002a60:	f24d 2029 	movw	r0, #53801	@ 0xd229
 8002a64:	f000 ff4a 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD22A, 0x02);
 8002a68:	2102      	movs	r1, #2
 8002a6a:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 8002a6e:	f000 ff45 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD22B, 0xF2);
 8002a72:	21f2      	movs	r1, #242	@ 0xf2
 8002a74:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 8002a78:	f000 ff40 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD22C, 0x02);
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 8002a82:	f000 ff3b 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD22D, 0xFE);
 8002a86:	21fe      	movs	r1, #254	@ 0xfe
 8002a88:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 8002a8c:	f000 ff36 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD22E, 0x03);
 8002a90:	2103      	movs	r1, #3
 8002a92:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 8002a96:	f000 ff31 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD22F, 0x10);
 8002a9a:	2110      	movs	r1, #16
 8002a9c:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 8002aa0:	f000 ff2c 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD230, 0x03);
 8002aa4:	2103      	movs	r1, #3
 8002aa6:	f24d 2030 	movw	r0, #53808	@ 0xd230
 8002aaa:	f000 ff27 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD231, 0x33);
 8002aae:	2133      	movs	r1, #51	@ 0x33
 8002ab0:	f24d 2031 	movw	r0, #53809	@ 0xd231
 8002ab4:	f000 ff22 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD232, 0x03);
 8002ab8:	2103      	movs	r1, #3
 8002aba:	f24d 2032 	movw	r0, #53810	@ 0xd232
 8002abe:	f000 ff1d 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD233, 0x6D);
 8002ac2:	216d      	movs	r1, #109	@ 0x6d
 8002ac4:	f24d 2033 	movw	r0, #53811	@ 0xd233
 8002ac8:	f000 ff18 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD300, 0x00);
 8002acc:	2100      	movs	r1, #0
 8002ace:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 8002ad2:	f000 ff13 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD301, 0x33);
 8002ad6:	2133      	movs	r1, #51	@ 0x33
 8002ad8:	f24d 3001 	movw	r0, #54017	@ 0xd301
 8002adc:	f000 ff0e 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD302, 0x00);
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	f24d 3002 	movw	r0, #54018	@ 0xd302
 8002ae6:	f000 ff09 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD303, 0x34);
 8002aea:	2134      	movs	r1, #52	@ 0x34
 8002aec:	f24d 3003 	movw	r0, #54019	@ 0xd303
 8002af0:	f000 ff04 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD304, 0x00);
 8002af4:	2100      	movs	r1, #0
 8002af6:	f24d 3004 	movw	r0, #54020	@ 0xd304
 8002afa:	f000 feff 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD305, 0x3A);
 8002afe:	213a      	movs	r1, #58	@ 0x3a
 8002b00:	f24d 3005 	movw	r0, #54021	@ 0xd305
 8002b04:	f000 fefa 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD306, 0x00);
 8002b08:	2100      	movs	r1, #0
 8002b0a:	f24d 3006 	movw	r0, #54022	@ 0xd306
 8002b0e:	f000 fef5 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD307, 0x4A);
 8002b12:	214a      	movs	r1, #74	@ 0x4a
 8002b14:	f24d 3007 	movw	r0, #54023	@ 0xd307
 8002b18:	f000 fef0 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD308, 0x00);
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	f24d 3008 	movw	r0, #54024	@ 0xd308
 8002b22:	f000 feeb 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD309, 0x5C);
 8002b26:	215c      	movs	r1, #92	@ 0x5c
 8002b28:	f24d 3009 	movw	r0, #54025	@ 0xd309
 8002b2c:	f000 fee6 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD30A, 0x00);
 8002b30:	2100      	movs	r1, #0
 8002b32:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8002b36:	f000 fee1 	bl	80038fc <lcd_write_reg>

    lcd_write_reg(0xD30B, 0x81);
 8002b3a:	2181      	movs	r1, #129	@ 0x81
 8002b3c:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 8002b40:	f000 fedc 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD30C, 0x00);
 8002b44:	2100      	movs	r1, #0
 8002b46:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 8002b4a:	f000 fed7 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD30D, 0xA6);
 8002b4e:	21a6      	movs	r1, #166	@ 0xa6
 8002b50:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 8002b54:	f000 fed2 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD30E, 0x00);
 8002b58:	2100      	movs	r1, #0
 8002b5a:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 8002b5e:	f000 fecd 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD30F, 0xE5);
 8002b62:	21e5      	movs	r1, #229	@ 0xe5
 8002b64:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 8002b68:	f000 fec8 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD310, 0x01);
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	f24d 3010 	movw	r0, #54032	@ 0xd310
 8002b72:	f000 fec3 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD311, 0x13);
 8002b76:	2113      	movs	r1, #19
 8002b78:	f24d 3011 	movw	r0, #54033	@ 0xd311
 8002b7c:	f000 febe 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD312, 0x01);
 8002b80:	2101      	movs	r1, #1
 8002b82:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8002b86:	f000 feb9 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD313, 0x54);
 8002b8a:	2154      	movs	r1, #84	@ 0x54
 8002b8c:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8002b90:	f000 feb4 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD314, 0x01);
 8002b94:	2101      	movs	r1, #1
 8002b96:	f24d 3014 	movw	r0, #54036	@ 0xd314
 8002b9a:	f000 feaf 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD315, 0x82);
 8002b9e:	2182      	movs	r1, #130	@ 0x82
 8002ba0:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8002ba4:	f000 feaa 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD316, 0x01);
 8002ba8:	2101      	movs	r1, #1
 8002baa:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8002bae:	f000 fea5 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD317, 0xCA);
 8002bb2:	21ca      	movs	r1, #202	@ 0xca
 8002bb4:	f24d 3017 	movw	r0, #54039	@ 0xd317
 8002bb8:	f000 fea0 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD318, 0x02);
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	f24d 3018 	movw	r0, #54040	@ 0xd318
 8002bc2:	f000 fe9b 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD319, 0x00);
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	f24d 3019 	movw	r0, #54041	@ 0xd319
 8002bcc:	f000 fe96 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD31A, 0x02);
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 8002bd6:	f000 fe91 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD31B, 0x01);
 8002bda:	2101      	movs	r1, #1
 8002bdc:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 8002be0:	f000 fe8c 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD31C, 0x02);
 8002be4:	2102      	movs	r1, #2
 8002be6:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 8002bea:	f000 fe87 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD31D, 0x34);
 8002bee:	2134      	movs	r1, #52	@ 0x34
 8002bf0:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 8002bf4:	f000 fe82 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD31E, 0x02);
 8002bf8:	2102      	movs	r1, #2
 8002bfa:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 8002bfe:	f000 fe7d 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD31F, 0x67);
 8002c02:	2167      	movs	r1, #103	@ 0x67
 8002c04:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 8002c08:	f000 fe78 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD320, 0x02);
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	f24d 3020 	movw	r0, #54048	@ 0xd320
 8002c12:	f000 fe73 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD321, 0x84);
 8002c16:	2184      	movs	r1, #132	@ 0x84
 8002c18:	f24d 3021 	movw	r0, #54049	@ 0xd321
 8002c1c:	f000 fe6e 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD322, 0x02);
 8002c20:	2102      	movs	r1, #2
 8002c22:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8002c26:	f000 fe69 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD323, 0xA4);
 8002c2a:	21a4      	movs	r1, #164	@ 0xa4
 8002c2c:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8002c30:	f000 fe64 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD324, 0x02);
 8002c34:	2102      	movs	r1, #2
 8002c36:	f24d 3024 	movw	r0, #54052	@ 0xd324
 8002c3a:	f000 fe5f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD325, 0xB7);
 8002c3e:	21b7      	movs	r1, #183	@ 0xb7
 8002c40:	f24d 3025 	movw	r0, #54053	@ 0xd325
 8002c44:	f000 fe5a 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD326, 0x02);
 8002c48:	2102      	movs	r1, #2
 8002c4a:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8002c4e:	f000 fe55 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD327, 0xCF);
 8002c52:	21cf      	movs	r1, #207	@ 0xcf
 8002c54:	f24d 3027 	movw	r0, #54055	@ 0xd327
 8002c58:	f000 fe50 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD328, 0x02);
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	f24d 3028 	movw	r0, #54056	@ 0xd328
 8002c62:	f000 fe4b 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD329, 0xDE);
 8002c66:	21de      	movs	r1, #222	@ 0xde
 8002c68:	f24d 3029 	movw	r0, #54057	@ 0xd329
 8002c6c:	f000 fe46 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD32A, 0x02);
 8002c70:	2102      	movs	r1, #2
 8002c72:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 8002c76:	f000 fe41 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD32B, 0xF2);
 8002c7a:	21f2      	movs	r1, #242	@ 0xf2
 8002c7c:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 8002c80:	f000 fe3c 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD32C, 0x02);
 8002c84:	2102      	movs	r1, #2
 8002c86:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 8002c8a:	f000 fe37 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD32D, 0xFE);
 8002c8e:	21fe      	movs	r1, #254	@ 0xfe
 8002c90:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 8002c94:	f000 fe32 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD32E, 0x03);
 8002c98:	2103      	movs	r1, #3
 8002c9a:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 8002c9e:	f000 fe2d 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD32F, 0x10);
 8002ca2:	2110      	movs	r1, #16
 8002ca4:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 8002ca8:	f000 fe28 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD330, 0x03);
 8002cac:	2103      	movs	r1, #3
 8002cae:	f24d 3030 	movw	r0, #54064	@ 0xd330
 8002cb2:	f000 fe23 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD331, 0x33);
 8002cb6:	2133      	movs	r1, #51	@ 0x33
 8002cb8:	f24d 3031 	movw	r0, #54065	@ 0xd331
 8002cbc:	f000 fe1e 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD332, 0x03);
 8002cc0:	2103      	movs	r1, #3
 8002cc2:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8002cc6:	f000 fe19 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD333, 0x6D);
 8002cca:	216d      	movs	r1, #109	@ 0x6d
 8002ccc:	f24d 3033 	movw	r0, #54067	@ 0xd333
 8002cd0:	f000 fe14 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD400, 0x00);
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 8002cda:	f000 fe0f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD401, 0x33);
 8002cde:	2133      	movs	r1, #51	@ 0x33
 8002ce0:	f24d 4001 	movw	r0, #54273	@ 0xd401
 8002ce4:	f000 fe0a 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD402, 0x00);
 8002ce8:	2100      	movs	r1, #0
 8002cea:	f24d 4002 	movw	r0, #54274	@ 0xd402
 8002cee:	f000 fe05 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD403, 0x34);
 8002cf2:	2134      	movs	r1, #52	@ 0x34
 8002cf4:	f24d 4003 	movw	r0, #54275	@ 0xd403
 8002cf8:	f000 fe00 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD404, 0x00);
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	f24d 4004 	movw	r0, #54276	@ 0xd404
 8002d02:	f000 fdfb 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD405, 0x3A);
 8002d06:	213a      	movs	r1, #58	@ 0x3a
 8002d08:	f24d 4005 	movw	r0, #54277	@ 0xd405
 8002d0c:	f000 fdf6 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD406, 0x00);
 8002d10:	2100      	movs	r1, #0
 8002d12:	f24d 4006 	movw	r0, #54278	@ 0xd406
 8002d16:	f000 fdf1 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD407, 0x4A);
 8002d1a:	214a      	movs	r1, #74	@ 0x4a
 8002d1c:	f24d 4007 	movw	r0, #54279	@ 0xd407
 8002d20:	f000 fdec 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD408, 0x00);
 8002d24:	2100      	movs	r1, #0
 8002d26:	f24d 4008 	movw	r0, #54280	@ 0xd408
 8002d2a:	f000 fde7 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD409, 0x5C);
 8002d2e:	215c      	movs	r1, #92	@ 0x5c
 8002d30:	f24d 4009 	movw	r0, #54281	@ 0xd409
 8002d34:	f000 fde2 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD40A, 0x00);
 8002d38:	2100      	movs	r1, #0
 8002d3a:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 8002d3e:	f000 fddd 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD40B, 0x81);
 8002d42:	2181      	movs	r1, #129	@ 0x81
 8002d44:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 8002d48:	f000 fdd8 	bl	80038fc <lcd_write_reg>

    lcd_write_reg(0xD40C, 0x00);
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 8002d52:	f000 fdd3 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD40D, 0xA6);
 8002d56:	21a6      	movs	r1, #166	@ 0xa6
 8002d58:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 8002d5c:	f000 fdce 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD40E, 0x00);
 8002d60:	2100      	movs	r1, #0
 8002d62:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 8002d66:	f000 fdc9 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD40F, 0xE5);
 8002d6a:	21e5      	movs	r1, #229	@ 0xe5
 8002d6c:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 8002d70:	f000 fdc4 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD410, 0x01);
 8002d74:	2101      	movs	r1, #1
 8002d76:	f24d 4010 	movw	r0, #54288	@ 0xd410
 8002d7a:	f000 fdbf 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD411, 0x13);
 8002d7e:	2113      	movs	r1, #19
 8002d80:	f24d 4011 	movw	r0, #54289	@ 0xd411
 8002d84:	f000 fdba 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD412, 0x01);
 8002d88:	2101      	movs	r1, #1
 8002d8a:	f24d 4012 	movw	r0, #54290	@ 0xd412
 8002d8e:	f000 fdb5 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD413, 0x54);
 8002d92:	2154      	movs	r1, #84	@ 0x54
 8002d94:	f24d 4013 	movw	r0, #54291	@ 0xd413
 8002d98:	f000 fdb0 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD414, 0x01);
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	f24d 4014 	movw	r0, #54292	@ 0xd414
 8002da2:	f000 fdab 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD415, 0x82);
 8002da6:	2182      	movs	r1, #130	@ 0x82
 8002da8:	f24d 4015 	movw	r0, #54293	@ 0xd415
 8002dac:	f000 fda6 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD416, 0x01);
 8002db0:	2101      	movs	r1, #1
 8002db2:	f24d 4016 	movw	r0, #54294	@ 0xd416
 8002db6:	f000 fda1 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD417, 0xCA);
 8002dba:	21ca      	movs	r1, #202	@ 0xca
 8002dbc:	f24d 4017 	movw	r0, #54295	@ 0xd417
 8002dc0:	f000 fd9c 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD418, 0x02);
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	f24d 4018 	movw	r0, #54296	@ 0xd418
 8002dca:	f000 fd97 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD419, 0x00);
 8002dce:	2100      	movs	r1, #0
 8002dd0:	f24d 4019 	movw	r0, #54297	@ 0xd419
 8002dd4:	f000 fd92 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD41A, 0x02);
 8002dd8:	2102      	movs	r1, #2
 8002dda:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 8002dde:	f000 fd8d 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD41B, 0x01);
 8002de2:	2101      	movs	r1, #1
 8002de4:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 8002de8:	f000 fd88 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD41C, 0x02);
 8002dec:	2102      	movs	r1, #2
 8002dee:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 8002df2:	f000 fd83 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD41D, 0x34);
 8002df6:	2134      	movs	r1, #52	@ 0x34
 8002df8:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 8002dfc:	f000 fd7e 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD41E, 0x02);
 8002e00:	2102      	movs	r1, #2
 8002e02:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 8002e06:	f000 fd79 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD41F, 0x67);
 8002e0a:	2167      	movs	r1, #103	@ 0x67
 8002e0c:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 8002e10:	f000 fd74 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD420, 0x02);
 8002e14:	2102      	movs	r1, #2
 8002e16:	f24d 4020 	movw	r0, #54304	@ 0xd420
 8002e1a:	f000 fd6f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD421, 0x84);
 8002e1e:	2184      	movs	r1, #132	@ 0x84
 8002e20:	f24d 4021 	movw	r0, #54305	@ 0xd421
 8002e24:	f000 fd6a 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD422, 0x02);
 8002e28:	2102      	movs	r1, #2
 8002e2a:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8002e2e:	f000 fd65 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD423, 0xA4);
 8002e32:	21a4      	movs	r1, #164	@ 0xa4
 8002e34:	f24d 4023 	movw	r0, #54307	@ 0xd423
 8002e38:	f000 fd60 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD424, 0x02);
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	f24d 4024 	movw	r0, #54308	@ 0xd424
 8002e42:	f000 fd5b 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD425, 0xB7);
 8002e46:	21b7      	movs	r1, #183	@ 0xb7
 8002e48:	f24d 4025 	movw	r0, #54309	@ 0xd425
 8002e4c:	f000 fd56 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD426, 0x02);
 8002e50:	2102      	movs	r1, #2
 8002e52:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8002e56:	f000 fd51 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD427, 0xCF);
 8002e5a:	21cf      	movs	r1, #207	@ 0xcf
 8002e5c:	f24d 4027 	movw	r0, #54311	@ 0xd427
 8002e60:	f000 fd4c 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD428, 0x02);
 8002e64:	2102      	movs	r1, #2
 8002e66:	f24d 4028 	movw	r0, #54312	@ 0xd428
 8002e6a:	f000 fd47 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD429, 0xDE);
 8002e6e:	21de      	movs	r1, #222	@ 0xde
 8002e70:	f24d 4029 	movw	r0, #54313	@ 0xd429
 8002e74:	f000 fd42 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD42A, 0x02);
 8002e78:	2102      	movs	r1, #2
 8002e7a:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 8002e7e:	f000 fd3d 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD42B, 0xF2);
 8002e82:	21f2      	movs	r1, #242	@ 0xf2
 8002e84:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 8002e88:	f000 fd38 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD42C, 0x02);
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 8002e92:	f000 fd33 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD42D, 0xFE);
 8002e96:	21fe      	movs	r1, #254	@ 0xfe
 8002e98:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 8002e9c:	f000 fd2e 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD42E, 0x03);
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 8002ea6:	f000 fd29 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD42F, 0x10);
 8002eaa:	2110      	movs	r1, #16
 8002eac:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 8002eb0:	f000 fd24 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD430, 0x03);
 8002eb4:	2103      	movs	r1, #3
 8002eb6:	f24d 4030 	movw	r0, #54320	@ 0xd430
 8002eba:	f000 fd1f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD431, 0x33);
 8002ebe:	2133      	movs	r1, #51	@ 0x33
 8002ec0:	f24d 4031 	movw	r0, #54321	@ 0xd431
 8002ec4:	f000 fd1a 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD432, 0x03);
 8002ec8:	2103      	movs	r1, #3
 8002eca:	f24d 4032 	movw	r0, #54322	@ 0xd432
 8002ece:	f000 fd15 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD433, 0x6D);
 8002ed2:	216d      	movs	r1, #109	@ 0x6d
 8002ed4:	f24d 4033 	movw	r0, #54323	@ 0xd433
 8002ed8:	f000 fd10 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD500, 0x00);
 8002edc:	2100      	movs	r1, #0
 8002ede:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 8002ee2:	f000 fd0b 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD501, 0x33);
 8002ee6:	2133      	movs	r1, #51	@ 0x33
 8002ee8:	f24d 5001 	movw	r0, #54529	@ 0xd501
 8002eec:	f000 fd06 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD502, 0x00);
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	f24d 5002 	movw	r0, #54530	@ 0xd502
 8002ef6:	f000 fd01 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD503, 0x34);
 8002efa:	2134      	movs	r1, #52	@ 0x34
 8002efc:	f24d 5003 	movw	r0, #54531	@ 0xd503
 8002f00:	f000 fcfc 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD504, 0x00);
 8002f04:	2100      	movs	r1, #0
 8002f06:	f24d 5004 	movw	r0, #54532	@ 0xd504
 8002f0a:	f000 fcf7 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD505, 0x3A);
 8002f0e:	213a      	movs	r1, #58	@ 0x3a
 8002f10:	f24d 5005 	movw	r0, #54533	@ 0xd505
 8002f14:	f000 fcf2 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD506, 0x00);
 8002f18:	2100      	movs	r1, #0
 8002f1a:	f24d 5006 	movw	r0, #54534	@ 0xd506
 8002f1e:	f000 fced 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD507, 0x4A);
 8002f22:	214a      	movs	r1, #74	@ 0x4a
 8002f24:	f24d 5007 	movw	r0, #54535	@ 0xd507
 8002f28:	f000 fce8 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD508, 0x00);
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	f24d 5008 	movw	r0, #54536	@ 0xd508
 8002f32:	f000 fce3 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD509, 0x5C);
 8002f36:	215c      	movs	r1, #92	@ 0x5c
 8002f38:	f24d 5009 	movw	r0, #54537	@ 0xd509
 8002f3c:	f000 fcde 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD50A, 0x00);
 8002f40:	2100      	movs	r1, #0
 8002f42:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8002f46:	f000 fcd9 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD50B, 0x81);
 8002f4a:	2181      	movs	r1, #129	@ 0x81
 8002f4c:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 8002f50:	f000 fcd4 	bl	80038fc <lcd_write_reg>

    lcd_write_reg(0xD50C, 0x00);
 8002f54:	2100      	movs	r1, #0
 8002f56:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 8002f5a:	f000 fccf 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD50D, 0xA6);
 8002f5e:	21a6      	movs	r1, #166	@ 0xa6
 8002f60:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 8002f64:	f000 fcca 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD50E, 0x00);
 8002f68:	2100      	movs	r1, #0
 8002f6a:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 8002f6e:	f000 fcc5 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD50F, 0xE5);
 8002f72:	21e5      	movs	r1, #229	@ 0xe5
 8002f74:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 8002f78:	f000 fcc0 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD510, 0x01);
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	f24d 5010 	movw	r0, #54544	@ 0xd510
 8002f82:	f000 fcbb 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD511, 0x13);
 8002f86:	2113      	movs	r1, #19
 8002f88:	f24d 5011 	movw	r0, #54545	@ 0xd511
 8002f8c:	f000 fcb6 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD512, 0x01);
 8002f90:	2101      	movs	r1, #1
 8002f92:	f24d 5012 	movw	r0, #54546	@ 0xd512
 8002f96:	f000 fcb1 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD513, 0x54);
 8002f9a:	2154      	movs	r1, #84	@ 0x54
 8002f9c:	f24d 5013 	movw	r0, #54547	@ 0xd513
 8002fa0:	f000 fcac 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD514, 0x01);
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	f24d 5014 	movw	r0, #54548	@ 0xd514
 8002faa:	f000 fca7 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD515, 0x82);
 8002fae:	2182      	movs	r1, #130	@ 0x82
 8002fb0:	f24d 5015 	movw	r0, #54549	@ 0xd515
 8002fb4:	f000 fca2 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD516, 0x01);
 8002fb8:	2101      	movs	r1, #1
 8002fba:	f24d 5016 	movw	r0, #54550	@ 0xd516
 8002fbe:	f000 fc9d 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD517, 0xCA);
 8002fc2:	21ca      	movs	r1, #202	@ 0xca
 8002fc4:	f24d 5017 	movw	r0, #54551	@ 0xd517
 8002fc8:	f000 fc98 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD518, 0x02);
 8002fcc:	2102      	movs	r1, #2
 8002fce:	f24d 5018 	movw	r0, #54552	@ 0xd518
 8002fd2:	f000 fc93 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD519, 0x00);
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	f24d 5019 	movw	r0, #54553	@ 0xd519
 8002fdc:	f000 fc8e 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD51A, 0x02);
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 8002fe6:	f000 fc89 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD51B, 0x01);
 8002fea:	2101      	movs	r1, #1
 8002fec:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 8002ff0:	f000 fc84 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD51C, 0x02);
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 8002ffa:	f000 fc7f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD51D, 0x34);
 8002ffe:	2134      	movs	r1, #52	@ 0x34
 8003000:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 8003004:	f000 fc7a 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD51E, 0x02);
 8003008:	2102      	movs	r1, #2
 800300a:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 800300e:	f000 fc75 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD51F, 0x67);
 8003012:	2167      	movs	r1, #103	@ 0x67
 8003014:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 8003018:	f000 fc70 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD520, 0x02);
 800301c:	2102      	movs	r1, #2
 800301e:	f24d 5020 	movw	r0, #54560	@ 0xd520
 8003022:	f000 fc6b 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD521, 0x84);
 8003026:	2184      	movs	r1, #132	@ 0x84
 8003028:	f24d 5021 	movw	r0, #54561	@ 0xd521
 800302c:	f000 fc66 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD522, 0x02);
 8003030:	2102      	movs	r1, #2
 8003032:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8003036:	f000 fc61 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD523, 0xA4);
 800303a:	21a4      	movs	r1, #164	@ 0xa4
 800303c:	f24d 5023 	movw	r0, #54563	@ 0xd523
 8003040:	f000 fc5c 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD524, 0x02);
 8003044:	2102      	movs	r1, #2
 8003046:	f24d 5024 	movw	r0, #54564	@ 0xd524
 800304a:	f000 fc57 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD525, 0xB7);
 800304e:	21b7      	movs	r1, #183	@ 0xb7
 8003050:	f24d 5025 	movw	r0, #54565	@ 0xd525
 8003054:	f000 fc52 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD526, 0x02);
 8003058:	2102      	movs	r1, #2
 800305a:	f24d 5026 	movw	r0, #54566	@ 0xd526
 800305e:	f000 fc4d 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD527, 0xCF);
 8003062:	21cf      	movs	r1, #207	@ 0xcf
 8003064:	f24d 5027 	movw	r0, #54567	@ 0xd527
 8003068:	f000 fc48 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD528, 0x02);
 800306c:	2102      	movs	r1, #2
 800306e:	f24d 5028 	movw	r0, #54568	@ 0xd528
 8003072:	f000 fc43 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD529, 0xDE);
 8003076:	21de      	movs	r1, #222	@ 0xde
 8003078:	f24d 5029 	movw	r0, #54569	@ 0xd529
 800307c:	f000 fc3e 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD52A, 0x02);
 8003080:	2102      	movs	r1, #2
 8003082:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 8003086:	f000 fc39 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD52B, 0xF2);
 800308a:	21f2      	movs	r1, #242	@ 0xf2
 800308c:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 8003090:	f000 fc34 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD52C, 0x02);
 8003094:	2102      	movs	r1, #2
 8003096:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 800309a:	f000 fc2f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD52D, 0xFE);
 800309e:	21fe      	movs	r1, #254	@ 0xfe
 80030a0:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 80030a4:	f000 fc2a 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD52E, 0x03);
 80030a8:	2103      	movs	r1, #3
 80030aa:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 80030ae:	f000 fc25 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD52F, 0x10);
 80030b2:	2110      	movs	r1, #16
 80030b4:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 80030b8:	f000 fc20 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD530, 0x03);
 80030bc:	2103      	movs	r1, #3
 80030be:	f24d 5030 	movw	r0, #54576	@ 0xd530
 80030c2:	f000 fc1b 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD531, 0x33);
 80030c6:	2133      	movs	r1, #51	@ 0x33
 80030c8:	f24d 5031 	movw	r0, #54577	@ 0xd531
 80030cc:	f000 fc16 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD532, 0x03);
 80030d0:	2103      	movs	r1, #3
 80030d2:	f24d 5032 	movw	r0, #54578	@ 0xd532
 80030d6:	f000 fc11 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD533, 0x6D);
 80030da:	216d      	movs	r1, #109	@ 0x6d
 80030dc:	f24d 5033 	movw	r0, #54579	@ 0xd533
 80030e0:	f000 fc0c 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD600, 0x00);
 80030e4:	2100      	movs	r1, #0
 80030e6:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 80030ea:	f000 fc07 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD601, 0x33);
 80030ee:	2133      	movs	r1, #51	@ 0x33
 80030f0:	f24d 6001 	movw	r0, #54785	@ 0xd601
 80030f4:	f000 fc02 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD602, 0x00);
 80030f8:	2100      	movs	r1, #0
 80030fa:	f24d 6002 	movw	r0, #54786	@ 0xd602
 80030fe:	f000 fbfd 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD603, 0x34);
 8003102:	2134      	movs	r1, #52	@ 0x34
 8003104:	f24d 6003 	movw	r0, #54787	@ 0xd603
 8003108:	f000 fbf8 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD604, 0x00);
 800310c:	2100      	movs	r1, #0
 800310e:	f24d 6004 	movw	r0, #54788	@ 0xd604
 8003112:	f000 fbf3 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD605, 0x3A);
 8003116:	213a      	movs	r1, #58	@ 0x3a
 8003118:	f24d 6005 	movw	r0, #54789	@ 0xd605
 800311c:	f000 fbee 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD606, 0x00);
 8003120:	2100      	movs	r1, #0
 8003122:	f24d 6006 	movw	r0, #54790	@ 0xd606
 8003126:	f000 fbe9 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD607, 0x4A);
 800312a:	214a      	movs	r1, #74	@ 0x4a
 800312c:	f24d 6007 	movw	r0, #54791	@ 0xd607
 8003130:	f000 fbe4 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD608, 0x00);
 8003134:	2100      	movs	r1, #0
 8003136:	f24d 6008 	movw	r0, #54792	@ 0xd608
 800313a:	f000 fbdf 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD609, 0x5C);
 800313e:	215c      	movs	r1, #92	@ 0x5c
 8003140:	f24d 6009 	movw	r0, #54793	@ 0xd609
 8003144:	f000 fbda 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD60A, 0x00);
 8003148:	2100      	movs	r1, #0
 800314a:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 800314e:	f000 fbd5 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD60B, 0x81);
 8003152:	2181      	movs	r1, #129	@ 0x81
 8003154:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 8003158:	f000 fbd0 	bl	80038fc <lcd_write_reg>

    lcd_write_reg(0xD60C, 0x00);
 800315c:	2100      	movs	r1, #0
 800315e:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 8003162:	f000 fbcb 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD60D, 0xA6);
 8003166:	21a6      	movs	r1, #166	@ 0xa6
 8003168:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 800316c:	f000 fbc6 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD60E, 0x00);
 8003170:	2100      	movs	r1, #0
 8003172:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 8003176:	f000 fbc1 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD60F, 0xE5);
 800317a:	21e5      	movs	r1, #229	@ 0xe5
 800317c:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 8003180:	f000 fbbc 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD610, 0x01);
 8003184:	2101      	movs	r1, #1
 8003186:	f24d 6010 	movw	r0, #54800	@ 0xd610
 800318a:	f000 fbb7 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD611, 0x13);
 800318e:	2113      	movs	r1, #19
 8003190:	f24d 6011 	movw	r0, #54801	@ 0xd611
 8003194:	f000 fbb2 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD612, 0x01);
 8003198:	2101      	movs	r1, #1
 800319a:	f24d 6012 	movw	r0, #54802	@ 0xd612
 800319e:	f000 fbad 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD613, 0x54);
 80031a2:	2154      	movs	r1, #84	@ 0x54
 80031a4:	f24d 6013 	movw	r0, #54803	@ 0xd613
 80031a8:	f000 fba8 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD614, 0x01);
 80031ac:	2101      	movs	r1, #1
 80031ae:	f24d 6014 	movw	r0, #54804	@ 0xd614
 80031b2:	f000 fba3 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD615, 0x82);
 80031b6:	2182      	movs	r1, #130	@ 0x82
 80031b8:	f24d 6015 	movw	r0, #54805	@ 0xd615
 80031bc:	f000 fb9e 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD616, 0x01);
 80031c0:	2101      	movs	r1, #1
 80031c2:	f24d 6016 	movw	r0, #54806	@ 0xd616
 80031c6:	f000 fb99 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD617, 0xCA);
 80031ca:	21ca      	movs	r1, #202	@ 0xca
 80031cc:	f24d 6017 	movw	r0, #54807	@ 0xd617
 80031d0:	f000 fb94 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD618, 0x02);
 80031d4:	2102      	movs	r1, #2
 80031d6:	f24d 6018 	movw	r0, #54808	@ 0xd618
 80031da:	f000 fb8f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD619, 0x00);
 80031de:	2100      	movs	r1, #0
 80031e0:	f24d 6019 	movw	r0, #54809	@ 0xd619
 80031e4:	f000 fb8a 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD61A, 0x02);
 80031e8:	2102      	movs	r1, #2
 80031ea:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 80031ee:	f000 fb85 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD61B, 0x01);
 80031f2:	2101      	movs	r1, #1
 80031f4:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 80031f8:	f000 fb80 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD61C, 0x02);
 80031fc:	2102      	movs	r1, #2
 80031fe:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 8003202:	f000 fb7b 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD61D, 0x34);
 8003206:	2134      	movs	r1, #52	@ 0x34
 8003208:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 800320c:	f000 fb76 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD61E, 0x02);
 8003210:	2102      	movs	r1, #2
 8003212:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 8003216:	f000 fb71 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD61F, 0x67);
 800321a:	2167      	movs	r1, #103	@ 0x67
 800321c:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 8003220:	f000 fb6c 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD620, 0x02);
 8003224:	2102      	movs	r1, #2
 8003226:	f24d 6020 	movw	r0, #54816	@ 0xd620
 800322a:	f000 fb67 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD621, 0x84);
 800322e:	2184      	movs	r1, #132	@ 0x84
 8003230:	f24d 6021 	movw	r0, #54817	@ 0xd621
 8003234:	f000 fb62 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD622, 0x02);
 8003238:	2102      	movs	r1, #2
 800323a:	f24d 6022 	movw	r0, #54818	@ 0xd622
 800323e:	f000 fb5d 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD623, 0xA4);
 8003242:	21a4      	movs	r1, #164	@ 0xa4
 8003244:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8003248:	f000 fb58 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD624, 0x02);
 800324c:	2102      	movs	r1, #2
 800324e:	f24d 6024 	movw	r0, #54820	@ 0xd624
 8003252:	f000 fb53 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD625, 0xB7);
 8003256:	21b7      	movs	r1, #183	@ 0xb7
 8003258:	f24d 6025 	movw	r0, #54821	@ 0xd625
 800325c:	f000 fb4e 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD626, 0x02);
 8003260:	2102      	movs	r1, #2
 8003262:	f24d 6026 	movw	r0, #54822	@ 0xd626
 8003266:	f000 fb49 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD627, 0xCF);
 800326a:	21cf      	movs	r1, #207	@ 0xcf
 800326c:	f24d 6027 	movw	r0, #54823	@ 0xd627
 8003270:	f000 fb44 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD628, 0x02);
 8003274:	2102      	movs	r1, #2
 8003276:	f24d 6028 	movw	r0, #54824	@ 0xd628
 800327a:	f000 fb3f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD629, 0xDE);
 800327e:	21de      	movs	r1, #222	@ 0xde
 8003280:	f24d 6029 	movw	r0, #54825	@ 0xd629
 8003284:	f000 fb3a 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD62A, 0x02);
 8003288:	2102      	movs	r1, #2
 800328a:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 800328e:	f000 fb35 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD62B, 0xF2);
 8003292:	21f2      	movs	r1, #242	@ 0xf2
 8003294:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 8003298:	f000 fb30 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD62C, 0x02);
 800329c:	2102      	movs	r1, #2
 800329e:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 80032a2:	f000 fb2b 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD62D, 0xFE);
 80032a6:	21fe      	movs	r1, #254	@ 0xfe
 80032a8:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 80032ac:	f000 fb26 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD62E, 0x03);
 80032b0:	2103      	movs	r1, #3
 80032b2:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 80032b6:	f000 fb21 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD62F, 0x10);
 80032ba:	2110      	movs	r1, #16
 80032bc:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 80032c0:	f000 fb1c 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD630, 0x03);
 80032c4:	2103      	movs	r1, #3
 80032c6:	f24d 6030 	movw	r0, #54832	@ 0xd630
 80032ca:	f000 fb17 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD631, 0x33);
 80032ce:	2133      	movs	r1, #51	@ 0x33
 80032d0:	f24d 6031 	movw	r0, #54833	@ 0xd631
 80032d4:	f000 fb12 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD632, 0x03);
 80032d8:	2103      	movs	r1, #3
 80032da:	f24d 6032 	movw	r0, #54834	@ 0xd632
 80032de:	f000 fb0d 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xD633, 0x6D);
 80032e2:	216d      	movs	r1, #109	@ 0x6d
 80032e4:	f24d 6033 	movw	r0, #54835	@ 0xd633
 80032e8:	f000 fb08 	bl	80038fc <lcd_write_reg>
    /* LV2 Page 0 enable */
    lcd_write_reg(0xF000, 0x55);
 80032ec:	2155      	movs	r1, #85	@ 0x55
 80032ee:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 80032f2:	f000 fb03 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 80032f6:	21aa      	movs	r1, #170	@ 0xaa
 80032f8:	f24f 0001 	movw	r0, #61441	@ 0xf001
 80032fc:	f000 fafe 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 8003300:	2152      	movs	r1, #82	@ 0x52
 8003302:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8003306:	f000 faf9 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 800330a:	2108      	movs	r1, #8
 800330c:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8003310:	f000 faf4 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xF004, 0x00);
 8003314:	2100      	movs	r1, #0
 8003316:	f24f 0004 	movw	r0, #61444	@ 0xf004
 800331a:	f000 faef 	bl	80038fc <lcd_write_reg>
    /* Display control */
    lcd_write_reg(0xB100, 0xCC);
 800331e:	21cc      	movs	r1, #204	@ 0xcc
 8003320:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8003324:	f000 faea 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB101, 0x00);
 8003328:	2100      	movs	r1, #0
 800332a:	f24b 1001 	movw	r0, #45313	@ 0xb101
 800332e:	f000 fae5 	bl	80038fc <lcd_write_reg>
    /* Source hold time */
    lcd_write_reg(0xB600, 0x05);
 8003332:	2105      	movs	r1, #5
 8003334:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8003338:	f000 fae0 	bl	80038fc <lcd_write_reg>
    /* Gate EQ control */
    lcd_write_reg(0xB700, 0x70);
 800333c:	2170      	movs	r1, #112	@ 0x70
 800333e:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8003342:	f000 fadb 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB701, 0x70);
 8003346:	2170      	movs	r1, #112	@ 0x70
 8003348:	f24b 7001 	movw	r0, #46849	@ 0xb701
 800334c:	f000 fad6 	bl	80038fc <lcd_write_reg>
    /* Source EQ control (Mode 2) */
    lcd_write_reg(0xB800, 0x01);
 8003350:	2101      	movs	r1, #1
 8003352:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8003356:	f000 fad1 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB801, 0x03);
 800335a:	2103      	movs	r1, #3
 800335c:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8003360:	f000 facc 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB802, 0x03);
 8003364:	2103      	movs	r1, #3
 8003366:	f64b 0002 	movw	r0, #47106	@ 0xb802
 800336a:	f000 fac7 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xB803, 0x03);
 800336e:	2103      	movs	r1, #3
 8003370:	f64b 0003 	movw	r0, #47107	@ 0xb803
 8003374:	f000 fac2 	bl	80038fc <lcd_write_reg>
    /* Inversion mode (2-dot) */
    lcd_write_reg(0xBC00, 0x02);
 8003378:	2102      	movs	r1, #2
 800337a:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 800337e:	f000 fabd 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x00);
 8003382:	2100      	movs	r1, #0
 8003384:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8003388:	f000 fab8 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 800338c:	2100      	movs	r1, #0
 800338e:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8003392:	f000 fab3 	bl	80038fc <lcd_write_reg>
    /* Timing control 4H w/ 4-delay */
    lcd_write_reg(0xC900, 0xD0);
 8003396:	21d0      	movs	r1, #208	@ 0xd0
 8003398:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 800339c:	f000 faae 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xC901, 0x02);
 80033a0:	2102      	movs	r1, #2
 80033a2:	f64c 1001 	movw	r0, #51457	@ 0xc901
 80033a6:	f000 faa9 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xC902, 0x50);
 80033aa:	2150      	movs	r1, #80	@ 0x50
 80033ac:	f64c 1002 	movw	r0, #51458	@ 0xc902
 80033b0:	f000 faa4 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xC903, 0x50);
 80033b4:	2150      	movs	r1, #80	@ 0x50
 80033b6:	f64c 1003 	movw	r0, #51459	@ 0xc903
 80033ba:	f000 fa9f 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0xC904, 0x50);
 80033be:	2150      	movs	r1, #80	@ 0x50
 80033c0:	f64c 1004 	movw	r0, #51460	@ 0xc904
 80033c4:	f000 fa9a 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0x3500, 0x00);
 80033c8:	2100      	movs	r1, #0
 80033ca:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 80033ce:	f000 fa95 	bl	80038fc <lcd_write_reg>
    lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 80033d2:	2155      	movs	r1, #85	@ 0x55
 80033d4:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 80033d8:	f000 fa90 	bl	80038fc <lcd_write_reg>
    lcd_wr_regno(0x1100);
 80033dc:	f44f 5088 	mov.w	r0, #4352	@ 0x1100
 80033e0:	f000 fa78 	bl	80038d4 <lcd_wr_regno>
    HAL_Delay(1);
 80033e4:	2001      	movs	r0, #1
 80033e6:	f001 fa1f 	bl	8004828 <HAL_Delay>
    lcd_wr_regno(0x2900);
 80033ea:	f44f 5024 	mov.w	r0, #10496	@ 0x2900
 80033ee:	f000 fa71 	bl	80038d4 <lcd_wr_regno>
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <lcd_ex_ili9806_reginit>:
 * @brief       ILI9806寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_ili9806_reginit(void)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
 80033fa:	20ff      	movs	r0, #255	@ 0xff
 80033fc:	f000 fa6a 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8003400:	20ff      	movs	r0, #255	@ 0xff
 8003402:	f000 fa53 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x98);
 8003406:	2098      	movs	r0, #152	@ 0x98
 8003408:	f000 fa50 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x06);
 800340c:	2006      	movs	r0, #6
 800340e:	f000 fa4d 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xBC); /* GIP 1 */
 8003412:	20bc      	movs	r0, #188	@ 0xbc
 8003414:	f000 fa5e 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8003418:	2001      	movs	r0, #1
 800341a:	f000 fa47 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0F);
 800341e:	200f      	movs	r0, #15
 8003420:	f000 fa44 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x61);
 8003424:	2061      	movs	r0, #97	@ 0x61
 8003426:	f000 fa41 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xFF);
 800342a:	20ff      	movs	r0, #255	@ 0xff
 800342c:	f000 fa3e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);
 8003430:	2001      	movs	r0, #1
 8003432:	f000 fa3b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);
 8003436:	2001      	movs	r0, #1
 8003438:	f000 fa38 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0B);
 800343c:	200b      	movs	r0, #11
 800343e:	f000 fa35 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x10);
 8003442:	2010      	movs	r0, #16
 8003444:	f000 fa32 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x37);
 8003448:	2037      	movs	r0, #55	@ 0x37
 800344a:	f000 fa2f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x63);
 800344e:	2063      	movs	r0, #99	@ 0x63
 8003450:	f000 fa2c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003454:	20ff      	movs	r0, #255	@ 0xff
 8003456:	f000 fa29 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xFF);
 800345a:	20ff      	movs	r0, #255	@ 0xff
 800345c:	f000 fa26 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);
 8003460:	2001      	movs	r0, #1
 8003462:	f000 fa23 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);
 8003466:	2001      	movs	r0, #1
 8003468:	f000 fa20 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800346c:	2000      	movs	r0, #0
 800346e:	f000 fa1d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8003472:	2000      	movs	r0, #0
 8003474:	f000 fa1a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003478:	20ff      	movs	r0, #255	@ 0xff
 800347a:	f000 fa17 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x52);
 800347e:	2052      	movs	r0, #82	@ 0x52
 8003480:	f000 fa14 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);
 8003484:	2001      	movs	r0, #1
 8003486:	f000 fa11 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800348a:	2000      	movs	r0, #0
 800348c:	f000 fa0e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x40);
 8003490:	2040      	movs	r0, #64	@ 0x40
 8003492:	f000 fa0b 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xBD); /* GIP 2 */
 8003496:	20bd      	movs	r0, #189	@ 0xbd
 8003498:	f000 fa1c 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x01);
 800349c:	2001      	movs	r0, #1
 800349e:	f000 fa05 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x23);
 80034a2:	2023      	movs	r0, #35	@ 0x23
 80034a4:	f000 fa02 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x45);
 80034a8:	2045      	movs	r0, #69	@ 0x45
 80034aa:	f000 f9ff 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x67);
 80034ae:	2067      	movs	r0, #103	@ 0x67
 80034b0:	f000 f9fc 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);
 80034b4:	2001      	movs	r0, #1
 80034b6:	f000 f9f9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x23);
 80034ba:	2023      	movs	r0, #35	@ 0x23
 80034bc:	f000 f9f6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x45);
 80034c0:	2045      	movs	r0, #69	@ 0x45
 80034c2:	f000 f9f3 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x67);
 80034c6:	2067      	movs	r0, #103	@ 0x67
 80034c8:	f000 f9f0 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xBE); /* GIP 3 */
 80034cc:	20be      	movs	r0, #190	@ 0xbe
 80034ce:	f000 fa01 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80034d2:	2000      	movs	r0, #0
 80034d4:	f000 f9ea 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);
 80034d8:	2001      	movs	r0, #1
 80034da:	f000 f9e7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xAB);
 80034de:	20ab      	movs	r0, #171	@ 0xab
 80034e0:	f000 f9e4 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x60);
 80034e4:	2060      	movs	r0, #96	@ 0x60
 80034e6:	f000 f9e1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x22);
 80034ea:	2022      	movs	r0, #34	@ 0x22
 80034ec:	f000 f9de 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x22);
 80034f0:	2022      	movs	r0, #34	@ 0x22
 80034f2:	f000 f9db 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x22);
 80034f6:	2022      	movs	r0, #34	@ 0x22
 80034f8:	f000 f9d8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x22);
 80034fc:	2022      	movs	r0, #34	@ 0x22
 80034fe:	f000 f9d5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x22);
 8003502:	2022      	movs	r0, #34	@ 0x22
 8003504:	f000 f9d2 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xC7); /* VCOM Control */
 8003508:	20c7      	movs	r0, #199	@ 0xc7
 800350a:	f000 f9e3 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x36);
 800350e:	2036      	movs	r0, #54	@ 0x36
 8003510:	f000 f9cc 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
 8003514:	20ed      	movs	r0, #237	@ 0xed
 8003516:	f000 f9dd 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x7F);
 800351a:	207f      	movs	r0, #127	@ 0x7f
 800351c:	f000 f9c6 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0F);
 8003520:	200f      	movs	r0, #15
 8003522:	f000 f9c3 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
 8003526:	20c0      	movs	r0, #192	@ 0xc0
 8003528:	f000 f9d4 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 800352c:	200f      	movs	r0, #15
 800352e:	f000 f9bd 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0B);
 8003532:	200b      	movs	r0, #11
 8003534:	f000 f9ba 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0A);  /* VGH 15V,VGLO-10V */
 8003538:	200a      	movs	r0, #10
 800353a:	f000 f9b7 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
 800353e:	20fc      	movs	r0, #252	@ 0xfc
 8003540:	f000 f9c8 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x08);
 8003544:	2008      	movs	r0, #8
 8003546:	f000 f9b1 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0XDF); 
 800354a:	20df      	movs	r0, #223	@ 0xdf
 800354c:	f000 f9c2 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8003550:	2000      	movs	r0, #0
 8003552:	f000 f9ab 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8003556:	2000      	movs	r0, #0
 8003558:	f000 f9a8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800355c:	2000      	movs	r0, #0
 800355e:	f000 f9a5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8003562:	2000      	movs	r0, #0
 8003564:	f000 f9a2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8003568:	2000      	movs	r0, #0
 800356a:	f000 f99f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x20);
 800356e:	2020      	movs	r0, #32
 8003570:	f000 f99c 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
 8003574:	20f3      	movs	r0, #243	@ 0xf3
 8003576:	f000 f9ad 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x74);
 800357a:	2074      	movs	r0, #116	@ 0x74
 800357c:	f000 f996 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Inversion Type */
 8003580:	20b4      	movs	r0, #180	@ 0xb4
 8003582:	f000 f9a7 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02 */
 8003586:	2000      	movs	r0, #0
 8003588:	f000 f990 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 800358c:	2000      	movs	r0, #0
 800358e:	f000 f98d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 8003592:	2000      	movs	r0, #0
 8003594:	f000 f98a 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xF7); /* Resolution Control */
 8003598:	20f7      	movs	r0, #247	@ 0xf7
 800359a:	f000 f99b 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x82);  /* 480*800 */
 800359e:	2082      	movs	r0, #130	@ 0x82
 80035a0:	f000 f984 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB1); /* FRAME RATE Setting */
 80035a4:	20b1      	movs	r0, #177	@ 0xb1
 80035a6:	f000 f995 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80035aa:	2000      	movs	r0, #0
 80035ac:	f000 f97e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x13);
 80035b0:	2013      	movs	r0, #19
 80035b2:	f000 f97b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x13); 
 80035b6:	2013      	movs	r0, #19
 80035b8:	f000 f978 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
 80035bc:	20f2      	movs	r0, #242	@ 0xf2
 80035be:	f000 f989 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x80);
 80035c2:	2080      	movs	r0, #128	@ 0x80
 80035c4:	f000 f972 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x04);
 80035c8:	2004      	movs	r0, #4
 80035ca:	f000 f96f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x40);
 80035ce:	2040      	movs	r0, #64	@ 0x40
 80035d0:	f000 f96c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x28);
 80035d4:	2028      	movs	r0, #40	@ 0x28
 80035d6:	f000 f969 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
 80035da:	20c1      	movs	r0, #193	@ 0xc1
 80035dc:	f000 f97a 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x17);
 80035e0:	2017      	movs	r0, #23
 80035e2:	f000 f963 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMP */
 80035e6:	2088      	movs	r0, #136	@ 0x88
 80035e8:	f000 f960 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMN */
 80035ec:	2088      	movs	r0, #136	@ 0x88
 80035ee:	f000 f95d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x20);
 80035f2:	2020      	movs	r0, #32
 80035f4:	f000 f95a 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Positive Gamma Control */
 80035f8:	20e0      	movs	r0, #224	@ 0xe0
 80035fa:	f000 f96b 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 80035fe:	2000      	movs	r0, #0
 8003600:	f000 f954 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P2 */
 8003604:	200a      	movs	r0, #10
 8003606:	f000 f951 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x12);  /* P3 */
 800360a:	2012      	movs	r0, #18
 800360c:	f000 f94e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x10);  /* P4 */
 8003610:	2010      	movs	r0, #16
 8003612:	f000 f94b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 8003616:	200e      	movs	r0, #14
 8003618:	f000 f948 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x20);  /* P6 */
 800361c:	2020      	movs	r0, #32
 800361e:	f000 f945 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xCC);  /* P7 */
 8003622:	20cc      	movs	r0, #204	@ 0xcc
 8003624:	f000 f942 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x07);  /* P8 */
 8003628:	2007      	movs	r0, #7
 800362a:	f000 f93f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 800362e:	2006      	movs	r0, #6
 8003630:	f000 f93c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P10 */
 8003634:	200b      	movs	r0, #11
 8003636:	f000 f939 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P11 */
 800363a:	200e      	movs	r0, #14
 800363c:	f000 f936 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P12 */
 8003640:	200f      	movs	r0, #15
 8003642:	f000 f933 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P13 */
 8003646:	200d      	movs	r0, #13
 8003648:	f000 f930 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 800364c:	2015      	movs	r0, #21
 800364e:	f000 f92d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x10);  /* P15 */
 8003652:	2010      	movs	r0, #16
 8003654:	f000 f92a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 8003658:	2000      	movs	r0, #0
 800365a:	f000 f927 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xE1); /* Negative Gamma Correction */
 800365e:	20e1      	movs	r0, #225	@ 0xe1
 8003660:	f000 f938 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 8003664:	2000      	movs	r0, #0
 8003666:	f000 f921 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P2 */
 800366a:	200b      	movs	r0, #11
 800366c:	f000 f91e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x13);  /* P3 */
 8003670:	2013      	movs	r0, #19
 8003672:	f000 f91b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P4 */
 8003676:	200d      	movs	r0, #13
 8003678:	f000 f918 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 800367c:	200e      	movs	r0, #14
 800367e:	f000 f915 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x1B);  /* P6 */
 8003682:	201b      	movs	r0, #27
 8003684:	f000 f912 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x71);  /* P7 */
 8003688:	2071      	movs	r0, #113	@ 0x71
 800368a:	f000 f90f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x06);  /* P8 */
 800368e:	2006      	movs	r0, #6
 8003690:	f000 f90c 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 8003694:	2006      	movs	r0, #6
 8003696:	f000 f909 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P10 */
 800369a:	200a      	movs	r0, #10
 800369c:	f000 f906 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P11 */
 80036a0:	200f      	movs	r0, #15
 80036a2:	f000 f903 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P12 */
 80036a6:	200e      	movs	r0, #14
 80036a8:	f000 f900 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P13 */
 80036ac:	200f      	movs	r0, #15
 80036ae:	f000 f8fd 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 80036b2:	2015      	movs	r0, #21
 80036b4:	f000 f8fa 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x0C);  /* P15 */
 80036b8:	200c      	movs	r0, #12
 80036ba:	f000 f8f7 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 80036be:	2000      	movs	r0, #0
 80036c0:	f000 f8f4 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0x2a);   
 80036c4:	202a      	movs	r0, #42	@ 0x2a
 80036c6:	f000 f905 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80036ca:	2000      	movs	r0, #0
 80036cc:	f000 f8ee 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80036d0:	2000      	movs	r0, #0
 80036d2:	f000 f8eb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);
 80036d6:	2001      	movs	r0, #1
 80036d8:	f000 f8e8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xdf);
 80036dc:	20df      	movs	r0, #223	@ 0xdf
 80036de:	f000 f8e5 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0x2b);   
 80036e2:	202b      	movs	r0, #43	@ 0x2b
 80036e4:	f000 f8f6 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80036e8:	2000      	movs	r0, #0
 80036ea:	f000 f8df 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80036ee:	2000      	movs	r0, #0
 80036f0:	f000 f8dc 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x03);
 80036f4:	2003      	movs	r0, #3
 80036f6:	f000 f8d9 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x1f);
 80036fa:	201f      	movs	r0, #31
 80036fc:	f000 f8d6 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0x3A); /* Pixel Format */
 8003700:	203a      	movs	r0, #58	@ 0x3a
 8003702:	f000 f8e7 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8003706:	2055      	movs	r0, #85	@ 0x55
 8003708:	f000 f8d0 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0x36); /* Memory Access Control */
 800370c:	2036      	movs	r0, #54	@ 0x36
 800370e:	f000 f8e1 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02-180 */
 8003712:	2000      	movs	r0, #0
 8003714:	f000 f8ca 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0x11);
 8003718:	2011      	movs	r0, #17
 800371a:	f000 f8db 	bl	80038d4 <lcd_wr_regno>
    HAL_Delay(120);
 800371e:	2078      	movs	r0, #120	@ 0x78
 8003720:	f001 f882 	bl	8004828 <HAL_Delay>
    lcd_wr_regno(0x29);  
 8003724:	2029      	movs	r0, #41	@ 0x29
 8003726:	f000 f8d5 	bl	80038d4 <lcd_wr_regno>
    HAL_Delay(20);
 800372a:	2014      	movs	r0, #20
 800372c:	f001 f87c 	bl	8004828 <HAL_Delay>
    lcd_wr_regno(0x2C);
 8003730:	202c      	movs	r0, #44	@ 0x2c
 8003732:	f000 f8cf 	bl	80038d4 <lcd_wr_regno>
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}

0800373a <lcd_ex_ssd1963_reginit>:
 * @brief       SSD1963寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_ssd1963_reginit(void)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
 800373e:	20e2      	movs	r0, #226	@ 0xe2
 8003740:	f000 f8c8 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x1D);  /* 参数1 */
 8003744:	201d      	movs	r0, #29
 8003746:	f000 f8b1 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x02);  /* 参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 800374a:	2002      	movs	r0, #2
 800374c:	f000 f8ae 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x04);  /* 参数3 Validate M and N values */
 8003750:	2004      	movs	r0, #4
 8003752:	f000 f8ab 	bl	80038ac <lcd_wr_data>
    HAL_Delay(1);
 8003756:	2001      	movs	r0, #1
 8003758:	f001 f866 	bl	8004828 <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command */
 800375c:	20e0      	movs	r0, #224	@ 0xe0
 800375e:	f000 f8b9 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x01);  /*  enable PLL */
 8003762:	2001      	movs	r0, #1
 8003764:	f000 f8a2 	bl	80038ac <lcd_wr_data>
    HAL_Delay(10);
 8003768:	200a      	movs	r0, #10
 800376a:	f001 f85d 	bl	8004828 <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command again */
 800376e:	20e0      	movs	r0, #224	@ 0xe0
 8003770:	f000 f8b0 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x03);  /*  now, use PLL output as system clock */
 8003774:	2003      	movs	r0, #3
 8003776:	f000 f899 	bl	80038ac <lcd_wr_data>
    HAL_Delay(12);
 800377a:	200c      	movs	r0, #12
 800377c:	f001 f854 	bl	8004828 <HAL_Delay>
    lcd_wr_regno(0x01); /* 软复位 */
 8003780:	2001      	movs	r0, #1
 8003782:	f000 f8a7 	bl	80038d4 <lcd_wr_regno>
    HAL_Delay(10);
 8003786:	200a      	movs	r0, #10
 8003788:	f001 f84e 	bl	8004828 <HAL_Delay>

    lcd_wr_regno(0xE6); /* 设置像素频率,33Mhz */
 800378c:	20e6      	movs	r0, #230	@ 0xe6
 800378e:	f000 f8a1 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x2F);
 8003792:	202f      	movs	r0, #47	@ 0x2f
 8003794:	f000 f88a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003798:	20ff      	movs	r0, #255	@ 0xff
 800379a:	f000 f887 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xFF);
 800379e:	20ff      	movs	r0, #255	@ 0xff
 80037a0:	f000 f884 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB0); /* 设置LCD模式 */
 80037a4:	20b0      	movs	r0, #176	@ 0xb0
 80037a6:	f000 f895 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 24位模式 */
 80037aa:	2020      	movs	r0, #32
 80037ac:	f000 f87e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);  /* TFT 模式 */
 80037b0:	2000      	movs	r0, #0
 80037b2:	f000 f87b 	bl	80038ac <lcd_wr_data>

    lcd_wr_data((SSD_HOR_RESOLUTION - 1) >> 8); /* 设置LCD水平像素 */
 80037b6:	2003      	movs	r0, #3
 80037b8:	f000 f878 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(SSD_HOR_RESOLUTION - 1);
 80037bc:	f240 301f 	movw	r0, #799	@ 0x31f
 80037c0:	f000 f874 	bl	80038ac <lcd_wr_data>
    lcd_wr_data((SSD_VER_RESOLUTION - 1) >> 8); /* 设置LCD垂直像素 */
 80037c4:	2001      	movs	r0, #1
 80037c6:	f000 f871 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(SSD_VER_RESOLUTION - 1);
 80037ca:	f240 10df 	movw	r0, #479	@ 0x1df
 80037ce:	f000 f86d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);  /* RGB序列 */
 80037d2:	2000      	movs	r0, #0
 80037d4:	f000 f86a 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Set horizontal period */
 80037d8:	20b4      	movs	r0, #180	@ 0xb4
 80037da:	f000 f87b 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data((SSD_HT - 1) >> 8);
 80037de:	2004      	movs	r0, #4
 80037e0:	f000 f864 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(SSD_HT - 1);
 80037e4:	f240 401f 	movw	r0, #1055	@ 0x41f
 80037e8:	f000 f860 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(SSD_HPS >> 8);
 80037ec:	2000      	movs	r0, #0
 80037ee:	f000 f85d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(SSD_HPS);
 80037f2:	202e      	movs	r0, #46	@ 0x2e
 80037f4:	f000 f85a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(SSD_HOR_PULSE_WIDTH - 1);
 80037f8:	2000      	movs	r0, #0
 80037fa:	f000 f857 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 80037fe:	2000      	movs	r0, #0
 8003800:	f000 f854 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8003804:	2000      	movs	r0, #0
 8003806:	f000 f851 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800380a:	2000      	movs	r0, #0
 800380c:	f000 f84e 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xB6); /* Set vertical perio */
 8003810:	20b6      	movs	r0, #182	@ 0xb6
 8003812:	f000 f85f 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data((SSD_VT - 1) >> 8);
 8003816:	2002      	movs	r0, #2
 8003818:	f000 f848 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(SSD_VT - 1);
 800381c:	f44f 7003 	mov.w	r0, #524	@ 0x20c
 8003820:	f000 f844 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(SSD_VPS >> 8);
 8003824:	2000      	movs	r0, #0
 8003826:	f000 f841 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(SSD_VPS);
 800382a:	2017      	movs	r0, #23
 800382c:	f000 f83e 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(SSD_VER_FRONT_PORCH - 1);
 8003830:	2015      	movs	r0, #21
 8003832:	f000 f83b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 8003836:	2000      	movs	r0, #0
 8003838:	f000 f838 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);
 800383c:	2000      	movs	r0, #0
 800383e:	f000 f835 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xF0); /* 设置SSD1963与CPU接口为16bit */
 8003842:	20f0      	movs	r0, #240	@ 0xf0
 8003844:	f000 f846 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* 16-bit(565 format) data for 16bpp */
 8003848:	2003      	movs	r0, #3
 800384a:	f000 f82f 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0x29); /* 开启显示 */
 800384e:	2029      	movs	r0, #41	@ 0x29
 8003850:	f000 f840 	bl	80038d4 <lcd_wr_regno>
    /* 设置PWM输出  背光通过占空比可调 */
    lcd_wr_regno(0xD0); /* 设置自动白平衡DBC */
 8003854:	20d0      	movs	r0, #208	@ 0xd0
 8003856:	f000 f83d 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* disable */
 800385a:	2000      	movs	r0, #0
 800385c:	f000 f826 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xBE); /* 配置PWM输出 */
 8003860:	20be      	movs	r0, #190	@ 0xbe
 8003862:	f000 f837 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x05);  /* 1设置PWM频率 */
 8003866:	2005      	movs	r0, #5
 8003868:	f000 f820 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xFE);  /* 2设置PWM占空比 */
 800386c:	20fe      	movs	r0, #254	@ 0xfe
 800386e:	f000 f81d 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);  /* 3设置C */
 8003872:	2001      	movs	r0, #1
 8003874:	f000 f81a 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);  /* 4设置D */
 8003878:	2000      	movs	r0, #0
 800387a:	f000 f817 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);  /* 5设置E */
 800387e:	2000      	movs	r0, #0
 8003880:	f000 f814 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);  /* 6设置F */
 8003884:	2000      	movs	r0, #0
 8003886:	f000 f811 	bl	80038ac <lcd_wr_data>

    lcd_wr_regno(0xB8); /* 设置GPIO配置 */
 800388a:	20b8      	movs	r0, #184	@ 0xb8
 800388c:	f000 f822 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* 2个IO口设置成输出 */
 8003890:	2003      	movs	r0, #3
 8003892:	f000 f80b 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);  /* GPIO使用正常的IO功能 */
 8003896:	2001      	movs	r0, #1
 8003898:	f000 f808 	bl	80038ac <lcd_wr_data>
    lcd_wr_regno(0xBA);
 800389c:	20ba      	movs	r0, #186	@ 0xba
 800389e:	f000 f819 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x01);  /* GPIO[1:0]=01,控制LCD方向 */
 80038a2:	2001      	movs	r0, #1
 80038a4:	f000 f802 	bl	80038ac <lcd_wr_data>
}
 80038a8:	bf00      	nop
 80038aa:	bd80      	pop	{r7, pc}

080038ac <lcd_wr_data>:
 * @brief       LCD写数据
 * @param       data: 要写入的数据
 * @retval      无
 */
void lcd_wr_data(volatile uint16_t data)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	80fb      	strh	r3, [r7, #6]
    data = data;            /* 使用-O2优化的时候,必须插入的延时 */
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 80038bc:	4b04      	ldr	r3, [pc, #16]	@ (80038d0 <lcd_wr_data+0x24>)
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	b292      	uxth	r2, r2
 80038c2:	805a      	strh	r2, [r3, #2]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	6007fffe 	.word	0x6007fffe

080038d4 <lcd_wr_regno>:
 * @brief       LCD写寄存器编号/地址函数
 * @param       regno: 寄存器编号/地址
 * @retval      无
 */
void lcd_wr_regno(volatile uint16_t regno)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	80fb      	strh	r3, [r7, #6]
    regno = regno;          /* 使用-O2优化的时候,必须插入的延时 */
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG = regno;   /* 写入要写的寄存器序号 */
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <lcd_wr_regno+0x24>)
 80038e6:	88fa      	ldrh	r2, [r7, #6]
 80038e8:	b292      	uxth	r2, r2
 80038ea:	801a      	strh	r2, [r3, #0]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	6007fffe 	.word	0x6007fffe

080038fc <lcd_write_reg>:
 * @param       regno:寄存器编号/地址
 * @param       data:要写入的数据
 * @retval      无
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	460a      	mov	r2, r1
 8003906:	80fb      	strh	r3, [r7, #6]
 8003908:	4613      	mov	r3, r2
 800390a:	80bb      	strh	r3, [r7, #4]
    LCD->LCD_REG = regno;   /* 写入要写的寄存器序号 */
 800390c:	4a05      	ldr	r2, [pc, #20]	@ (8003924 <lcd_write_reg+0x28>)
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	8013      	strh	r3, [r2, #0]
    LCD->LCD_RAM = data;    /* 写入数据 */
 8003912:	4a04      	ldr	r2, [pc, #16]	@ (8003924 <lcd_write_reg+0x28>)
 8003914:	88bb      	ldrh	r3, [r7, #4]
 8003916:	8053      	strh	r3, [r2, #2]
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	6007fffe 	.word	0x6007fffe

08003928 <lcd_opt_delay>:
 * @brief       LCD延时函数,仅用于部分在mdk -O1时间优化时需要设置的地方
 * @param       t:延时的数值
 * @retval      无
 */
static void lcd_opt_delay(uint32_t i)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
    while (i--); /* 使用AC6时空循环可能被优化,可使用while(1) __asm volatile(""); */
 8003930:	bf00      	nop
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	1e5a      	subs	r2, r3, #1
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1fa      	bne.n	8003932 <lcd_opt_delay+0xa>
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <lcd_rd_data>:
 * @brief       LCD读数据
 * @param       无
 * @retval      读取到的数据
 */
static uint16_t lcd_rd_data(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
    volatile uint16_t ram;  /* 防止被优化 */
    lcd_opt_delay(2);
 8003952:	2002      	movs	r0, #2
 8003954:	f7ff ffe8 	bl	8003928 <lcd_opt_delay>
    ram = LCD->LCD_RAM;
 8003958:	4b04      	ldr	r3, [pc, #16]	@ (800396c <lcd_rd_data+0x20>)
 800395a:	885b      	ldrh	r3, [r3, #2]
 800395c:	b29b      	uxth	r3, r3
 800395e:	80fb      	strh	r3, [r7, #6]
    return ram;
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	b29b      	uxth	r3, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	6007fffe 	.word	0x6007fffe

08003970 <lcd_write_ram_prepare>:
 * @brief       准备写GRAM
 * @param       无
 * @retval      无
 */
void lcd_write_ram_prepare(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
    LCD->LCD_REG = lcddev.wramcmd;
 8003974:	4b04      	ldr	r3, [pc, #16]	@ (8003988 <lcd_write_ram_prepare+0x18>)
 8003976:	4a05      	ldr	r2, [pc, #20]	@ (800398c <lcd_write_ram_prepare+0x1c>)
 8003978:	8912      	ldrh	r2, [r2, #8]
 800397a:	801a      	strh	r2, [r3, #0]
}
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	6007fffe 	.word	0x6007fffe
 800398c:	200000d0 	.word	0x200000d0

08003990 <lcd_set_cursor>:
 * @brief       设置光标位置(对RGB屏无效)
 * @param       x,y: 坐标
 * @retval      无
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	460a      	mov	r2, r1
 800399a:	80fb      	strh	r3, [r7, #6]
 800399c:	4613      	mov	r3, r2
 800399e:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0x1963)
 80039a0:	4b65      	ldr	r3, [pc, #404]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 80039a2:	889b      	ldrh	r3, [r3, #4]
 80039a4:	f641 1263 	movw	r2, #6499	@ 0x1963
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d167      	bne.n	8003a7c <lcd_set_cursor+0xec>
    {
        if (lcddev.dir == 0)    /* 竖屏模式, x坐标需要变换 */
 80039ac:	4b62      	ldr	r3, [pc, #392]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 80039ae:	799b      	ldrb	r3, [r3, #6]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d11e      	bne.n	80039f2 <lcd_set_cursor+0x62>
        {
            x = lcddev.width - 1 - x;
 80039b4:	4b60      	ldr	r3, [pc, #384]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 80039b6:	881a      	ldrh	r2, [r3, #0]
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 80039c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 80039c4:	895b      	ldrh	r3, [r3, #10]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff ff84 	bl	80038d4 <lcd_wr_regno>
            lcd_wr_data(0);
 80039cc:	2000      	movs	r0, #0
 80039ce:	f7ff ff6d 	bl	80038ac <lcd_wr_data>
            lcd_wr_data(0);
 80039d2:	2000      	movs	r0, #0
 80039d4:	f7ff ff6a 	bl	80038ac <lcd_wr_data>
            lcd_wr_data(x >> 8);
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	b29b      	uxth	r3, r3
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff ff64 	bl	80038ac <lcd_wr_data>
            lcd_wr_data(x & 0xFF);
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ff5e 	bl	80038ac <lcd_wr_data>
 80039f0:	e021      	b.n	8003a36 <lcd_set_cursor+0xa6>
        }
        else                    /* 横屏模式 */
        {
            lcd_wr_regno(lcddev.setxcmd);
 80039f2:	4b51      	ldr	r3, [pc, #324]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 80039f4:	895b      	ldrh	r3, [r3, #10]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ff6c 	bl	80038d4 <lcd_wr_regno>
            lcd_wr_data(x >> 8);
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ff52 	bl	80038ac <lcd_wr_data>
            lcd_wr_data(x & 0xFF);
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff ff4c 	bl	80038ac <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) >> 8);
 8003a14:	4b48      	ldr	r3, [pc, #288]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	121b      	asrs	r3, r3, #8
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff44 	bl	80038ac <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) & 0xFF);
 8003a24:	4b44      	ldr	r3, [pc, #272]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff3b 	bl	80038ac <lcd_wr_data>
        }

        lcd_wr_regno(lcddev.setycmd);
 8003a36:	4b40      	ldr	r3, [pc, #256]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 8003a38:	899b      	ldrh	r3, [r3, #12]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff ff4a 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8003a40:	88bb      	ldrh	r3, [r7, #4]
 8003a42:	0a1b      	lsrs	r3, r3, #8
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff ff30 	bl	80038ac <lcd_wr_data>
        lcd_wr_data(y & 0xFF);
 8003a4c:	88bb      	ldrh	r3, [r7, #4]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff ff2a 	bl	80038ac <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8003a58:	4b37      	ldr	r3, [pc, #220]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 8003a5a:	885b      	ldrh	r3, [r3, #2]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	121b      	asrs	r3, r3, #8
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff ff22 	bl	80038ac <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0xFF);
 8003a68:	4b33      	ldr	r3, [pc, #204]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 8003a6a:	885b      	ldrh	r3, [r3, #2]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff19 	bl	80038ac <lcd_wr_data>
        lcd_wr_data(x & 0xFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0xFF);
    }
}
 8003a7a:	e058      	b.n	8003b2e <lcd_set_cursor+0x19e>
    else if (lcddev.id == 0x5510)
 8003a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 8003a7e:	889b      	ldrh	r3, [r3, #4]
 8003a80:	f245 5210 	movw	r2, #21776	@ 0x5510
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d130      	bne.n	8003aea <lcd_set_cursor+0x15a>
        lcd_wr_regno(lcddev.setxcmd);
 8003a88:	4b2b      	ldr	r3, [pc, #172]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 8003a8a:	895b      	ldrh	r3, [r3, #10]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff ff21 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff07 	bl	80038ac <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 8003a9e:	4b26      	ldr	r3, [pc, #152]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 8003aa0:	895b      	ldrh	r3, [r3, #10]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ff14 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data(x & 0xFF);
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fefa 	bl	80038ac <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8003ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 8003aba:	899b      	ldrh	r3, [r3, #12]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ff09 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8003ac2:	88bb      	ldrh	r3, [r7, #4]
 8003ac4:	0a1b      	lsrs	r3, r3, #8
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff feef 	bl	80038ac <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 8003ace:	4b1a      	ldr	r3, [pc, #104]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 8003ad0:	899b      	ldrh	r3, [r3, #12]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fefc 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data(y & 0xFF);
 8003adc:	88bb      	ldrh	r3, [r7, #4]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fee2 	bl	80038ac <lcd_wr_data>
}
 8003ae8:	e021      	b.n	8003b2e <lcd_set_cursor+0x19e>
        lcd_wr_regno(lcddev.setxcmd);
 8003aea:	4b13      	ldr	r3, [pc, #76]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 8003aec:	895b      	ldrh	r3, [r3, #10]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fef0 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fed6 	bl	80038ac <lcd_wr_data>
        lcd_wr_data(x & 0xFF);
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff fed0 	bl	80038ac <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <lcd_set_cursor+0x1a8>)
 8003b0e:	899b      	ldrh	r3, [r3, #12]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff fedf 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8003b16:	88bb      	ldrh	r3, [r7, #4]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fec5 	bl	80038ac <lcd_wr_data>
        lcd_wr_data(y & 0xFF);
 8003b22:	88bb      	ldrh	r3, [r7, #4]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff febf 	bl	80038ac <lcd_wr_data>
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200000d0 	.word	0x200000d0

08003b3c <lcd_scan_dir>:
 *
 * @param       dir:0~7,代表8个方向(具体定义见lcd.h)
 * @retval      无
 */
void lcd_scan_dir(uint8_t dir)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	81fb      	strh	r3, [r7, #14]
    uint16_t dirreg = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	81bb      	strh	r3, [r7, #12]
    uint16_t temp;

    /* 横屏时，对1963不改变扫描方向！竖屏时1963改变方向(这里仅用于1963的特殊处理,对其他驱动IC无效) */
    if ((lcddev.dir == 1 && lcddev.id != 0x1963) || (lcddev.dir == 0 && lcddev.id == 0x1963))
 8003b4e:	4b9c      	ldr	r3, [pc, #624]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003b50:	799b      	ldrb	r3, [r3, #6]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d105      	bne.n	8003b62 <lcd_scan_dir+0x26>
 8003b56:	4b9a      	ldr	r3, [pc, #616]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003b58:	889b      	ldrh	r3, [r3, #4]
 8003b5a:	f641 1263 	movw	r2, #6499	@ 0x1963
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d109      	bne.n	8003b76 <lcd_scan_dir+0x3a>
 8003b62:	4b97      	ldr	r3, [pc, #604]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003b64:	799b      	ldrb	r3, [r3, #6]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d134      	bne.n	8003bd4 <lcd_scan_dir+0x98>
 8003b6a:	4b95      	ldr	r3, [pc, #596]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003b6c:	889b      	ldrh	r3, [r3, #4]
 8003b6e:	f641 1263 	movw	r2, #6499	@ 0x1963
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d12e      	bne.n	8003bd4 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* 方向转换 */
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	2b07      	cmp	r3, #7
 8003b7a:	d82b      	bhi.n	8003bd4 <lcd_scan_dir+0x98>
 8003b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b84 <lcd_scan_dir+0x48>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003ba5 	.word	0x08003ba5
 8003b88:	08003bab 	.word	0x08003bab
 8003b8c:	08003bb1 	.word	0x08003bb1
 8003b90:	08003bb7 	.word	0x08003bb7
 8003b94:	08003bbd 	.word	0x08003bbd
 8003b98:	08003bc3 	.word	0x08003bc3
 8003b9c:	08003bc9 	.word	0x08003bc9
 8003ba0:	08003bcf 	.word	0x08003bcf
        {
            case 0:
                dir = 6;
 8003ba4:	2306      	movs	r3, #6
 8003ba6:	71fb      	strb	r3, [r7, #7]
                break;
 8003ba8:	e014      	b.n	8003bd4 <lcd_scan_dir+0x98>

            case 1:
                dir = 7;
 8003baa:	2307      	movs	r3, #7
 8003bac:	71fb      	strb	r3, [r7, #7]
                break;
 8003bae:	e011      	b.n	8003bd4 <lcd_scan_dir+0x98>

            case 2:
                dir = 4;
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	71fb      	strb	r3, [r7, #7]
                break;
 8003bb4:	e00e      	b.n	8003bd4 <lcd_scan_dir+0x98>

            case 3:
                dir = 5;
 8003bb6:	2305      	movs	r3, #5
 8003bb8:	71fb      	strb	r3, [r7, #7]
                break;
 8003bba:	e00b      	b.n	8003bd4 <lcd_scan_dir+0x98>

            case 4:
                dir = 1;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	71fb      	strb	r3, [r7, #7]
                break;
 8003bc0:	e008      	b.n	8003bd4 <lcd_scan_dir+0x98>

            case 5:
                dir = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	71fb      	strb	r3, [r7, #7]
                break;
 8003bc6:	e005      	b.n	8003bd4 <lcd_scan_dir+0x98>

            case 6:
                dir = 3;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	71fb      	strb	r3, [r7, #7]
                break;
 8003bcc:	e002      	b.n	8003bd4 <lcd_scan_dir+0x98>

            case 7:
                dir = 2;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	71fb      	strb	r3, [r7, #7]
                break;
 8003bd2:	bf00      	nop
        }
    }


    /* 根据扫描方式 设置 0x36/0x3600 寄存器 bit 5,6,7 位的值 */
    switch (dir)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	2b07      	cmp	r3, #7
 8003bd8:	d835      	bhi.n	8003c46 <lcd_scan_dir+0x10a>
 8003bda:	a201      	add	r2, pc, #4	@ (adr r2, 8003be0 <lcd_scan_dir+0xa4>)
 8003bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be0:	08003c47 	.word	0x08003c47
 8003be4:	08003c01 	.word	0x08003c01
 8003be8:	08003c0b 	.word	0x08003c0b
 8003bec:	08003c15 	.word	0x08003c15
 8003bf0:	08003c1f 	.word	0x08003c1f
 8003bf4:	08003c29 	.word	0x08003c29
 8003bf8:	08003c33 	.word	0x08003c33
 8003bfc:	08003c3d 	.word	0x08003c3d
        case L2R_U2D:   /* 从左到右,从上到下 */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:   /* 从左到右,从下到上 */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8003c00:	89fb      	ldrh	r3, [r7, #14]
 8003c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c06:	81fb      	strh	r3, [r7, #14]
            break;
 8003c08:	e01d      	b.n	8003c46 <lcd_scan_dir+0x10a>

        case R2L_U2D:   /* 从右到左,从上到下 */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8003c0a:	89fb      	ldrh	r3, [r7, #14]
 8003c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c10:	81fb      	strh	r3, [r7, #14]
            break;
 8003c12:	e018      	b.n	8003c46 <lcd_scan_dir+0x10a>

        case R2L_D2U:   /* 从右到左,从下到上 */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8003c14:	89fb      	ldrh	r3, [r7, #14]
 8003c16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c1a:	81fb      	strh	r3, [r7, #14]
            break;
 8003c1c:	e013      	b.n	8003c46 <lcd_scan_dir+0x10a>

        case U2D_L2R:   /* 从上到下,从左到右 */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8003c1e:	89fb      	ldrh	r3, [r7, #14]
 8003c20:	f043 0320 	orr.w	r3, r3, #32
 8003c24:	81fb      	strh	r3, [r7, #14]
            break;
 8003c26:	e00e      	b.n	8003c46 <lcd_scan_dir+0x10a>

        case U2D_R2L:   /* 从上到下,从右到左 */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8003c28:	89fb      	ldrh	r3, [r7, #14]
 8003c2a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c2e:	81fb      	strh	r3, [r7, #14]
            break;
 8003c30:	e009      	b.n	8003c46 <lcd_scan_dir+0x10a>

        case D2U_L2R:   /* 从下到上,从左到右 */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8003c32:	89fb      	ldrh	r3, [r7, #14]
 8003c34:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8003c38:	81fb      	strh	r3, [r7, #14]
            break;
 8003c3a:	e004      	b.n	8003c46 <lcd_scan_dir+0x10a>

        case D2U_R2L:   /* 从下到上,从右到左 */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8003c3c:	89fb      	ldrh	r3, [r7, #14]
 8003c3e:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8003c42:	81fb      	strh	r3, [r7, #14]
            break;
 8003c44:	bf00      	nop
    }

    dirreg = 0x36;  /* 对绝大部分驱动IC, 由0x36寄存器控制 */
 8003c46:	2336      	movs	r3, #54	@ 0x36
 8003c48:	81bb      	strh	r3, [r7, #12]

    if (lcddev.id == 0x5510)
 8003c4a:	4b5d      	ldr	r3, [pc, #372]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003c4c:	889b      	ldrh	r3, [r3, #4]
 8003c4e:	f245 5210 	movw	r2, #21776	@ 0x5510
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d102      	bne.n	8003c5c <lcd_scan_dir+0x120>
    {
        dirreg = 0x3600;    /* 对于5510, 和其他驱动ic的寄存器有差异 */
 8003c56:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 8003c5a:	81bb      	strh	r3, [r7, #12]
    }

     /* 9341 & 7789 & 7796 要设置BGR位 */
    if (lcddev.id == 0x9341 || lcddev.id == 0x7789 || lcddev.id == 0x7796)
 8003c5c:	4b58      	ldr	r3, [pc, #352]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003c5e:	889b      	ldrh	r3, [r3, #4]
 8003c60:	f249 3241 	movw	r2, #37697	@ 0x9341
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d00b      	beq.n	8003c80 <lcd_scan_dir+0x144>
 8003c68:	4b55      	ldr	r3, [pc, #340]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003c6a:	889b      	ldrh	r3, [r3, #4]
 8003c6c:	f247 7289 	movw	r2, #30601	@ 0x7789
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d005      	beq.n	8003c80 <lcd_scan_dir+0x144>
 8003c74:	4b52      	ldr	r3, [pc, #328]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003c76:	889b      	ldrh	r3, [r3, #4]
 8003c78:	f247 7296 	movw	r2, #30614	@ 0x7796
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d103      	bne.n	8003c88 <lcd_scan_dir+0x14c>
    {
        regval |= 0x08;
 8003c80:	89fb      	ldrh	r3, [r7, #14]
 8003c82:	f043 0308 	orr.w	r3, r3, #8
 8003c86:	81fb      	strh	r3, [r7, #14]
    }

    lcd_write_reg(dirreg, regval);
 8003c88:	89fa      	ldrh	r2, [r7, #14]
 8003c8a:	89bb      	ldrh	r3, [r7, #12]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fe34 	bl	80038fc <lcd_write_reg>

    if (lcddev.id != 0x1963)                    /* 1963不做坐标处理 */
 8003c94:	4b4a      	ldr	r3, [pc, #296]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003c96:	889b      	ldrh	r3, [r3, #4]
 8003c98:	f641 1263 	movw	r2, #6499	@ 0x1963
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d025      	beq.n	8003cec <lcd_scan_dir+0x1b0>
    {
        if (regval & 0x20)
 8003ca0:	89fb      	ldrh	r3, [r7, #14]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d010      	beq.n	8003ccc <lcd_scan_dir+0x190>
        {
            if (lcddev.width < lcddev.height)   /* 交换X,Y */
 8003caa:	4b45      	ldr	r3, [pc, #276]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003cac:	881a      	ldrh	r2, [r3, #0]
 8003cae:	4b44      	ldr	r3, [pc, #272]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003cb0:	885b      	ldrh	r3, [r3, #2]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d21a      	bcs.n	8003cec <lcd_scan_dir+0x1b0>
            {
                temp = lcddev.width;
 8003cb6:	4b42      	ldr	r3, [pc, #264]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8003cbc:	4b40      	ldr	r3, [pc, #256]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003cbe:	885a      	ldrh	r2, [r3, #2]
 8003cc0:	4b3f      	ldr	r3, [pc, #252]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003cc2:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8003cc4:	4a3e      	ldr	r2, [pc, #248]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003cc6:	897b      	ldrh	r3, [r7, #10]
 8003cc8:	8053      	strh	r3, [r2, #2]
 8003cca:	e00f      	b.n	8003cec <lcd_scan_dir+0x1b0>
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* 交换X,Y */
 8003ccc:	4b3c      	ldr	r3, [pc, #240]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003cce:	881a      	ldrh	r2, [r3, #0]
 8003cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003cd2:	885b      	ldrh	r3, [r3, #2]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d909      	bls.n	8003cec <lcd_scan_dir+0x1b0>
            {
                temp = lcddev.width;
 8003cd8:	4b39      	ldr	r3, [pc, #228]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8003cde:	4b38      	ldr	r3, [pc, #224]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003ce0:	885a      	ldrh	r2, [r3, #2]
 8003ce2:	4b37      	ldr	r3, [pc, #220]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003ce4:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8003ce6:	4a36      	ldr	r2, [pc, #216]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003ce8:	897b      	ldrh	r3, [r7, #10]
 8003cea:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* 设置显示区域(开窗)大小 */
    if (lcddev.id == 0x5510)
 8003cec:	4b34      	ldr	r3, [pc, #208]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003cee:	889b      	ldrh	r3, [r3, #4]
 8003cf0:	f245 5210 	movw	r2, #21776	@ 0x5510
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d165      	bne.n	8003dc4 <lcd_scan_dir+0x288>
    {
        lcd_wr_regno(lcddev.setxcmd);
 8003cf8:	4b31      	ldr	r3, [pc, #196]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003cfa:	895b      	ldrh	r3, [r3, #10]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fde9 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data(0);
 8003d02:	2000      	movs	r0, #0
 8003d04:	f7ff fdd2 	bl	80038ac <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 8003d08:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003d0a:	895b      	ldrh	r3, [r3, #10]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fddf 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data(0);
 8003d16:	2000      	movs	r0, #0
 8003d18:	f7ff fdc8 	bl	80038ac <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 2);
 8003d1c:	4b28      	ldr	r3, [pc, #160]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003d1e:	895b      	ldrh	r3, [r3, #10]
 8003d20:	3302      	adds	r3, #2
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fdd5 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) >> 8);
 8003d2a:	4b25      	ldr	r3, [pc, #148]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	121b      	asrs	r3, r3, #8
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fdb9 	bl	80038ac <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 3);
 8003d3a:	4b21      	ldr	r3, [pc, #132]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003d3c:	895b      	ldrh	r3, [r3, #10]
 8003d3e:	3303      	adds	r3, #3
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fdc6 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) & 0xFF);
 8003d48:	4b1d      	ldr	r3, [pc, #116]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fda9 	bl	80038ac <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8003d5a:	4b19      	ldr	r3, [pc, #100]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003d5c:	899b      	ldrh	r3, [r3, #12]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff fdb8 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data(0);
 8003d64:	2000      	movs	r0, #0
 8003d66:	f7ff fda1 	bl	80038ac <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 8003d6a:	4b15      	ldr	r3, [pc, #84]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003d6c:	899b      	ldrh	r3, [r3, #12]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fdae 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data(0);
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7ff fd97 	bl	80038ac <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 2);
 8003d7e:	4b10      	ldr	r3, [pc, #64]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003d80:	899b      	ldrh	r3, [r3, #12]
 8003d82:	3302      	adds	r3, #2
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fda4 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003d8e:	885b      	ldrh	r3, [r3, #2]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	121b      	asrs	r3, r3, #8
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fd88 	bl	80038ac <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 3);
 8003d9c:	4b08      	ldr	r3, [pc, #32]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003d9e:	899b      	ldrh	r3, [r3, #12]
 8003da0:	3303      	adds	r3, #3
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff fd95 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) & 0xFF);
 8003daa:	4b05      	ldr	r3, [pc, #20]	@ (8003dc0 <lcd_scan_dir+0x284>)
 8003dac:	885b      	ldrh	r3, [r3, #2]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fd78 	bl	80038ac <lcd_wr_data>
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0xFF);
    }
}
 8003dbc:	e03a      	b.n	8003e34 <lcd_scan_dir+0x2f8>
 8003dbe:	bf00      	nop
 8003dc0:	200000d0 	.word	0x200000d0
        lcd_wr_regno(lcddev.setxcmd);
 8003dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e3c <lcd_scan_dir+0x300>)
 8003dc6:	895b      	ldrh	r3, [r3, #10]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fd83 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data(0);
 8003dce:	2000      	movs	r0, #0
 8003dd0:	f7ff fd6c 	bl	80038ac <lcd_wr_data>
        lcd_wr_data(0);
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f7ff fd69 	bl	80038ac <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) >> 8);
 8003dda:	4b18      	ldr	r3, [pc, #96]	@ (8003e3c <lcd_scan_dir+0x300>)
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	121b      	asrs	r3, r3, #8
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fd61 	bl	80038ac <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) & 0xFF);
 8003dea:	4b14      	ldr	r3, [pc, #80]	@ (8003e3c <lcd_scan_dir+0x300>)
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fd58 	bl	80038ac <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8003dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8003e3c <lcd_scan_dir+0x300>)
 8003dfe:	899b      	ldrh	r3, [r3, #12]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fd67 	bl	80038d4 <lcd_wr_regno>
        lcd_wr_data(0);
 8003e06:	2000      	movs	r0, #0
 8003e08:	f7ff fd50 	bl	80038ac <lcd_wr_data>
        lcd_wr_data(0);
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f7ff fd4d 	bl	80038ac <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8003e12:	4b0a      	ldr	r3, [pc, #40]	@ (8003e3c <lcd_scan_dir+0x300>)
 8003e14:	885b      	ldrh	r3, [r3, #2]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	121b      	asrs	r3, r3, #8
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fd45 	bl	80038ac <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0xFF);
 8003e22:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <lcd_scan_dir+0x300>)
 8003e24:	885b      	ldrh	r3, [r3, #2]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fd3c 	bl	80038ac <lcd_wr_data>
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	200000d0 	.word	0x200000d0

08003e40 <lcd_draw_point>:
 * @param       x,y: 坐标
 * @param       color: 点的颜色(32位颜色,方便兼容LTDC)
 * @retval      无
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	603a      	str	r2, [r7, #0]
 8003e4a:	80fb      	strh	r3, [r7, #6]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* 设置光标位置 */
 8003e50:	88ba      	ldrh	r2, [r7, #4]
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fd9a 	bl	8003990 <lcd_set_cursor>
    lcd_write_ram_prepare();    /* 开始写入GRAM */
 8003e5c:	f7ff fd88 	bl	8003970 <lcd_write_ram_prepare>
    LCD->LCD_RAM = color;
 8003e60:	4b03      	ldr	r3, [pc, #12]	@ (8003e70 <lcd_draw_point+0x30>)
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	b292      	uxth	r2, r2
 8003e66:	805a      	strh	r2, [r3, #2]
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	6007fffe 	.word	0x6007fffe
 8003e74:	00000000 	.word	0x00000000

08003e78 <lcd_ssd_backlight_set>:
 * @brief       SSD1963背光亮度设置函数
 * @param       pwm: 背光等级,0~100.越大越亮.
 * @retval      无
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	71fb      	strb	r3, [r7, #7]
    lcd_wr_regno(0xBE);         /* 配置PWM输出 */
 8003e82:	20be      	movs	r0, #190	@ 0xbe
 8003e84:	f7ff fd26 	bl	80038d4 <lcd_wr_regno>
    lcd_wr_data(0x05);          /* 1设置PWM频率 */
 8003e88:	2005      	movs	r0, #5
 8003e8a:	f7ff fd0f 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(pwm * 2.55);    /* 2设置PWM占空比 */
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fc fc15 	bl	80006c0 <__aeabi_i2d>
 8003e96:	a310      	add	r3, pc, #64	@ (adr r3, 8003ed8 <lcd_ssd_backlight_set+0x60>)
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f7fc f994 	bl	80001c8 <__aeabi_dmul>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	f7fc fc74 	bl	8000794 <__aeabi_d2uiz>
 8003eac:	4603      	mov	r3, r0
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fcfb 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x01);          /* 3设置C */
 8003eb6:	2001      	movs	r0, #1
 8003eb8:	f7ff fcf8 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0xFF);          /* 4设置D */
 8003ebc:	20ff      	movs	r0, #255	@ 0xff
 8003ebe:	f7ff fcf5 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);          /* 5设置E */
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f7ff fcf2 	bl	80038ac <lcd_wr_data>
    lcd_wr_data(0x00);          /* 6设置F */
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f7ff fcef 	bl	80038ac <lcd_wr_data>
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	66666666 	.word	0x66666666
 8003edc:	40046666 	.word	0x40046666

08003ee0 <lcd_display_dir>:
 * @brief       设置LCD显示方向
 * @param       dir:0,竖屏; 1,横屏
 * @retval      无
 */
void lcd_display_dir(uint8_t dir)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* 竖屏/横屏 */
 8003eea:	4a68      	ldr	r2, [pc, #416]	@ (800408c <lcd_display_dir+0x1ac>)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* 竖屏 */
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d165      	bne.n	8003fc2 <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 8003ef6:	4b65      	ldr	r3, [pc, #404]	@ (800408c <lcd_display_dir+0x1ac>)
 8003ef8:	22f0      	movs	r2, #240	@ 0xf0
 8003efa:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 8003efc:	4b63      	ldr	r3, [pc, #396]	@ (800408c <lcd_display_dir+0x1ac>)
 8003efe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003f02:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8003f04:	4b61      	ldr	r3, [pc, #388]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f06:	889b      	ldrh	r3, [r3, #4]
 8003f08:	f245 5210 	movw	r2, #21776	@ 0x5510
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d114      	bne.n	8003f3a <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0x2C00;
 8003f10:	4b5e      	ldr	r3, [pc, #376]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f12:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8003f16:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0x2A00;
 8003f18:	4b5c      	ldr	r3, [pc, #368]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f1a:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8003f1e:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0x2B00;
 8003f20:	4b5a      	ldr	r3, [pc, #360]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f22:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8003f26:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8003f28:	4b58      	ldr	r3, [pc, #352]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f2a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003f2e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8003f30:	4b56      	ldr	r3, [pc, #344]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f32:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003f36:	805a      	strh	r2, [r3, #2]
 8003f38:	e020      	b.n	8003f7c <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0x1963)
 8003f3a:	4b54      	ldr	r3, [pc, #336]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f3c:	889b      	ldrh	r3, [r3, #4]
 8003f3e:	f641 1263 	movw	r2, #6499	@ 0x1963
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d111      	bne.n	8003f6a <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0x2C;  /* 设置写入GRAM的指令 */
 8003f46:	4b51      	ldr	r3, [pc, #324]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f48:	222c      	movs	r2, #44	@ 0x2c
 8003f4a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0x2B;  /* 设置写X坐标指令 */
 8003f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f4e:	222b      	movs	r2, #43	@ 0x2b
 8003f50:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0x2A;  /* 设置写Y坐标指令 */
 8003f52:	4b4e      	ldr	r3, [pc, #312]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f54:	222a      	movs	r2, #42	@ 0x2a
 8003f56:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* 设置宽度480 */
 8003f58:	4b4c      	ldr	r3, [pc, #304]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f5a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003f5e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* 设置高度800 */
 8003f60:	4b4a      	ldr	r3, [pc, #296]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f62:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003f66:	805a      	strh	r2, [r3, #2]
 8003f68:	e008      	b.n	8003f7c <lcd_display_dir+0x9c>
        }
        else   /* 其他IC, 包括: 9341/5310/7789/7796/9806等IC */
        {
            lcddev.wramcmd = 0x2C;
 8003f6a:	4b48      	ldr	r3, [pc, #288]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f6c:	222c      	movs	r2, #44	@ 0x2c
 8003f6e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0x2A;
 8003f70:	4b46      	ldr	r3, [pc, #280]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f72:	222a      	movs	r2, #42	@ 0x2a
 8003f74:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0x2B;
 8003f76:	4b45      	ldr	r3, [pc, #276]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f78:	222b      	movs	r2, #43	@ 0x2b
 8003f7a:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0x5310 || lcddev.id == 0x7796)     /* 如果是5310/7796 则表示是 320*480分辨率 */
 8003f7c:	4b43      	ldr	r3, [pc, #268]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f7e:	889b      	ldrh	r3, [r3, #4]
 8003f80:	f245 3210 	movw	r2, #21264	@ 0x5310
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d005      	beq.n	8003f94 <lcd_display_dir+0xb4>
 8003f88:	4b40      	ldr	r3, [pc, #256]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f8a:	889b      	ldrh	r3, [r3, #4]
 8003f8c:	f247 7296 	movw	r2, #30614	@ 0x7796
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d107      	bne.n	8003fa4 <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8003f94:	4b3d      	ldr	r3, [pc, #244]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f96:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003f9a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8003f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800408c <lcd_display_dir+0x1ac>)
 8003f9e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003fa2:	805a      	strh	r2, [r3, #2]
        }
        
        if (lcddev.id == 0X9806)    /* 如果是9806 则表示是 480*800 分辨率 */
 8003fa4:	4b39      	ldr	r3, [pc, #228]	@ (800408c <lcd_display_dir+0x1ac>)
 8003fa6:	889b      	ldrh	r3, [r3, #4]
 8003fa8:	f649 0206 	movw	r2, #38918	@ 0x9806
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d165      	bne.n	800407c <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8003fb0:	4b36      	ldr	r3, [pc, #216]	@ (800408c <lcd_display_dir+0x1ac>)
 8003fb2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003fb6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8003fb8:	4b34      	ldr	r3, [pc, #208]	@ (800408c <lcd_display_dir+0x1ac>)
 8003fba:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003fbe:	805a      	strh	r2, [r3, #2]
 8003fc0:	e05c      	b.n	800407c <lcd_display_dir+0x19c>
        }  
    }
    else        /* 横屏 */
    {
        lcddev.width = 320;         /* 默认宽度 */
 8003fc2:	4b32      	ldr	r3, [pc, #200]	@ (800408c <lcd_display_dir+0x1ac>)
 8003fc4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003fc8:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* 默认高度 */
 8003fca:	4b30      	ldr	r3, [pc, #192]	@ (800408c <lcd_display_dir+0x1ac>)
 8003fcc:	22f0      	movs	r2, #240	@ 0xf0
 8003fce:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8003fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800408c <lcd_display_dir+0x1ac>)
 8003fd2:	889b      	ldrh	r3, [r3, #4]
 8003fd4:	f245 5210 	movw	r2, #21776	@ 0x5510
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d114      	bne.n	8004006 <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0x2C00;
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800408c <lcd_display_dir+0x1ac>)
 8003fde:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8003fe2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0x2A00;
 8003fe4:	4b29      	ldr	r3, [pc, #164]	@ (800408c <lcd_display_dir+0x1ac>)
 8003fe6:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8003fea:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0x2B00;
 8003fec:	4b27      	ldr	r3, [pc, #156]	@ (800408c <lcd_display_dir+0x1ac>)
 8003fee:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8003ff2:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8003ff4:	4b25      	ldr	r3, [pc, #148]	@ (800408c <lcd_display_dir+0x1ac>)
 8003ff6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003ffa:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8003ffc:	4b23      	ldr	r3, [pc, #140]	@ (800408c <lcd_display_dir+0x1ac>)
 8003ffe:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004002:	805a      	strh	r2, [r3, #2]
 8004004:	e026      	b.n	8004054 <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0x1963 || lcddev.id == 0x9806)
 8004006:	4b21      	ldr	r3, [pc, #132]	@ (800408c <lcd_display_dir+0x1ac>)
 8004008:	889b      	ldrh	r3, [r3, #4]
 800400a:	f641 1263 	movw	r2, #6499	@ 0x1963
 800400e:	4293      	cmp	r3, r2
 8004010:	d005      	beq.n	800401e <lcd_display_dir+0x13e>
 8004012:	4b1e      	ldr	r3, [pc, #120]	@ (800408c <lcd_display_dir+0x1ac>)
 8004014:	889b      	ldrh	r3, [r3, #4]
 8004016:	f649 0206 	movw	r2, #38918	@ 0x9806
 800401a:	4293      	cmp	r3, r2
 800401c:	d111      	bne.n	8004042 <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0x2C;  /* 设置写入GRAM的指令 */
 800401e:	4b1b      	ldr	r3, [pc, #108]	@ (800408c <lcd_display_dir+0x1ac>)
 8004020:	222c      	movs	r2, #44	@ 0x2c
 8004022:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0x2A;  /* 设置写X坐标指令 */
 8004024:	4b19      	ldr	r3, [pc, #100]	@ (800408c <lcd_display_dir+0x1ac>)
 8004026:	222a      	movs	r2, #42	@ 0x2a
 8004028:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0x2B;  /* 设置写Y坐标指令 */
 800402a:	4b18      	ldr	r3, [pc, #96]	@ (800408c <lcd_display_dir+0x1ac>)
 800402c:	222b      	movs	r2, #43	@ 0x2b
 800402e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* 设置宽度800 */
 8004030:	4b16      	ldr	r3, [pc, #88]	@ (800408c <lcd_display_dir+0x1ac>)
 8004032:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8004036:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* 设置高度480 */
 8004038:	4b14      	ldr	r3, [pc, #80]	@ (800408c <lcd_display_dir+0x1ac>)
 800403a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800403e:	805a      	strh	r2, [r3, #2]
 8004040:	e008      	b.n	8004054 <lcd_display_dir+0x174>
        }
        else   /* 其他IC, 包括:9341/5310/7789/7796等IC */
        {
            lcddev.wramcmd = 0x2C;
 8004042:	4b12      	ldr	r3, [pc, #72]	@ (800408c <lcd_display_dir+0x1ac>)
 8004044:	222c      	movs	r2, #44	@ 0x2c
 8004046:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0x2A;
 8004048:	4b10      	ldr	r3, [pc, #64]	@ (800408c <lcd_display_dir+0x1ac>)
 800404a:	222a      	movs	r2, #42	@ 0x2a
 800404c:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0x2B;
 800404e:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <lcd_display_dir+0x1ac>)
 8004050:	222b      	movs	r2, #43	@ 0x2b
 8004052:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0x5310 || lcddev.id == 0x7796)     /* 如果是5310/7796 则表示是 320*480分辨率 */
 8004054:	4b0d      	ldr	r3, [pc, #52]	@ (800408c <lcd_display_dir+0x1ac>)
 8004056:	889b      	ldrh	r3, [r3, #4]
 8004058:	f245 3210 	movw	r2, #21264	@ 0x5310
 800405c:	4293      	cmp	r3, r2
 800405e:	d005      	beq.n	800406c <lcd_display_dir+0x18c>
 8004060:	4b0a      	ldr	r3, [pc, #40]	@ (800408c <lcd_display_dir+0x1ac>)
 8004062:	889b      	ldrh	r3, [r3, #4]
 8004064:	f247 7296 	movw	r2, #30614	@ 0x7796
 8004068:	4293      	cmp	r3, r2
 800406a:	d107      	bne.n	800407c <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 800406c:	4b07      	ldr	r3, [pc, #28]	@ (800408c <lcd_display_dir+0x1ac>)
 800406e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004072:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8004074:	4b05      	ldr	r3, [pc, #20]	@ (800408c <lcd_display_dir+0x1ac>)
 8004076:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800407a:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* 默认扫描方向 */
 800407c:	2000      	movs	r0, #0
 800407e:	f7ff fd5d 	bl	8003b3c <lcd_scan_dir>
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	200000d0 	.word	0x200000d0

08004090 <lcd_init>:
 *
 * @param       无
 * @retval      无
 */
void lcd_init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0

    FSMC_NORSRAM_TimingTypeDef fsmc_write_handle;

    /* 尝试9341 ID的读取 */
    lcd_wr_regno(0xD3);
 8004096:	20d3      	movs	r0, #211	@ 0xd3
 8004098:	f7ff fc1c 	bl	80038d4 <lcd_wr_regno>
    lcddev.id = lcd_rd_data();  /* dummy read */
 800409c:	f7ff fc56 	bl	800394c <lcd_rd_data>
 80040a0:	4603      	mov	r3, r0
 80040a2:	461a      	mov	r2, r3
 80040a4:	4bb0      	ldr	r3, [pc, #704]	@ (8004368 <lcd_init+0x2d8>)
 80040a6:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* 读到0x00 */
 80040a8:	f7ff fc50 	bl	800394c <lcd_rd_data>
 80040ac:	4603      	mov	r3, r0
 80040ae:	461a      	mov	r2, r3
 80040b0:	4bad      	ldr	r3, [pc, #692]	@ (8004368 <lcd_init+0x2d8>)
 80040b2:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* 读取93 */
 80040b4:	f7ff fc4a 	bl	800394c <lcd_rd_data>
 80040b8:	4603      	mov	r3, r0
 80040ba:	461a      	mov	r2, r3
 80040bc:	4baa      	ldr	r3, [pc, #680]	@ (8004368 <lcd_init+0x2d8>)
 80040be:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 80040c0:	4ba9      	ldr	r3, [pc, #676]	@ (8004368 <lcd_init+0x2d8>)
 80040c2:	889b      	ldrh	r3, [r3, #4]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	4ba7      	ldr	r3, [pc, #668]	@ (8004368 <lcd_init+0x2d8>)
 80040ca:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* 读取41 */
 80040cc:	f7ff fc3e 	bl	800394c <lcd_rd_data>
 80040d0:	4603      	mov	r3, r0
 80040d2:	461a      	mov	r2, r3
 80040d4:	4ba4      	ldr	r3, [pc, #656]	@ (8004368 <lcd_init+0x2d8>)
 80040d6:	889b      	ldrh	r3, [r3, #4]
 80040d8:	4313      	orrs	r3, r2
 80040da:	b29a      	uxth	r2, r3
 80040dc:	4ba2      	ldr	r3, [pc, #648]	@ (8004368 <lcd_init+0x2d8>)
 80040de:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0x9341)    /* 不是 9341 , 尝试看看是不是 ST7789 */
 80040e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004368 <lcd_init+0x2d8>)
 80040e2:	889b      	ldrh	r3, [r3, #4]
 80040e4:	f249 3241 	movw	r2, #37697	@ 0x9341
 80040e8:	4293      	cmp	r3, r2
 80040ea:	f000 8122 	beq.w	8004332 <lcd_init+0x2a2>
    {
        lcd_wr_regno(0x04);
 80040ee:	2004      	movs	r0, #4
 80040f0:	f7ff fbf0 	bl	80038d4 <lcd_wr_regno>
        lcddev.id = lcd_rd_data();      /* dummy read */
 80040f4:	f7ff fc2a 	bl	800394c <lcd_rd_data>
 80040f8:	4603      	mov	r3, r0
 80040fa:	461a      	mov	r2, r3
 80040fc:	4b9a      	ldr	r3, [pc, #616]	@ (8004368 <lcd_init+0x2d8>)
 80040fe:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* 读到0x85 */
 8004100:	f7ff fc24 	bl	800394c <lcd_rd_data>
 8004104:	4603      	mov	r3, r0
 8004106:	461a      	mov	r2, r3
 8004108:	4b97      	ldr	r3, [pc, #604]	@ (8004368 <lcd_init+0x2d8>)
 800410a:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* 读取0x85 */
 800410c:	f7ff fc1e 	bl	800394c <lcd_rd_data>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	4b94      	ldr	r3, [pc, #592]	@ (8004368 <lcd_init+0x2d8>)
 8004116:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8004118:	4b93      	ldr	r3, [pc, #588]	@ (8004368 <lcd_init+0x2d8>)
 800411a:	889b      	ldrh	r3, [r3, #4]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	b29a      	uxth	r2, r3
 8004120:	4b91      	ldr	r3, [pc, #580]	@ (8004368 <lcd_init+0x2d8>)
 8004122:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* 读取0x52 */
 8004124:	f7ff fc12 	bl	800394c <lcd_rd_data>
 8004128:	4603      	mov	r3, r0
 800412a:	461a      	mov	r2, r3
 800412c:	4b8e      	ldr	r3, [pc, #568]	@ (8004368 <lcd_init+0x2d8>)
 800412e:	889b      	ldrh	r3, [r3, #4]
 8004130:	4313      	orrs	r3, r2
 8004132:	b29a      	uxth	r2, r3
 8004134:	4b8c      	ldr	r3, [pc, #560]	@ (8004368 <lcd_init+0x2d8>)
 8004136:	809a      	strh	r2, [r3, #4]
        
        if (lcddev.id == 0x8552)        /* 将8552的ID转换成7789 */
 8004138:	4b8b      	ldr	r3, [pc, #556]	@ (8004368 <lcd_init+0x2d8>)
 800413a:	889b      	ldrh	r3, [r3, #4]
 800413c:	f248 5252 	movw	r2, #34130	@ 0x8552
 8004140:	4293      	cmp	r3, r2
 8004142:	d103      	bne.n	800414c <lcd_init+0xbc>
        {
            lcddev.id = 0x7789;
 8004144:	4b88      	ldr	r3, [pc, #544]	@ (8004368 <lcd_init+0x2d8>)
 8004146:	f247 7289 	movw	r2, #30601	@ 0x7789
 800414a:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* 也不是ST7789, 尝试是不是 NT35310 */
 800414c:	4b86      	ldr	r3, [pc, #536]	@ (8004368 <lcd_init+0x2d8>)
 800414e:	889b      	ldrh	r3, [r3, #4]
 8004150:	f247 7289 	movw	r2, #30601	@ 0x7789
 8004154:	4293      	cmp	r3, r2
 8004156:	f000 80ec 	beq.w	8004332 <lcd_init+0x2a2>
        {
            lcd_wr_regno(0xD4);
 800415a:	20d4      	movs	r0, #212	@ 0xd4
 800415c:	f7ff fbba 	bl	80038d4 <lcd_wr_regno>
            lcddev.id = lcd_rd_data();  /* dummy read */
 8004160:	f7ff fbf4 	bl	800394c <lcd_rd_data>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	4b7f      	ldr	r3, [pc, #508]	@ (8004368 <lcd_init+0x2d8>)
 800416a:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* 读回0x01 */
 800416c:	f7ff fbee 	bl	800394c <lcd_rd_data>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	4b7c      	ldr	r3, [pc, #496]	@ (8004368 <lcd_init+0x2d8>)
 8004176:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* 读回0x53 */
 8004178:	f7ff fbe8 	bl	800394c <lcd_rd_data>
 800417c:	4603      	mov	r3, r0
 800417e:	461a      	mov	r2, r3
 8004180:	4b79      	ldr	r3, [pc, #484]	@ (8004368 <lcd_init+0x2d8>)
 8004182:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8004184:	4b78      	ldr	r3, [pc, #480]	@ (8004368 <lcd_init+0x2d8>)
 8004186:	889b      	ldrh	r3, [r3, #4]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	b29a      	uxth	r2, r3
 800418c:	4b76      	ldr	r3, [pc, #472]	@ (8004368 <lcd_init+0x2d8>)
 800418e:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* 这里读回0x10 */
 8004190:	f7ff fbdc 	bl	800394c <lcd_rd_data>
 8004194:	4603      	mov	r3, r0
 8004196:	461a      	mov	r2, r3
 8004198:	4b73      	ldr	r3, [pc, #460]	@ (8004368 <lcd_init+0x2d8>)
 800419a:	889b      	ldrh	r3, [r3, #4]
 800419c:	4313      	orrs	r3, r2
 800419e:	b29a      	uxth	r2, r3
 80041a0:	4b71      	ldr	r3, [pc, #452]	@ (8004368 <lcd_init+0x2d8>)
 80041a2:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* 也不是NT35310,尝试看看是不是ST7796 */
 80041a4:	4b70      	ldr	r3, [pc, #448]	@ (8004368 <lcd_init+0x2d8>)
 80041a6:	889b      	ldrh	r3, [r3, #4]
 80041a8:	f245 3210 	movw	r2, #21264	@ 0x5310
 80041ac:	4293      	cmp	r3, r2
 80041ae:	f000 80c0 	beq.w	8004332 <lcd_init+0x2a2>
            {
                lcd_wr_regno(0XD3);
 80041b2:	20d3      	movs	r0, #211	@ 0xd3
 80041b4:	f7ff fb8e 	bl	80038d4 <lcd_wr_regno>
                lcddev.id = lcd_rd_data();  /* dummy read */
 80041b8:	f7ff fbc8 	bl	800394c <lcd_rd_data>
 80041bc:	4603      	mov	r3, r0
 80041be:	461a      	mov	r2, r3
 80041c0:	4b69      	ldr	r3, [pc, #420]	@ (8004368 <lcd_init+0x2d8>)
 80041c2:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* 读到0X00 */
 80041c4:	f7ff fbc2 	bl	800394c <lcd_rd_data>
 80041c8:	4603      	mov	r3, r0
 80041ca:	461a      	mov	r2, r3
 80041cc:	4b66      	ldr	r3, [pc, #408]	@ (8004368 <lcd_init+0x2d8>)
 80041ce:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* 读取0X77 */
 80041d0:	f7ff fbbc 	bl	800394c <lcd_rd_data>
 80041d4:	4603      	mov	r3, r0
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b63      	ldr	r3, [pc, #396]	@ (8004368 <lcd_init+0x2d8>)
 80041da:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 80041dc:	4b62      	ldr	r3, [pc, #392]	@ (8004368 <lcd_init+0x2d8>)
 80041de:	889b      	ldrh	r3, [r3, #4]
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	4b60      	ldr	r3, [pc, #384]	@ (8004368 <lcd_init+0x2d8>)
 80041e6:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* 读取0X96 */
 80041e8:	f7ff fbb0 	bl	800394c <lcd_rd_data>
 80041ec:	4603      	mov	r3, r0
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b5d      	ldr	r3, [pc, #372]	@ (8004368 <lcd_init+0x2d8>)
 80041f2:	889b      	ldrh	r3, [r3, #4]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	4b5b      	ldr	r3, [pc, #364]	@ (8004368 <lcd_init+0x2d8>)
 80041fa:	809a      	strh	r2, [r3, #4]
                
                if (lcddev.id != 0x7796)    /* 也不是ST7796,尝试看看是不是NT35510 */
 80041fc:	4b5a      	ldr	r3, [pc, #360]	@ (8004368 <lcd_init+0x2d8>)
 80041fe:	889b      	ldrh	r3, [r3, #4]
 8004200:	f247 7296 	movw	r2, #30614	@ 0x7796
 8004204:	4293      	cmp	r3, r2
 8004206:	f000 8094 	beq.w	8004332 <lcd_init+0x2a2>
                {
                    /* 发送密钥（厂家提供） */
                    lcd_write_reg(0xF000, 0x0055);
 800420a:	2155      	movs	r1, #85	@ 0x55
 800420c:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8004210:	f7ff fb74 	bl	80038fc <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 8004214:	21aa      	movs	r1, #170	@ 0xaa
 8004216:	f24f 0001 	movw	r0, #61441	@ 0xf001
 800421a:	f7ff fb6f 	bl	80038fc <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 800421e:	2152      	movs	r1, #82	@ 0x52
 8004220:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8004224:	f7ff fb6a 	bl	80038fc <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 8004228:	2108      	movs	r1, #8
 800422a:	f24f 0003 	movw	r0, #61443	@ 0xf003
 800422e:	f7ff fb65 	bl	80038fc <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 8004232:	2101      	movs	r1, #1
 8004234:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8004238:	f7ff fb60 	bl	80038fc <lcd_write_reg>
                    
                    lcd_wr_regno(0xC500);       /* 读取ID低八位 */
 800423c:	f44f 4045 	mov.w	r0, #50432	@ 0xc500
 8004240:	f7ff fb48 	bl	80038d4 <lcd_wr_regno>
                    lcddev.id = lcd_rd_data();  /* 读回0x80 */
 8004244:	f7ff fb82 	bl	800394c <lcd_rd_data>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	4b46      	ldr	r3, [pc, #280]	@ (8004368 <lcd_init+0x2d8>)
 800424e:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8004250:	4b45      	ldr	r3, [pc, #276]	@ (8004368 <lcd_init+0x2d8>)
 8004252:	889b      	ldrh	r3, [r3, #4]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	b29a      	uxth	r2, r3
 8004258:	4b43      	ldr	r3, [pc, #268]	@ (8004368 <lcd_init+0x2d8>)
 800425a:	809a      	strh	r2, [r3, #4]

                    lcd_wr_regno(0xC501);       /* 读取ID高八位 */
 800425c:	f24c 5001 	movw	r0, #50433	@ 0xc501
 8004260:	f7ff fb38 	bl	80038d4 <lcd_wr_regno>
                    lcddev.id |= lcd_rd_data(); /* 读回0x00 */
 8004264:	f7ff fb72 	bl	800394c <lcd_rd_data>
 8004268:	4603      	mov	r3, r0
 800426a:	461a      	mov	r2, r3
 800426c:	4b3e      	ldr	r3, [pc, #248]	@ (8004368 <lcd_init+0x2d8>)
 800426e:	889b      	ldrh	r3, [r3, #4]
 8004270:	4313      	orrs	r3, r2
 8004272:	b29a      	uxth	r2, r3
 8004274:	4b3c      	ldr	r3, [pc, #240]	@ (8004368 <lcd_init+0x2d8>)
 8004276:	809a      	strh	r2, [r3, #4]
                    
                    HAL_Delay(5);                /* 等待5ms, 因为0XC501指令对1963来说就是软件复位指令, 等待5ms让1963复位完成再操作 */
 8004278:	2005      	movs	r0, #5
 800427a:	f000 fad5 	bl	8004828 <HAL_Delay>

                    if (lcddev.id != 0x5510)    /* 也不是NT5510,尝试看看是不是ILI9806 */
 800427e:	4b3a      	ldr	r3, [pc, #232]	@ (8004368 <lcd_init+0x2d8>)
 8004280:	889b      	ldrh	r3, [r3, #4]
 8004282:	f245 5210 	movw	r2, #21776	@ 0x5510
 8004286:	4293      	cmp	r3, r2
 8004288:	d053      	beq.n	8004332 <lcd_init+0x2a2>
                    {
                        lcd_wr_regno(0XD3);
 800428a:	20d3      	movs	r0, #211	@ 0xd3
 800428c:	f7ff fb22 	bl	80038d4 <lcd_wr_regno>
                        lcddev.id = lcd_rd_data();  /* dummy read */
 8004290:	f7ff fb5c 	bl	800394c <lcd_rd_data>
 8004294:	4603      	mov	r3, r0
 8004296:	461a      	mov	r2, r3
 8004298:	4b33      	ldr	r3, [pc, #204]	@ (8004368 <lcd_init+0x2d8>)
 800429a:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* 读回0X00 */
 800429c:	f7ff fb56 	bl	800394c <lcd_rd_data>
 80042a0:	4603      	mov	r3, r0
 80042a2:	461a      	mov	r2, r3
 80042a4:	4b30      	ldr	r3, [pc, #192]	@ (8004368 <lcd_init+0x2d8>)
 80042a6:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* 读回0X98 */
 80042a8:	f7ff fb50 	bl	800394c <lcd_rd_data>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004368 <lcd_init+0x2d8>)
 80042b2:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 80042b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004368 <lcd_init+0x2d8>)
 80042b6:	889b      	ldrh	r3, [r3, #4]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004368 <lcd_init+0x2d8>)
 80042be:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* 读回0X06 */
 80042c0:	f7ff fb44 	bl	800394c <lcd_rd_data>
 80042c4:	4603      	mov	r3, r0
 80042c6:	461a      	mov	r2, r3
 80042c8:	4b27      	ldr	r3, [pc, #156]	@ (8004368 <lcd_init+0x2d8>)
 80042ca:	889b      	ldrh	r3, [r3, #4]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	4b25      	ldr	r3, [pc, #148]	@ (8004368 <lcd_init+0x2d8>)
 80042d2:	809a      	strh	r2, [r3, #4]
                        
                        if (lcddev.id != 0x9806)    /* 也不是ILI9806,尝试看看是不是SSD1963 */
 80042d4:	4b24      	ldr	r3, [pc, #144]	@ (8004368 <lcd_init+0x2d8>)
 80042d6:	889b      	ldrh	r3, [r3, #4]
 80042d8:	f649 0206 	movw	r2, #38918	@ 0x9806
 80042dc:	4293      	cmp	r3, r2
 80042de:	d028      	beq.n	8004332 <lcd_init+0x2a2>
                        {
                            lcd_wr_regno(0xA1);
 80042e0:	20a1      	movs	r0, #161	@ 0xa1
 80042e2:	f7ff faf7 	bl	80038d4 <lcd_wr_regno>
                            lcddev.id = lcd_rd_data();
 80042e6:	f7ff fb31 	bl	800394c <lcd_rd_data>
 80042ea:	4603      	mov	r3, r0
 80042ec:	461a      	mov	r2, r3
 80042ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004368 <lcd_init+0x2d8>)
 80042f0:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* 读回0x57 */
 80042f2:	f7ff fb2b 	bl	800394c <lcd_rd_data>
 80042f6:	4603      	mov	r3, r0
 80042f8:	461a      	mov	r2, r3
 80042fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004368 <lcd_init+0x2d8>)
 80042fc:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 80042fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004368 <lcd_init+0x2d8>)
 8004300:	889b      	ldrh	r3, [r3, #4]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	b29a      	uxth	r2, r3
 8004306:	4b18      	ldr	r3, [pc, #96]	@ (8004368 <lcd_init+0x2d8>)
 8004308:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* 读回0x61 */
 800430a:	f7ff fb1f 	bl	800394c <lcd_rd_data>
 800430e:	4603      	mov	r3, r0
 8004310:	461a      	mov	r2, r3
 8004312:	4b15      	ldr	r3, [pc, #84]	@ (8004368 <lcd_init+0x2d8>)
 8004314:	889b      	ldrh	r3, [r3, #4]
 8004316:	4313      	orrs	r3, r2
 8004318:	b29a      	uxth	r2, r3
 800431a:	4b13      	ldr	r3, [pc, #76]	@ (8004368 <lcd_init+0x2d8>)
 800431c:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963 */
 800431e:	4b12      	ldr	r3, [pc, #72]	@ (8004368 <lcd_init+0x2d8>)
 8004320:	889b      	ldrh	r3, [r3, #4]
 8004322:	f245 7261 	movw	r2, #22369	@ 0x5761
 8004326:	4293      	cmp	r3, r2
 8004328:	d103      	bne.n	8004332 <lcd_init+0x2a2>
 800432a:	4b0f      	ldr	r3, [pc, #60]	@ (8004368 <lcd_init+0x2d8>)
 800432c:	f641 1263 	movw	r2, #6499	@ 0x1963
 8004330:	809a      	strh	r2, [r3, #4]
     * 里面(卡死在f_putc函数), 所以, 必须初始化串口1, 或者屏蔽掉下面
     * 这行 printf 语句 !!!!!!!
     */
    //printf("LCD ID:%x\r\n", lcddev.id); /* 打印LCD ID */

    if (lcddev.id == 0x7789)
 8004332:	4b0d      	ldr	r3, [pc, #52]	@ (8004368 <lcd_init+0x2d8>)
 8004334:	889b      	ldrh	r3, [r3, #4]
 8004336:	f247 7289 	movw	r2, #30601	@ 0x7789
 800433a:	4293      	cmp	r3, r2
 800433c:	d102      	bne.n	8004344 <lcd_init+0x2b4>
    {
        lcd_ex_st7789_reginit();    /* 执行ST7789初始化 */
 800433e:	f7fc fe8c 	bl	800105a <lcd_ex_st7789_reginit>
 8004342:	e039      	b.n	80043b8 <lcd_init+0x328>
    }
    else if (lcddev.id == 0x9341)
 8004344:	4b08      	ldr	r3, [pc, #32]	@ (8004368 <lcd_init+0x2d8>)
 8004346:	889b      	ldrh	r3, [r3, #4]
 8004348:	f249 3241 	movw	r2, #37697	@ 0x9341
 800434c:	4293      	cmp	r3, r2
 800434e:	d102      	bne.n	8004356 <lcd_init+0x2c6>
    {
        lcd_ex_ili9341_reginit();   /* 执行ILI9341初始化 */
 8004350:	f7fc ff59 	bl	8001206 <lcd_ex_ili9341_reginit>
 8004354:	e030      	b.n	80043b8 <lcd_init+0x328>
    }
    else if (lcddev.id == 0x5310)
 8004356:	4b04      	ldr	r3, [pc, #16]	@ (8004368 <lcd_init+0x2d8>)
 8004358:	889b      	ldrh	r3, [r3, #4]
 800435a:	f245 3210 	movw	r2, #21264	@ 0x5310
 800435e:	4293      	cmp	r3, r2
 8004360:	d104      	bne.n	800436c <lcd_init+0x2dc>
    {
        lcd_ex_nt35310_reginit();   /* 执行NT35310初始化 */
 8004362:	f7fd f868 	bl	8001436 <lcd_ex_nt35310_reginit>
 8004366:	e027      	b.n	80043b8 <lcd_init+0x328>
 8004368:	200000d0 	.word	0x200000d0
    }
    else if (lcddev.id == 0x7796)
 800436c:	4b44      	ldr	r3, [pc, #272]	@ (8004480 <lcd_init+0x3f0>)
 800436e:	889b      	ldrh	r3, [r3, #4]
 8004370:	f247 7296 	movw	r2, #30614	@ 0x7796
 8004374:	4293      	cmp	r3, r2
 8004376:	d102      	bne.n	800437e <lcd_init+0x2ee>
    {
        lcd_ex_st7796_reginit();    /* 执行ST7796初始化 */
 8004378:	f7fd ffd8 	bl	800232c <lcd_ex_st7796_reginit>
 800437c:	e01c      	b.n	80043b8 <lcd_init+0x328>
    }
    else if (lcddev.id == 0x5510)
 800437e:	4b40      	ldr	r3, [pc, #256]	@ (8004480 <lcd_init+0x3f0>)
 8004380:	889b      	ldrh	r3, [r3, #4]
 8004382:	f245 5210 	movw	r2, #21776	@ 0x5510
 8004386:	4293      	cmp	r3, r2
 8004388:	d102      	bne.n	8004390 <lcd_init+0x300>
    {
        lcd_ex_nt35510_reginit();   /* 执行NT35510初始化 */
 800438a:	f7fe f8b4 	bl	80024f6 <lcd_ex_nt35510_reginit>
 800438e:	e013      	b.n	80043b8 <lcd_init+0x328>
    }
    else if (lcddev.id == 0x9806)
 8004390:	4b3b      	ldr	r3, [pc, #236]	@ (8004480 <lcd_init+0x3f0>)
 8004392:	889b      	ldrh	r3, [r3, #4]
 8004394:	f649 0206 	movw	r2, #38918	@ 0x9806
 8004398:	4293      	cmp	r3, r2
 800439a:	d102      	bne.n	80043a2 <lcd_init+0x312>
    {
        lcd_ex_ili9806_reginit();   /* 执行ILI9806初始化 */
 800439c:	f7ff f82b 	bl	80033f6 <lcd_ex_ili9806_reginit>
 80043a0:	e00a      	b.n	80043b8 <lcd_init+0x328>
    }
    else if (lcddev.id == 0x1963)
 80043a2:	4b37      	ldr	r3, [pc, #220]	@ (8004480 <lcd_init+0x3f0>)
 80043a4:	889b      	ldrh	r3, [r3, #4]
 80043a6:	f641 1263 	movw	r2, #6499	@ 0x1963
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d104      	bne.n	80043b8 <lcd_init+0x328>
    {
        lcd_ex_ssd1963_reginit();   /* 执行SSD1963初始化 */
 80043ae:	f7ff f9c4 	bl	800373a <lcd_ex_ssd1963_reginit>
        lcd_ssd_backlight_set(100); /* 背光设置为最亮 */
 80043b2:	2064      	movs	r0, #100	@ 0x64
 80043b4:	f7ff fd60 	bl	8003e78 <lcd_ssd_backlight_set>
    }

    /* 由于不同屏幕的写时序不同，这里的时序可以根据自己的屏幕进行修改
      （若插上长排线对时序也会有影响，需要自己根据情况修改） */
    /* 初始化完成以后,提速 */
    if (lcddev.id == 0x7789)
 80043b8:	4b31      	ldr	r3, [pc, #196]	@ (8004480 <lcd_init+0x3f0>)
 80043ba:	889b      	ldrh	r3, [r3, #4]
 80043bc:	f247 7289 	movw	r2, #30601	@ 0x7789
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d10d      	bne.n	80043e0 <lcd_init+0x350>
    {
        /* 重新配置写时序控制寄存器的时序 */
        fsmc_write_handle.AddressSetupTime = 3; /* 地址建立时间(ADDSET)为3个fsmc_ker_ck=6*3=18ns */
 80043c4:	2303      	movs	r3, #3
 80043c6:	607b      	str	r3, [r7, #4]
        fsmc_write_handle.DataSetupTime = 3;    /* 数据保持时间(DATAST)为3个fsmc_ker_ck=6*3=18ns */
 80043c8:	2303      	movs	r3, #3
 80043ca:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(g_sram_handle.Extended, &fsmc_write_handle, g_sram_handle.Init.NSBank, g_sram_handle.Init.ExtendedMode);
 80043cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004484 <lcd_init+0x3f4>)
 80043ce:	6858      	ldr	r0, [r3, #4]
 80043d0:	4b2c      	ldr	r3, [pc, #176]	@ (8004484 <lcd_init+0x3f4>)
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004484 <lcd_init+0x3f4>)
 80043d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d8:	1d39      	adds	r1, r7, #4
 80043da:	f001 fa81 	bl	80058e0 <FSMC_NORSRAM_Extended_Timing_Init>
 80043de:	e03e      	b.n	800445e <lcd_init+0x3ce>
    }
    else if (lcddev.id == 0x9806 || lcddev.id == 0x9341 || lcddev.id == 0x5510)
 80043e0:	4b27      	ldr	r3, [pc, #156]	@ (8004480 <lcd_init+0x3f0>)
 80043e2:	889b      	ldrh	r3, [r3, #4]
 80043e4:	f649 0206 	movw	r2, #38918	@ 0x9806
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00b      	beq.n	8004404 <lcd_init+0x374>
 80043ec:	4b24      	ldr	r3, [pc, #144]	@ (8004480 <lcd_init+0x3f0>)
 80043ee:	889b      	ldrh	r3, [r3, #4]
 80043f0:	f249 3241 	movw	r2, #37697	@ 0x9341
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d005      	beq.n	8004404 <lcd_init+0x374>
 80043f8:	4b21      	ldr	r3, [pc, #132]	@ (8004480 <lcd_init+0x3f0>)
 80043fa:	889b      	ldrh	r3, [r3, #4]
 80043fc:	f245 5210 	movw	r2, #21776	@ 0x5510
 8004400:	4293      	cmp	r3, r2
 8004402:	d10d      	bne.n	8004420 <lcd_init+0x390>
    {
        /* 重新配置写时序控制寄存器的时序 */
        fsmc_write_handle.AddressSetupTime = 2; /* 地址建立时间(ADDSET)为2个fsmc_ker_ck=6*2=12ns */
 8004404:	2302      	movs	r3, #2
 8004406:	607b      	str	r3, [r7, #4]
        fsmc_write_handle.DataSetupTime = 2;    /* 数据保持时间(DATAST)为2个fsmc_ker_ck=6*2=12ns */
 8004408:	2302      	movs	r3, #2
 800440a:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(g_sram_handle.Extended, &fsmc_write_handle, g_sram_handle.Init.NSBank, g_sram_handle.Init.ExtendedMode);
 800440c:	4b1d      	ldr	r3, [pc, #116]	@ (8004484 <lcd_init+0x3f4>)
 800440e:	6858      	ldr	r0, [r3, #4]
 8004410:	4b1c      	ldr	r3, [pc, #112]	@ (8004484 <lcd_init+0x3f4>)
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	4b1b      	ldr	r3, [pc, #108]	@ (8004484 <lcd_init+0x3f4>)
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004418:	1d39      	adds	r1, r7, #4
 800441a:	f001 fa61 	bl	80058e0 <FSMC_NORSRAM_Extended_Timing_Init>
 800441e:	e01e      	b.n	800445e <lcd_init+0x3ce>
    }
    else if (lcddev.id == 0x5310 || lcddev.id == 0x7796 || lcddev.id == 0x1963)
 8004420:	4b17      	ldr	r3, [pc, #92]	@ (8004480 <lcd_init+0x3f0>)
 8004422:	889b      	ldrh	r3, [r3, #4]
 8004424:	f245 3210 	movw	r2, #21264	@ 0x5310
 8004428:	4293      	cmp	r3, r2
 800442a:	d00b      	beq.n	8004444 <lcd_init+0x3b4>
 800442c:	4b14      	ldr	r3, [pc, #80]	@ (8004480 <lcd_init+0x3f0>)
 800442e:	889b      	ldrh	r3, [r3, #4]
 8004430:	f247 7296 	movw	r2, #30614	@ 0x7796
 8004434:	4293      	cmp	r3, r2
 8004436:	d005      	beq.n	8004444 <lcd_init+0x3b4>
 8004438:	4b11      	ldr	r3, [pc, #68]	@ (8004480 <lcd_init+0x3f0>)
 800443a:	889b      	ldrh	r3, [r3, #4]
 800443c:	f641 1263 	movw	r2, #6499	@ 0x1963
 8004440:	4293      	cmp	r3, r2
 8004442:	d10c      	bne.n	800445e <lcd_init+0x3ce>
    {
        /* 重新配置写时序控制寄存器的时序 */
        fsmc_write_handle.AddressSetupTime = 1; /* 地址建立时间(ADDSET)为1个fsmc_ker_ck=6*1=6ns */
 8004444:	2301      	movs	r3, #1
 8004446:	607b      	str	r3, [r7, #4]
        fsmc_write_handle.DataSetupTime = 1;    /* 数据保持时间(DATAST)为1个fsmc_ker_ck=6*1=6ns */
 8004448:	2301      	movs	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(g_sram_handle.Extended, &fsmc_write_handle, g_sram_handle.Init.NSBank, g_sram_handle.Init.ExtendedMode);
 800444c:	4b0d      	ldr	r3, [pc, #52]	@ (8004484 <lcd_init+0x3f4>)
 800444e:	6858      	ldr	r0, [r3, #4]
 8004450:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <lcd_init+0x3f4>)
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <lcd_init+0x3f4>)
 8004456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004458:	1d39      	adds	r1, r7, #4
 800445a:	f001 fa41 	bl	80058e0 <FSMC_NORSRAM_Extended_Timing_Init>
    }

    lcd_display_dir(0); /* 默认为竖屏 */
 800445e:	2000      	movs	r0, #0
 8004460:	f7ff fd3e 	bl	8003ee0 <lcd_display_dir>
    LCD_BL(1);          /* 点亮背光 */
 8004464:	2201      	movs	r2, #1
 8004466:	2102      	movs	r1, #2
 8004468:	4807      	ldr	r0, [pc, #28]	@ (8004488 <lcd_init+0x3f8>)
 800446a:	f000 fcaf 	bl	8004dcc <HAL_GPIO_WritePin>
    lcd_clear(WHITE);
 800446e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004472:	f000 f80b 	bl	800448c <lcd_clear>
}
 8004476:	bf00      	nop
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	200000d0 	.word	0x200000d0
 8004484:	20000080 	.word	0x20000080
 8004488:	40020400 	.word	0x40020400

0800448c <lcd_clear>:
 * @brief       清屏函数
 * @param       color: 要清屏的颜色
 * @retval      无
 */
void lcd_clear(uint16_t color)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]
    uint32_t totalpoint = lcddev.width;
 800449a:	4b11      	ldr	r3, [pc, #68]	@ (80044e0 <lcd_clear+0x54>)
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	60bb      	str	r3, [r7, #8]

    totalpoint *= lcddev.height;    /* 得到总点数 */
 80044a0:	4b0f      	ldr	r3, [pc, #60]	@ (80044e0 <lcd_clear+0x54>)
 80044a2:	885b      	ldrh	r3, [r3, #2]
 80044a4:	461a      	mov	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	60bb      	str	r3, [r7, #8]
    lcd_set_cursor(0x00, 0x0000);   /* 设置光标位置 */
 80044ae:	2100      	movs	r1, #0
 80044b0:	2000      	movs	r0, #0
 80044b2:	f7ff fa6d 	bl	8003990 <lcd_set_cursor>
    lcd_write_ram_prepare();        /* 开始写入GRAM */
 80044b6:	f7ff fa5b 	bl	8003970 <lcd_write_ram_prepare>

    for (index = 0; index < totalpoint; index++)
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e005      	b.n	80044cc <lcd_clear+0x40>
    {
        LCD->LCD_RAM = color;
 80044c0:	4a08      	ldr	r2, [pc, #32]	@ (80044e4 <lcd_clear+0x58>)
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	8053      	strh	r3, [r2, #2]
    for (index = 0; index < totalpoint; index++)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3301      	adds	r3, #1
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d3f5      	bcc.n	80044c0 <lcd_clear+0x34>
    }
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	200000d0 	.word	0x200000d0
 80044e4:	6007fffe 	.word	0x6007fffe

080044e8 <lcd_show_char>:
 * @param       mode : 叠加方式(1); 非叠加方式(0);
 * @param       color : 字符的颜色;
 * @retval      无
 */
void lcd_show_char(uint16_t x, uint16_t y, uint8_t chr, uint8_t size, uint8_t mode, uint16_t color)
{
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4604      	mov	r4, r0
 80044f0:	4608      	mov	r0, r1
 80044f2:	4611      	mov	r1, r2
 80044f4:	461a      	mov	r2, r3
 80044f6:	4623      	mov	r3, r4
 80044f8:	80fb      	strh	r3, [r7, #6]
 80044fa:	4603      	mov	r3, r0
 80044fc:	80bb      	strh	r3, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	70fb      	strb	r3, [r7, #3]
 8004502:	4613      	mov	r3, r2
 8004504:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8004506:	88bb      	ldrh	r3, [r7, #4]
 8004508:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	613b      	str	r3, [r7, #16]

    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* 得到字体一个字符对应点阵集所占的字节数 */
 8004512:	78bb      	ldrb	r3, [r7, #2]
 8004514:	08db      	lsrs	r3, r3, #3
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	78bb      	ldrb	r3, [r7, #2]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	bf14      	ite	ne
 8004526:	2301      	movne	r3, #1
 8004528:	2300      	moveq	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	4413      	add	r3, r2
 800452e:	b2da      	uxtb	r2, r3
 8004530:	78bb      	ldrb	r3, [r7, #2]
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	b2db      	uxtb	r3, r3
 8004536:	fb12 f303 	smulbb	r3, r2, r3
 800453a:	737b      	strb	r3, [r7, #13]
    chr = chr - ' ';    /* 得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库） */
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	3b20      	subs	r3, #32
 8004540:	70fb      	strb	r3, [r7, #3]

    switch (size)
 8004542:	78bb      	ldrb	r3, [r7, #2]
 8004544:	3b0c      	subs	r3, #12
 8004546:	2b14      	cmp	r3, #20
 8004548:	f200 8099 	bhi.w	800467e <lcd_show_char+0x196>
 800454c:	a201      	add	r2, pc, #4	@ (adr r2, 8004554 <lcd_show_char+0x6c>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	080045a9 	.word	0x080045a9
 8004558:	0800467f 	.word	0x0800467f
 800455c:	0800467f 	.word	0x0800467f
 8004560:	0800467f 	.word	0x0800467f
 8004564:	080045bb 	.word	0x080045bb
 8004568:	0800467f 	.word	0x0800467f
 800456c:	0800467f 	.word	0x0800467f
 8004570:	0800467f 	.word	0x0800467f
 8004574:	0800467f 	.word	0x0800467f
 8004578:	0800467f 	.word	0x0800467f
 800457c:	0800467f 	.word	0x0800467f
 8004580:	0800467f 	.word	0x0800467f
 8004584:	080045c7 	.word	0x080045c7
 8004588:	0800467f 	.word	0x0800467f
 800458c:	0800467f 	.word	0x0800467f
 8004590:	0800467f 	.word	0x0800467f
 8004594:	0800467f 	.word	0x0800467f
 8004598:	0800467f 	.word	0x0800467f
 800459c:	0800467f 	.word	0x0800467f
 80045a0:	0800467f 	.word	0x0800467f
 80045a4:	080045d9 	.word	0x080045d9
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[chr];  /* 调用1206字体 */
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	4613      	mov	r3, r2
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4a36      	ldr	r2, [pc, #216]	@ (800468c <lcd_show_char+0x1a4>)
 80045b4:	4413      	add	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
            break;
 80045b8:	e014      	b.n	80045e4 <lcd_show_char+0xfc>

        case 16:
            pfont = (uint8_t *)asc2_1608[chr];  /* 调用1608字体 */
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	4a34      	ldr	r2, [pc, #208]	@ (8004690 <lcd_show_char+0x1a8>)
 80045c0:	4413      	add	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
            break;
 80045c4:	e00e      	b.n	80045e4 <lcd_show_char+0xfc>

        case 24:
            pfont = (uint8_t *)asc2_2412[chr];  /* 调用2412字体 */
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	4613      	mov	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4a30      	ldr	r2, [pc, #192]	@ (8004694 <lcd_show_char+0x1ac>)
 80045d2:	4413      	add	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
            break;
 80045d6:	e005      	b.n	80045e4 <lcd_show_char+0xfc>

        case 32:
            pfont = (uint8_t *)asc2_3216[chr];  /* 调用3216字体 */
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	019b      	lsls	r3, r3, #6
 80045dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004698 <lcd_show_char+0x1b0>)
 80045de:	4413      	add	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
            break;
 80045e2:	bf00      	nop

        default:
            return ;
    }

    for (t = 0; t < csize; t++)
 80045e4:	2300      	movs	r3, #0
 80045e6:	757b      	strb	r3, [r7, #21]
 80045e8:	e044      	b.n	8004674 <lcd_show_char+0x18c>
    {
        temp = pfont[t];                            /* 获取字符的点阵数据 */
 80045ea:	7d7b      	ldrb	r3, [r7, #21]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)                  /* 一个字节8个点 */
 80045f4:	2300      	movs	r3, #0
 80045f6:	75bb      	strb	r3, [r7, #22]
 80045f8:	e034      	b.n	8004664 <lcd_show_char+0x17c>
        {
            if (temp & 0x80)                        /* 有效点,需要显示 */
 80045fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	da06      	bge.n	8004610 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* 画点出来,要显示这个点 */
 8004602:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004604:	88b9      	ldrh	r1, [r7, #4]
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fc19 	bl	8003e40 <lcd_draw_point>
 800460e:	e00a      	b.n	8004626 <lcd_show_char+0x13e>
            }
            else if (mode == 0)                     /* 无效点,不显示 */
 8004610:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004614:	2b00      	cmp	r3, #0
 8004616:	d106      	bne.n	8004626 <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* 画背景色,相当于这个点不显示(注意背景色由全局变量控制) */
 8004618:	4b20      	ldr	r3, [pc, #128]	@ (800469c <lcd_show_char+0x1b4>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	88b9      	ldrh	r1, [r7, #4]
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fc0d 	bl	8003e40 <lcd_draw_point>
            }

            temp <<= 1;                             /* 移位, 以便获取下一个位的状态 */
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	75fb      	strb	r3, [r7, #23]
            y++;
 800462c:	88bb      	ldrh	r3, [r7, #4]
 800462e:	3301      	adds	r3, #1
 8004630:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;          /* 超区域了 */
 8004632:	4b1b      	ldr	r3, [pc, #108]	@ (80046a0 <lcd_show_char+0x1b8>)
 8004634:	885b      	ldrh	r3, [r3, #2]
 8004636:	88ba      	ldrh	r2, [r7, #4]
 8004638:	429a      	cmp	r2, r3
 800463a:	d222      	bcs.n	8004682 <lcd_show_char+0x19a>

            if ((y - y0) == size)                   /* 显示完一列了? */
 800463c:	88ba      	ldrh	r2, [r7, #4]
 800463e:	89fb      	ldrh	r3, [r7, #14]
 8004640:	1ad2      	subs	r2, r2, r3
 8004642:	78bb      	ldrb	r3, [r7, #2]
 8004644:	429a      	cmp	r2, r3
 8004646:	d10a      	bne.n	800465e <lcd_show_char+0x176>
            {
                y = y0; /* y坐标复位 */
 8004648:	89fb      	ldrh	r3, [r7, #14]
 800464a:	80bb      	strh	r3, [r7, #4]
                x++;    /* x坐标递增 */
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	3301      	adds	r3, #1
 8004650:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)
 8004652:	4b13      	ldr	r3, [pc, #76]	@ (80046a0 <lcd_show_char+0x1b8>)
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	429a      	cmp	r2, r3
 800465a:	d307      	bcc.n	800466c <lcd_show_char+0x184>
                {
                    return;       /* x坐标超区域了 */
 800465c:	e012      	b.n	8004684 <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)                  /* 一个字节8个点 */
 800465e:	7dbb      	ldrb	r3, [r7, #22]
 8004660:	3301      	adds	r3, #1
 8004662:	75bb      	strb	r3, [r7, #22]
 8004664:	7dbb      	ldrb	r3, [r7, #22]
 8004666:	2b07      	cmp	r3, #7
 8004668:	d9c7      	bls.n	80045fa <lcd_show_char+0x112>
 800466a:	e000      	b.n	800466e <lcd_show_char+0x186>
                }

                break;
 800466c:	bf00      	nop
    for (t = 0; t < csize; t++)
 800466e:	7d7b      	ldrb	r3, [r7, #21]
 8004670:	3301      	adds	r3, #1
 8004672:	757b      	strb	r3, [r7, #21]
 8004674:	7d7a      	ldrb	r2, [r7, #21]
 8004676:	7b7b      	ldrb	r3, [r7, #13]
 8004678:	429a      	cmp	r2, r3
 800467a:	d3b6      	bcc.n	80045ea <lcd_show_char+0x102>
 800467c:	e002      	b.n	8004684 <lcd_show_char+0x19c>
            return ;
 800467e:	bf00      	nop
 8004680:	e000      	b.n	8004684 <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;          /* 超区域了 */
 8004682:	bf00      	nop
            }
        }
    }
}
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	bd90      	pop	{r4, r7, pc}
 800468a:	bf00      	nop
 800468c:	080059e0 	.word	0x080059e0
 8004690:	08005e54 	.word	0x08005e54
 8004694:	08006444 	.word	0x08006444
 8004698:	080071a0 	.word	0x080071a0
 800469c:	20000004 	.word	0x20000004
 80046a0:	200000d0 	.word	0x200000d0

080046a4 <lcd_show_string>:
 * @param       p           : 字符串首地址
 * @param       color       : 字符串的颜色;
 * @retval      无
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 80046a4:	b590      	push	{r4, r7, lr}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	4604      	mov	r4, r0
 80046ac:	4608      	mov	r0, r1
 80046ae:	4611      	mov	r1, r2
 80046b0:	461a      	mov	r2, r3
 80046b2:	4623      	mov	r3, r4
 80046b4:	80fb      	strh	r3, [r7, #6]
 80046b6:	4603      	mov	r3, r0
 80046b8:	80bb      	strh	r3, [r7, #4]
 80046ba:	460b      	mov	r3, r1
 80046bc:	807b      	strh	r3, [r7, #2]
 80046be:	4613      	mov	r3, r2
 80046c0:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	73fb      	strb	r3, [r7, #15]
    
    width += x;
 80046c6:	887a      	ldrh	r2, [r7, #2]
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	4413      	add	r3, r2
 80046cc:	807b      	strh	r3, [r7, #2]
    height += y;
 80046ce:	883a      	ldrh	r2, [r7, #0]
 80046d0:	88bb      	ldrh	r3, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* 判断是不是非法字符! */
 80046d6:	e027      	b.n	8004728 <lcd_show_string+0x84>
    {
        if (x >= width)
 80046d8:	88fa      	ldrh	r2, [r7, #6]
 80046da:	887b      	ldrh	r3, [r7, #2]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d307      	bcc.n	80046f0 <lcd_show_string+0x4c>
        {
            x = x0;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	80fb      	strh	r3, [r7, #6]
            y += size;
 80046e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	88bb      	ldrh	r3, [r7, #4]
 80046ec:	4413      	add	r3, r2
 80046ee:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)
 80046f0:	88ba      	ldrh	r2, [r7, #4]
 80046f2:	883b      	ldrh	r3, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d220      	bcs.n	800473a <lcd_show_string+0x96>
        {
            break;      /* 退出 */
        }

        lcd_show_char(x, y, *p, size, 0, color);
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	781a      	ldrb	r2, [r3, #0]
 80046fc:	f897 4020 	ldrb.w	r4, [r7, #32]
 8004700:	88b9      	ldrh	r1, [r7, #4]
 8004702:	88f8      	ldrh	r0, [r7, #6]
 8004704:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	2300      	movs	r3, #0
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	4623      	mov	r3, r4
 800470e:	f7ff feeb 	bl	80044e8 <lcd_show_char>
        x += size / 2;
 8004712:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004716:	085b      	lsrs	r3, r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	4413      	add	r3, r2
 8004720:	80fb      	strh	r3, [r7, #6]
        p++;
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	3301      	adds	r3, #1
 8004726:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((*p <= '~') && (*p >= ' '))   /* 判断是不是非法字符! */
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b7e      	cmp	r3, #126	@ 0x7e
 800472e:	d805      	bhi.n	800473c <lcd_show_string+0x98>
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b1f      	cmp	r3, #31
 8004736:	d8cf      	bhi.n	80046d8 <lcd_show_string+0x34>
    }
}
 8004738:	e000      	b.n	800473c <lcd_show_string+0x98>
            break;      /* 退出 */
 800473a:	bf00      	nop
}
 800473c:	bf00      	nop
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	bd90      	pop	{r4, r7, pc}

08004744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004748:	4b0e      	ldr	r3, [pc, #56]	@ (8004784 <HAL_Init+0x40>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a0d      	ldr	r2, [pc, #52]	@ (8004784 <HAL_Init+0x40>)
 800474e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004754:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <HAL_Init+0x40>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a0a      	ldr	r2, [pc, #40]	@ (8004784 <HAL_Init+0x40>)
 800475a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800475e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004760:	4b08      	ldr	r3, [pc, #32]	@ (8004784 <HAL_Init+0x40>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a07      	ldr	r2, [pc, #28]	@ (8004784 <HAL_Init+0x40>)
 8004766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800476a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800476c:	2003      	movs	r0, #3
 800476e:	f000 f94f 	bl	8004a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004772:	2000      	movs	r0, #0
 8004774:	f000 f808 	bl	8004788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004778:	f7fc fbc0 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40023c00 	.word	0x40023c00

08004788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004790:	4b12      	ldr	r3, [pc, #72]	@ (80047dc <HAL_InitTick+0x54>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b12      	ldr	r3, [pc, #72]	@ (80047e0 <HAL_InitTick+0x58>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	4619      	mov	r1, r3
 800479a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800479e:	fbb3 f3f1 	udiv	r3, r3, r1
 80047a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f967 	bl	8004a7a <HAL_SYSTICK_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e00e      	b.n	80047d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b0f      	cmp	r3, #15
 80047ba:	d80a      	bhi.n	80047d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047bc:	2200      	movs	r2, #0
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	f000 f92f 	bl	8004a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047c8:	4a06      	ldr	r2, [pc, #24]	@ (80047e4 <HAL_InitTick+0x5c>)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	e000      	b.n	80047d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20000000 	.word	0x20000000
 80047e0:	2000000c 	.word	0x2000000c
 80047e4:	20000008 	.word	0x20000008

080047e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047ec:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <HAL_IncTick+0x20>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	4b06      	ldr	r3, [pc, #24]	@ (800480c <HAL_IncTick+0x24>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4413      	add	r3, r2
 80047f8:	4a04      	ldr	r2, [pc, #16]	@ (800480c <HAL_IncTick+0x24>)
 80047fa:	6013      	str	r3, [r2, #0]
}
 80047fc:	bf00      	nop
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	2000000c 	.word	0x2000000c
 800480c:	200000e0 	.word	0x200000e0

08004810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return uwTick;
 8004814:	4b03      	ldr	r3, [pc, #12]	@ (8004824 <HAL_GetTick+0x14>)
 8004816:	681b      	ldr	r3, [r3, #0]
}
 8004818:	4618      	mov	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	200000e0 	.word	0x200000e0

08004828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004830:	f7ff ffee 	bl	8004810 <HAL_GetTick>
 8004834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d005      	beq.n	800484e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004842:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <HAL_Delay+0x44>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800484e:	bf00      	nop
 8004850:	f7ff ffde 	bl	8004810 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	429a      	cmp	r2, r3
 800485e:	d8f7      	bhi.n	8004850 <HAL_Delay+0x28>
  {
  }
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	2000000c 	.word	0x2000000c

08004870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004880:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800488c:	4013      	ands	r3, r2
 800488e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004898:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800489c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048a2:	4a04      	ldr	r2, [pc, #16]	@ (80048b4 <__NVIC_SetPriorityGrouping+0x44>)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	60d3      	str	r3, [r2, #12]
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	e000ed00 	.word	0xe000ed00

080048b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048bc:	4b04      	ldr	r3, [pc, #16]	@ (80048d0 <__NVIC_GetPriorityGrouping+0x18>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	0a1b      	lsrs	r3, r3, #8
 80048c2:	f003 0307 	and.w	r3, r3, #7
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	e000ed00 	.word	0xe000ed00

080048d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	db0b      	blt.n	80048fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	f003 021f 	and.w	r2, r3, #31
 80048ec:	4907      	ldr	r1, [pc, #28]	@ (800490c <__NVIC_EnableIRQ+0x38>)
 80048ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	2001      	movs	r0, #1
 80048f6:	fa00 f202 	lsl.w	r2, r0, r2
 80048fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	e000e100 	.word	0xe000e100

08004910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	6039      	str	r1, [r7, #0]
 800491a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800491c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004920:	2b00      	cmp	r3, #0
 8004922:	db0a      	blt.n	800493a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	b2da      	uxtb	r2, r3
 8004928:	490c      	ldr	r1, [pc, #48]	@ (800495c <__NVIC_SetPriority+0x4c>)
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	0112      	lsls	r2, r2, #4
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	440b      	add	r3, r1
 8004934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004938:	e00a      	b.n	8004950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	b2da      	uxtb	r2, r3
 800493e:	4908      	ldr	r1, [pc, #32]	@ (8004960 <__NVIC_SetPriority+0x50>)
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	3b04      	subs	r3, #4
 8004948:	0112      	lsls	r2, r2, #4
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	440b      	add	r3, r1
 800494e:	761a      	strb	r2, [r3, #24]
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	e000e100 	.word	0xe000e100
 8004960:	e000ed00 	.word	0xe000ed00

08004964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004964:	b480      	push	{r7}
 8004966:	b089      	sub	sp, #36	@ 0x24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f1c3 0307 	rsb	r3, r3, #7
 800497e:	2b04      	cmp	r3, #4
 8004980:	bf28      	it	cs
 8004982:	2304      	movcs	r3, #4
 8004984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3304      	adds	r3, #4
 800498a:	2b06      	cmp	r3, #6
 800498c:	d902      	bls.n	8004994 <NVIC_EncodePriority+0x30>
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3b03      	subs	r3, #3
 8004992:	e000      	b.n	8004996 <NVIC_EncodePriority+0x32>
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004998:	f04f 32ff 	mov.w	r2, #4294967295
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43da      	mvns	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	401a      	ands	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049ac:	f04f 31ff 	mov.w	r1, #4294967295
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	fa01 f303 	lsl.w	r3, r1, r3
 80049b6:	43d9      	mvns	r1, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049bc:	4313      	orrs	r3, r2
         );
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3724      	adds	r7, #36	@ 0x24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049dc:	d301      	bcc.n	80049e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049de:	2301      	movs	r3, #1
 80049e0:	e00f      	b.n	8004a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049e2:	4a0a      	ldr	r2, [pc, #40]	@ (8004a0c <SysTick_Config+0x40>)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049ea:	210f      	movs	r1, #15
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	f7ff ff8e 	bl	8004910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049f4:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <SysTick_Config+0x40>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049fa:	4b04      	ldr	r3, [pc, #16]	@ (8004a0c <SysTick_Config+0x40>)
 80049fc:	2207      	movs	r2, #7
 80049fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	e000e010 	.word	0xe000e010

08004a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ff29 	bl	8004870 <__NVIC_SetPriorityGrouping>
}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b086      	sub	sp, #24
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
 8004a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a38:	f7ff ff3e 	bl	80048b8 <__NVIC_GetPriorityGrouping>
 8004a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	6978      	ldr	r0, [r7, #20]
 8004a44:	f7ff ff8e 	bl	8004964 <NVIC_EncodePriority>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff ff5d 	bl	8004910 <__NVIC_SetPriority>
}
 8004a56:	bf00      	nop
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	4603      	mov	r3, r0
 8004a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff ff31 	bl	80048d4 <__NVIC_EnableIRQ>
}
 8004a72:	bf00      	nop
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff ffa2 	bl	80049cc <SysTick_Config>
 8004a88:	4603      	mov	r3, r0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	@ 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	e16b      	b.n	8004d88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	f040 815a 	bne.w	8004d82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d005      	beq.n	8004ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d130      	bne.n	8004b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	2203      	movs	r2, #3
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	4013      	ands	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	43db      	mvns	r3, r3
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 0201 	and.w	r2, r3, #1
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 0303 	and.w	r3, r3, #3
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d017      	beq.n	8004b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	2203      	movs	r2, #3
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d123      	bne.n	8004bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	08da      	lsrs	r2, r3, #3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3208      	adds	r2, #8
 8004b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	43db      	mvns	r3, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	08da      	lsrs	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3208      	adds	r2, #8
 8004bd2:	69b9      	ldr	r1, [r7, #24]
 8004bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	2203      	movs	r2, #3
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f003 0203 	and.w	r2, r3, #3
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80b4 	beq.w	8004d82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	4b60      	ldr	r3, [pc, #384]	@ (8004da0 <HAL_GPIO_Init+0x30c>)
 8004c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c22:	4a5f      	ldr	r2, [pc, #380]	@ (8004da0 <HAL_GPIO_Init+0x30c>)
 8004c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c2a:	4b5d      	ldr	r3, [pc, #372]	@ (8004da0 <HAL_GPIO_Init+0x30c>)
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c36:	4a5b      	ldr	r2, [pc, #364]	@ (8004da4 <HAL_GPIO_Init+0x310>)
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	089b      	lsrs	r3, r3, #2
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	220f      	movs	r2, #15
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43db      	mvns	r3, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a52      	ldr	r2, [pc, #328]	@ (8004da8 <HAL_GPIO_Init+0x314>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02b      	beq.n	8004cba <HAL_GPIO_Init+0x226>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a51      	ldr	r2, [pc, #324]	@ (8004dac <HAL_GPIO_Init+0x318>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d025      	beq.n	8004cb6 <HAL_GPIO_Init+0x222>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a50      	ldr	r2, [pc, #320]	@ (8004db0 <HAL_GPIO_Init+0x31c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01f      	beq.n	8004cb2 <HAL_GPIO_Init+0x21e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a4f      	ldr	r2, [pc, #316]	@ (8004db4 <HAL_GPIO_Init+0x320>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d019      	beq.n	8004cae <HAL_GPIO_Init+0x21a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a4e      	ldr	r2, [pc, #312]	@ (8004db8 <HAL_GPIO_Init+0x324>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <HAL_GPIO_Init+0x216>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a4d      	ldr	r2, [pc, #308]	@ (8004dbc <HAL_GPIO_Init+0x328>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00d      	beq.n	8004ca6 <HAL_GPIO_Init+0x212>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a4c      	ldr	r2, [pc, #304]	@ (8004dc0 <HAL_GPIO_Init+0x32c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d007      	beq.n	8004ca2 <HAL_GPIO_Init+0x20e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a4b      	ldr	r2, [pc, #300]	@ (8004dc4 <HAL_GPIO_Init+0x330>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d101      	bne.n	8004c9e <HAL_GPIO_Init+0x20a>
 8004c9a:	2307      	movs	r3, #7
 8004c9c:	e00e      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	e00c      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004ca2:	2306      	movs	r3, #6
 8004ca4:	e00a      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004ca6:	2305      	movs	r3, #5
 8004ca8:	e008      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004caa:	2304      	movs	r3, #4
 8004cac:	e006      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e004      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e002      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	f002 0203 	and.w	r2, r2, #3
 8004cc2:	0092      	lsls	r2, r2, #2
 8004cc4:	4093      	lsls	r3, r2
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ccc:	4935      	ldr	r1, [pc, #212]	@ (8004da4 <HAL_GPIO_Init+0x310>)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cda:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cfe:	4a32      	ldr	r2, [pc, #200]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d04:	4b30      	ldr	r3, [pc, #192]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d28:	4a27      	ldr	r2, [pc, #156]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d2e:	4b26      	ldr	r3, [pc, #152]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d52:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d58:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d7c:	4a12      	ldr	r2, [pc, #72]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2b0f      	cmp	r3, #15
 8004d8c:	f67f ae90 	bls.w	8004ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3724      	adds	r7, #36	@ 0x24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40013800 	.word	0x40013800
 8004da8:	40020000 	.word	0x40020000
 8004dac:	40020400 	.word	0x40020400
 8004db0:	40020800 	.word	0x40020800
 8004db4:	40020c00 	.word	0x40020c00
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40021400 	.word	0x40021400
 8004dc0:	40021800 	.word	0x40021800
 8004dc4:	40021c00 	.word	0x40021c00
 8004dc8:	40013c00 	.word	0x40013c00

08004dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	807b      	strh	r3, [r7, #2]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ddc:	787b      	ldrb	r3, [r7, #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004de2:	887a      	ldrh	r2, [r7, #2]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004de8:	e003      	b.n	8004df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	041a      	lsls	r2, r3, #16
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	619a      	str	r2, [r3, #24]
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e0a:	4b08      	ldr	r3, [pc, #32]	@ (8004e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d006      	beq.n	8004e24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e16:	4a05      	ldr	r2, [pc, #20]	@ (8004e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f806 	bl	8004e30 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40013c00 	.word	0x40013c00

08004e30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e267      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d075      	beq.n	8004f52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e66:	4b88      	ldr	r3, [pc, #544]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d00c      	beq.n	8004e8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e72:	4b85      	ldr	r3, [pc, #532]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d112      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e7e:	4b82      	ldr	r3, [pc, #520]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e8a:	d10b      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e8c:	4b7e      	ldr	r3, [pc, #504]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d05b      	beq.n	8004f50 <HAL_RCC_OscConfig+0x108>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d157      	bne.n	8004f50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e242      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eac:	d106      	bne.n	8004ebc <HAL_RCC_OscConfig+0x74>
 8004eae:	4b76      	ldr	r3, [pc, #472]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a75      	ldr	r2, [pc, #468]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e01d      	b.n	8004ef8 <HAL_RCC_OscConfig+0xb0>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x98>
 8004ec6:	4b70      	ldr	r3, [pc, #448]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a6f      	ldr	r2, [pc, #444]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	4b6d      	ldr	r3, [pc, #436]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a6c      	ldr	r2, [pc, #432]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e00b      	b.n	8004ef8 <HAL_RCC_OscConfig+0xb0>
 8004ee0:	4b69      	ldr	r3, [pc, #420]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a68      	ldr	r2, [pc, #416]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	4b66      	ldr	r3, [pc, #408]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a65      	ldr	r2, [pc, #404]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d013      	beq.n	8004f28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f00:	f7ff fc86 	bl	8004810 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f08:	f7ff fc82 	bl	8004810 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	@ 0x64
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e207      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1a:	4b5b      	ldr	r3, [pc, #364]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0xc0>
 8004f26:	e014      	b.n	8004f52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f28:	f7ff fc72 	bl	8004810 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f30:	f7ff fc6e 	bl	8004810 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	@ 0x64
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e1f3      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f42:	4b51      	ldr	r3, [pc, #324]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0xe8>
 8004f4e:	e000      	b.n	8004f52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d063      	beq.n	8005026 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f6a:	4b47      	ldr	r3, [pc, #284]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d11c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f76:	4b44      	ldr	r3, [pc, #272]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d116      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f82:	4b41      	ldr	r3, [pc, #260]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <HAL_RCC_OscConfig+0x152>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d001      	beq.n	8004f9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e1c7      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4937      	ldr	r1, [pc, #220]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fae:	e03a      	b.n	8005026 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d020      	beq.n	8004ffa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fb8:	4b34      	ldr	r3, [pc, #208]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbe:	f7ff fc27 	bl	8004810 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fc6:	f7ff fc23 	bl	8004810 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e1a8      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe4:	4b28      	ldr	r3, [pc, #160]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	4925      	ldr	r1, [pc, #148]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	600b      	str	r3, [r1, #0]
 8004ff8:	e015      	b.n	8005026 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ffa:	4b24      	ldr	r3, [pc, #144]	@ (800508c <HAL_RCC_OscConfig+0x244>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7ff fc06 	bl	8004810 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005008:	f7ff fc02 	bl	8004810 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e187      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501a:	4b1b      	ldr	r3, [pc, #108]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d036      	beq.n	80050a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d016      	beq.n	8005068 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800503a:	4b15      	ldr	r3, [pc, #84]	@ (8005090 <HAL_RCC_OscConfig+0x248>)
 800503c:	2201      	movs	r2, #1
 800503e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005040:	f7ff fbe6 	bl	8004810 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005048:	f7ff fbe2 	bl	8004810 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e167      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505a:	4b0b      	ldr	r3, [pc, #44]	@ (8005088 <HAL_RCC_OscConfig+0x240>)
 800505c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x200>
 8005066:	e01b      	b.n	80050a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005068:	4b09      	ldr	r3, [pc, #36]	@ (8005090 <HAL_RCC_OscConfig+0x248>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506e:	f7ff fbcf 	bl	8004810 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005074:	e00e      	b.n	8005094 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005076:	f7ff fbcb 	bl	8004810 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d907      	bls.n	8005094 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e150      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
 8005088:	40023800 	.word	0x40023800
 800508c:	42470000 	.word	0x42470000
 8005090:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005094:	4b88      	ldr	r3, [pc, #544]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1ea      	bne.n	8005076 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8097 	beq.w	80051dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b2:	4b81      	ldr	r3, [pc, #516]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	4b7d      	ldr	r3, [pc, #500]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	4a7c      	ldr	r2, [pc, #496]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80050ce:	4b7a      	ldr	r3, [pc, #488]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050da:	2301      	movs	r3, #1
 80050dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050de:	4b77      	ldr	r3, [pc, #476]	@ (80052bc <HAL_RCC_OscConfig+0x474>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d118      	bne.n	800511c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ea:	4b74      	ldr	r3, [pc, #464]	@ (80052bc <HAL_RCC_OscConfig+0x474>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a73      	ldr	r2, [pc, #460]	@ (80052bc <HAL_RCC_OscConfig+0x474>)
 80050f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f6:	f7ff fb8b 	bl	8004810 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fe:	f7ff fb87 	bl	8004810 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e10c      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005110:	4b6a      	ldr	r3, [pc, #424]	@ (80052bc <HAL_RCC_OscConfig+0x474>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d106      	bne.n	8005132 <HAL_RCC_OscConfig+0x2ea>
 8005124:	4b64      	ldr	r3, [pc, #400]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005128:	4a63      	ldr	r2, [pc, #396]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005130:	e01c      	b.n	800516c <HAL_RCC_OscConfig+0x324>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b05      	cmp	r3, #5
 8005138:	d10c      	bne.n	8005154 <HAL_RCC_OscConfig+0x30c>
 800513a:	4b5f      	ldr	r3, [pc, #380]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513e:	4a5e      	ldr	r2, [pc, #376]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005140:	f043 0304 	orr.w	r3, r3, #4
 8005144:	6713      	str	r3, [r2, #112]	@ 0x70
 8005146:	4b5c      	ldr	r3, [pc, #368]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514a:	4a5b      	ldr	r2, [pc, #364]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	6713      	str	r3, [r2, #112]	@ 0x70
 8005152:	e00b      	b.n	800516c <HAL_RCC_OscConfig+0x324>
 8005154:	4b58      	ldr	r3, [pc, #352]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005158:	4a57      	ldr	r2, [pc, #348]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005160:	4b55      	ldr	r3, [pc, #340]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005164:	4a54      	ldr	r2, [pc, #336]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005166:	f023 0304 	bic.w	r3, r3, #4
 800516a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d015      	beq.n	80051a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005174:	f7ff fb4c 	bl	8004810 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517a:	e00a      	b.n	8005192 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800517c:	f7ff fb48 	bl	8004810 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e0cb      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005192:	4b49      	ldr	r3, [pc, #292]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0ee      	beq.n	800517c <HAL_RCC_OscConfig+0x334>
 800519e:	e014      	b.n	80051ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a0:	f7ff fb36 	bl	8004810 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a6:	e00a      	b.n	80051be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a8:	f7ff fb32 	bl	8004810 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e0b5      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051be:	4b3e      	ldr	r3, [pc, #248]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1ee      	bne.n	80051a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d105      	bne.n	80051dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d0:	4b39      	ldr	r3, [pc, #228]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	4a38      	ldr	r2, [pc, #224]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 80051d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80a1 	beq.w	8005328 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051e6:	4b34      	ldr	r3, [pc, #208]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d05c      	beq.n	80052ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d141      	bne.n	800527e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fa:	4b31      	ldr	r3, [pc, #196]	@ (80052c0 <HAL_RCC_OscConfig+0x478>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005200:	f7ff fb06 	bl	8004810 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005208:	f7ff fb02 	bl	8004810 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e087      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521a:	4b27      	ldr	r3, [pc, #156]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f0      	bne.n	8005208 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69da      	ldr	r2, [r3, #28]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005234:	019b      	lsls	r3, r3, #6
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523c:	085b      	lsrs	r3, r3, #1
 800523e:	3b01      	subs	r3, #1
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005248:	061b      	lsls	r3, r3, #24
 800524a:	491b      	ldr	r1, [pc, #108]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 800524c:	4313      	orrs	r3, r2
 800524e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005250:	4b1b      	ldr	r3, [pc, #108]	@ (80052c0 <HAL_RCC_OscConfig+0x478>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005256:	f7ff fadb 	bl	8004810 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525e:	f7ff fad7 	bl	8004810 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e05c      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005270:	4b11      	ldr	r3, [pc, #68]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <HAL_RCC_OscConfig+0x416>
 800527c:	e054      	b.n	8005328 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527e:	4b10      	ldr	r3, [pc, #64]	@ (80052c0 <HAL_RCC_OscConfig+0x478>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005284:	f7ff fac4 	bl	8004810 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528c:	f7ff fac0 	bl	8004810 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e045      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529e:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <HAL_RCC_OscConfig+0x470>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x444>
 80052aa:	e03d      	b.n	8005328 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d107      	bne.n	80052c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e038      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40007000 	.word	0x40007000
 80052c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005334 <HAL_RCC_OscConfig+0x4ec>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d028      	beq.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052dc:	429a      	cmp	r2, r3
 80052de:	d121      	bne.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d11a      	bne.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052f4:	4013      	ands	r3, r2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d111      	bne.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	3b01      	subs	r3, #1
 800530e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005310:	429a      	cmp	r2, r3
 8005312:	d107      	bne.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005320:	429a      	cmp	r2, r3
 8005322:	d001      	beq.n	8005328 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023800 	.word	0x40023800

08005338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0cc      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800534c:	4b68      	ldr	r3, [pc, #416]	@ (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d90c      	bls.n	8005374 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b65      	ldr	r3, [pc, #404]	@ (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005362:	4b63      	ldr	r3, [pc, #396]	@ (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d001      	beq.n	8005374 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0b8      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d020      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800538c:	4b59      	ldr	r3, [pc, #356]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a58      	ldr	r2, [pc, #352]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005396:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053a4:	4b53      	ldr	r3, [pc, #332]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	4a52      	ldr	r2, [pc, #328]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b0:	4b50      	ldr	r3, [pc, #320]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	494d      	ldr	r1, [pc, #308]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d044      	beq.n	8005458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d107      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053d6:	4b47      	ldr	r3, [pc, #284]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d119      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e07f      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d003      	beq.n	80053f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d107      	bne.n	8005406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f6:	4b3f      	ldr	r3, [pc, #252]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e06f      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005406:	4b3b      	ldr	r3, [pc, #236]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e067      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005416:	4b37      	ldr	r3, [pc, #220]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f023 0203 	bic.w	r2, r3, #3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4934      	ldr	r1, [pc, #208]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005424:	4313      	orrs	r3, r2
 8005426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005428:	f7ff f9f2 	bl	8004810 <HAL_GetTick>
 800542c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542e:	e00a      	b.n	8005446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005430:	f7ff f9ee 	bl	8004810 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800543e:	4293      	cmp	r3, r2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e04f      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005446:	4b2b      	ldr	r3, [pc, #172]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 020c 	and.w	r2, r3, #12
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	429a      	cmp	r2, r3
 8005456:	d1eb      	bne.n	8005430 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005458:	4b25      	ldr	r3, [pc, #148]	@ (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d20c      	bcs.n	8005480 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005466:	4b22      	ldr	r3, [pc, #136]	@ (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800546e:	4b20      	ldr	r3, [pc, #128]	@ (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d001      	beq.n	8005480 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e032      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800548c:	4b19      	ldr	r3, [pc, #100]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	4916      	ldr	r1, [pc, #88]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	4313      	orrs	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054aa:	4b12      	ldr	r3, [pc, #72]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	490e      	ldr	r1, [pc, #56]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054be:	f000 f821 	bl	8005504 <HAL_RCC_GetSysClockFreq>
 80054c2:	4602      	mov	r2, r0
 80054c4:	4b0b      	ldr	r3, [pc, #44]	@ (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	091b      	lsrs	r3, r3, #4
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	490a      	ldr	r1, [pc, #40]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 80054d0:	5ccb      	ldrb	r3, [r1, r3]
 80054d2:	fa22 f303 	lsr.w	r3, r2, r3
 80054d6:	4a09      	ldr	r2, [pc, #36]	@ (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80054d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054da:	4b09      	ldr	r3, [pc, #36]	@ (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff f952 	bl	8004788 <HAL_InitTick>

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40023c00 	.word	0x40023c00
 80054f4:	40023800 	.word	0x40023800
 80054f8:	080059d0 	.word	0x080059d0
 80054fc:	20000000 	.word	0x20000000
 8005500:	20000008 	.word	0x20000008

08005504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005508:	b094      	sub	sp, #80	@ 0x50
 800550a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005510:	2300      	movs	r3, #0
 8005512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005514:	2300      	movs	r3, #0
 8005516:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800551c:	4b79      	ldr	r3, [pc, #484]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 030c 	and.w	r3, r3, #12
 8005524:	2b08      	cmp	r3, #8
 8005526:	d00d      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0x40>
 8005528:	2b08      	cmp	r3, #8
 800552a:	f200 80e1 	bhi.w	80056f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_RCC_GetSysClockFreq+0x34>
 8005532:	2b04      	cmp	r3, #4
 8005534:	d003      	beq.n	800553e <HAL_RCC_GetSysClockFreq+0x3a>
 8005536:	e0db      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005538:	4b73      	ldr	r3, [pc, #460]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x204>)
 800553a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800553c:	e0db      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800553e:	4b73      	ldr	r3, [pc, #460]	@ (800570c <HAL_RCC_GetSysClockFreq+0x208>)
 8005540:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005542:	e0d8      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005544:	4b6f      	ldr	r3, [pc, #444]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800554c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800554e:	4b6d      	ldr	r3, [pc, #436]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d063      	beq.n	8005622 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800555a:	4b6a      	ldr	r3, [pc, #424]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	099b      	lsrs	r3, r3, #6
 8005560:	2200      	movs	r2, #0
 8005562:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005564:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556c:	633b      	str	r3, [r7, #48]	@ 0x30
 800556e:	2300      	movs	r3, #0
 8005570:	637b      	str	r3, [r7, #52]	@ 0x34
 8005572:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005576:	4622      	mov	r2, r4
 8005578:	462b      	mov	r3, r5
 800557a:	f04f 0000 	mov.w	r0, #0
 800557e:	f04f 0100 	mov.w	r1, #0
 8005582:	0159      	lsls	r1, r3, #5
 8005584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005588:	0150      	lsls	r0, r2, #5
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4621      	mov	r1, r4
 8005590:	1a51      	subs	r1, r2, r1
 8005592:	6139      	str	r1, [r7, #16]
 8005594:	4629      	mov	r1, r5
 8005596:	eb63 0301 	sbc.w	r3, r3, r1
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055a8:	4659      	mov	r1, fp
 80055aa:	018b      	lsls	r3, r1, #6
 80055ac:	4651      	mov	r1, sl
 80055ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055b2:	4651      	mov	r1, sl
 80055b4:	018a      	lsls	r2, r1, #6
 80055b6:	4651      	mov	r1, sl
 80055b8:	ebb2 0801 	subs.w	r8, r2, r1
 80055bc:	4659      	mov	r1, fp
 80055be:	eb63 0901 	sbc.w	r9, r3, r1
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055d6:	4690      	mov	r8, r2
 80055d8:	4699      	mov	r9, r3
 80055da:	4623      	mov	r3, r4
 80055dc:	eb18 0303 	adds.w	r3, r8, r3
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	462b      	mov	r3, r5
 80055e4:	eb49 0303 	adc.w	r3, r9, r3
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055f6:	4629      	mov	r1, r5
 80055f8:	024b      	lsls	r3, r1, #9
 80055fa:	4621      	mov	r1, r4
 80055fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005600:	4621      	mov	r1, r4
 8005602:	024a      	lsls	r2, r1, #9
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800560a:	2200      	movs	r2, #0
 800560c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800560e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005610:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005614:	f7fb f8de 	bl	80007d4 <__aeabi_uldivmod>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4613      	mov	r3, r2
 800561e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005620:	e058      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005622:	4b38      	ldr	r3, [pc, #224]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	099b      	lsrs	r3, r3, #6
 8005628:	2200      	movs	r2, #0
 800562a:	4618      	mov	r0, r3
 800562c:	4611      	mov	r1, r2
 800562e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005632:	623b      	str	r3, [r7, #32]
 8005634:	2300      	movs	r3, #0
 8005636:	627b      	str	r3, [r7, #36]	@ 0x24
 8005638:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800563c:	4642      	mov	r2, r8
 800563e:	464b      	mov	r3, r9
 8005640:	f04f 0000 	mov.w	r0, #0
 8005644:	f04f 0100 	mov.w	r1, #0
 8005648:	0159      	lsls	r1, r3, #5
 800564a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800564e:	0150      	lsls	r0, r2, #5
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4641      	mov	r1, r8
 8005656:	ebb2 0a01 	subs.w	sl, r2, r1
 800565a:	4649      	mov	r1, r9
 800565c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800566c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005670:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005674:	ebb2 040a 	subs.w	r4, r2, sl
 8005678:	eb63 050b 	sbc.w	r5, r3, fp
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	00eb      	lsls	r3, r5, #3
 8005686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800568a:	00e2      	lsls	r2, r4, #3
 800568c:	4614      	mov	r4, r2
 800568e:	461d      	mov	r5, r3
 8005690:	4643      	mov	r3, r8
 8005692:	18e3      	adds	r3, r4, r3
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	464b      	mov	r3, r9
 8005698:	eb45 0303 	adc.w	r3, r5, r3
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056aa:	4629      	mov	r1, r5
 80056ac:	028b      	lsls	r3, r1, #10
 80056ae:	4621      	mov	r1, r4
 80056b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056b4:	4621      	mov	r1, r4
 80056b6:	028a      	lsls	r2, r1, #10
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056be:	2200      	movs	r2, #0
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	61fa      	str	r2, [r7, #28]
 80056c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056c8:	f7fb f884 	bl	80007d4 <__aeabi_uldivmod>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4613      	mov	r3, r2
 80056d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	0c1b      	lsrs	r3, r3, #16
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	3301      	adds	r3, #1
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80056e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056ee:	e002      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056f0:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x204>)
 80056f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3750      	adds	r7, #80	@ 0x50
 80056fc:	46bd      	mov	sp, r7
 80056fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005702:	bf00      	nop
 8005704:	40023800 	.word	0x40023800
 8005708:	00f42400 	.word	0x00f42400
 800570c:	007a1200 	.word	0x007a1200

08005710 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e038      	b.n	8005798 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7fb fa88 	bl	8000c50 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3308      	adds	r3, #8
 8005748:	4619      	mov	r1, r3
 800574a:	4610      	mov	r0, r2
 800574c:	f000 f828 	bl	80057a0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	461a      	mov	r2, r3
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	f000 f88a 	bl	8005874 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6858      	ldr	r0, [r3, #4]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	f000 f8b7 	bl	80058e0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	6892      	ldr	r2, [r2, #8]
 800577a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	6892      	ldr	r2, [r2, #8]
 8005786:	f041 0101 	orr.w	r1, r1, #1
 800578a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	f023 0101 	bic.w	r1, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d102      	bne.n	80057d0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80057ca:	2340      	movs	r3, #64	@ 0x40
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e001      	b.n	80057d4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80057e0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80057e6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80057ec:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80057f2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80057f8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80057fe:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8005804:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800580a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005810:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800582e:	4b10      	ldr	r3, [pc, #64]	@ (8005870 <FSMC_NORSRAM_Init+0xd0>)
 8005830:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005838:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8005840:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	43db      	mvns	r3, r3
 8005850:	ea02 0103 	and.w	r1, r2, r3
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4319      	orrs	r1, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	0008fb7f 	.word	0x0008fb7f

08005874 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588a:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	431a      	orrs	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	021b      	lsls	r3, r3, #8
 80058a0:	431a      	orrs	r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	041b      	lsls	r3, r3, #16
 80058a8:	431a      	orrs	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	051b      	lsls	r3, r3, #20
 80058b2:	431a      	orrs	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	3b02      	subs	r3, #2
 80058ba:	061b      	lsls	r3, r3, #24
 80058bc:	431a      	orrs	r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	3201      	adds	r2, #1
 80058c8:	4319      	orrs	r1, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
	...

080058e0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058f4:	d11d      	bne.n	8005932 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058fe:	4b13      	ldr	r3, [pc, #76]	@ (800594c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005900:	4013      	ands	r3, r2
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	6811      	ldr	r1, [r2, #0]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	6852      	ldr	r2, [r2, #4]
 800590a:	0112      	lsls	r2, r2, #4
 800590c:	4311      	orrs	r1, r2
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	6892      	ldr	r2, [r2, #8]
 8005912:	0212      	lsls	r2, r2, #8
 8005914:	4311      	orrs	r1, r2
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	6992      	ldr	r2, [r2, #24]
 800591a:	4311      	orrs	r1, r2
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	68d2      	ldr	r2, [r2, #12]
 8005920:	0412      	lsls	r2, r2, #16
 8005922:	430a      	orrs	r2, r1
 8005924:	ea43 0102 	orr.w	r1, r3, r2
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005930:	e005      	b.n	800593e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800593a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	cff00000 	.word	0xcff00000

08005950 <memset>:
 8005950:	4402      	add	r2, r0
 8005952:	4603      	mov	r3, r0
 8005954:	4293      	cmp	r3, r2
 8005956:	d100      	bne.n	800595a <memset+0xa>
 8005958:	4770      	bx	lr
 800595a:	f803 1b01 	strb.w	r1, [r3], #1
 800595e:	e7f9      	b.n	8005954 <memset+0x4>

08005960 <__libc_init_array>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	4d0d      	ldr	r5, [pc, #52]	@ (8005998 <__libc_init_array+0x38>)
 8005964:	4c0d      	ldr	r4, [pc, #52]	@ (800599c <__libc_init_array+0x3c>)
 8005966:	1b64      	subs	r4, r4, r5
 8005968:	10a4      	asrs	r4, r4, #2
 800596a:	2600      	movs	r6, #0
 800596c:	42a6      	cmp	r6, r4
 800596e:	d109      	bne.n	8005984 <__libc_init_array+0x24>
 8005970:	4d0b      	ldr	r5, [pc, #44]	@ (80059a0 <__libc_init_array+0x40>)
 8005972:	4c0c      	ldr	r4, [pc, #48]	@ (80059a4 <__libc_init_array+0x44>)
 8005974:	f000 f818 	bl	80059a8 <_init>
 8005978:	1b64      	subs	r4, r4, r5
 800597a:	10a4      	asrs	r4, r4, #2
 800597c:	2600      	movs	r6, #0
 800597e:	42a6      	cmp	r6, r4
 8005980:	d105      	bne.n	800598e <__libc_init_array+0x2e>
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	f855 3b04 	ldr.w	r3, [r5], #4
 8005988:	4798      	blx	r3
 800598a:	3601      	adds	r6, #1
 800598c:	e7ee      	b.n	800596c <__libc_init_array+0xc>
 800598e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005992:	4798      	blx	r3
 8005994:	3601      	adds	r6, #1
 8005996:	e7f2      	b.n	800597e <__libc_init_array+0x1e>
 8005998:	08008968 	.word	0x08008968
 800599c:	08008968 	.word	0x08008968
 80059a0:	08008968 	.word	0x08008968
 80059a4:	0800896c 	.word	0x0800896c

080059a8 <_init>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr

080059b4 <_fini>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr
